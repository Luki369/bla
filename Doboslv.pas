unit doboslv;
{$I BIOS2000DEFINES.INC}
(******************************************************************************)
(***          Softwarehaus Brumund GmbH     DOBOS                           ***)
(***                                                                        ***)
(***    Version : 12.1.0.0   Datum : 01.01.1997   Autor :  DB               ***)
(***    Letzte Änderung            : 14.10.2019            PB               ***)
(***    Letzte Prüfung             : 25.02.2022            DB               ***)
(***                                                                        ***)
(***    Unit-Typ : MDI_Child                                                ***)
(***                                                                        ***)
(***    Beschreibung : Lagerverwaltung                                      ***)
(***                                                                        ***)
(***    Formulare    : TFRM_DobosLV                                         ***)
(***                                                                        ***)
(***    ACHTUNG bei Stammtabellenänderung! !SCheckAndInstallSammelArtikel   ***)
(***                                                                        ***)
(***    !SReadAllData , CopyPreiseLiefMiniSet , !SUpdateButtons             ***)
(***    !SPosMain , !SCheckNebenTabellen , InitQueriesAndDBs                ***)
(***    !SReadWriteRecent , !SUpdateRecentList , !SDeleteRecentListItem     ***)
(***    !SBereinigeRecentList , LoadFromExternalList                        ***)
(***                                                                        ***)
(***    ACHTUNG: Bei Stammänderungen ArtikelinM02Yamaichi nicht vergessen!  ***)
(***    ACHTUNG: Bei Stammänderungen ArtikelinM03Yamaichi nicht vergessen!  ***)
(***     //!!EditMark!!:ArtikelStammänderungen auch im dfm nicht vergessen! ***)
(***     //!!EditMark!!:ArtikelLieferantÄnderungen                          ***)
(***     //!!EditMark!!:SLPostenÄnderungen                                  ***)
(***                                                                        ***)
(******************************************************************************)
//** ML_Status: Resourcen definiert, alle in DobosLVRes.pas
//** PUM_Dummy Buttons auf den PageControls einfügen damit das PUM vom PageControl nicht feuert (Delphi-Bug)

interface


//** !!TODO für 12.0 Shortcuts und MNI-Aufrufe checken

uses
    Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, dialogs,
    StdCtrls, ComCtrls, ExtCtrls, Buttons, Menus, Grids, DBGrids, DB,
    DBCtrls, Printers, ADODB, clipbrd, ActnList, ImgList, ShellAPI,System.IOUtils,
    Variants, System.Actions, System.ImageList, System.Math, Vcl.Mask, Vcl.DBActns,Generics.Collections,
    Dllform, biosutil, allconst, dllfunc, StdResDef, DobosLVRes,
    SHBStrings, shbUtilEx, shbTableCell, shbStorage,  shbRecordCopy, shbClass,
    shbDialogs, shbEdits, shbNumEdit, shbDateControls, shbControls, shbCtrls,
    shbEditsEx, shbDbCtrlsEx, shbButtons, shbDbCtrls, shbUtil,
    shbAlpha,
    BIOSSkins, DMDev,
    cxGraphics, cxControls, cxLookAndFeels, cxLookAndFeelPainters, cxContainer,
    cxEdit, cxCheckBox, cxEditRepositoryItems, dxBarDBNav, cxLocalization, dxBar,
    cxBarEditItem, cxClasses, cxLabel, cxButtons, cxGroupBox, dxLayoutContainer,
    dxLayoutControl, dxLayoutControlAdapters, cxStyles, cxCustomData, cxFilter, cxData,
    cxDataStorage, cxNavigator, cxDataControllerConditionalFormattingRulesManagerDialog, cxDBData,
    cxGridLevel, cxGridCustomView, cxGridCustomTableView, cxGridTableView,
    cxGridDBTableView, cxGrid, cxTextEdit, dxLayoutcxEditAdapters,
    cxHyperLinkEdit, cxDBEdit, cxButtonEdit, cxSpinEdit, dxmdaset,
    cxMaskEdit, cxDropDownEdit, cxLookupEdit, cxDBLookupEdit, cxDBLookupComboBox,
    cxImageList, cxRadioGroup, dxLayoutLookAndFeels, dxSkinsCore,
    dxDateRanges, dxImageSlider, dxBarBuiltInMenu, cxGridCustomPopupMenu,
    cxGridPopupMenu, dxScrollbarAnnotations, cxGridBandedTableView, cxGridDBBandedTableView,
    dxGDIPlusClasses, cxCurrencyEdit;

const
    doboslv_Mehrfachaufruf = 2;

const
     KalkKzColor = $00ACFFCB;

//** War eigentlich eingebaut, damit das anpassen schneller geht
//** Jetzt ausgebaut, weil der gegenteilige Effekt eintrat PB 17.10.2019

type
  TMydxLayoutControl = class(TdxLayoutControl)
  protected
    function GetScrollStep: Integer; override;
    function GetContainerClass: TdxLayoutControlContainerClass; override;
  end;

  TMydxLayoutControlContainer = class(TdxLayoutControlContainer)
  protected
    function IsFloatingSupported: Boolean; override;
  end;

  TdxLayoutControl = class(TMydxLayoutControl);
  TdxBarControlAccess = class (TdxBarControl);
  TdxBarAccess = class (TdxBar);

type
  TFRM_DobosLV = class(TFRM_ppppppuu)
    ACL_Vorgang: TActionList;
    ACT_MakeAF: TAction;
    ACT_MakeAFMany: TAction;
    ACT_MakeAG: TAction;
    ACT_MakeAGMany: TAction;
    ACT_MakeAP: TAction;
    ACT_MakeAU: TAction;
    ACT_MakeAUMany: TAction;
    ACT_MakeBE: TAction;
    ACT_MakeBEMany: TAction;
    ACT_MakeFE: TAction;
    AQY_ArtikelStamm: TADOQuery;
    AQY_ArtikelStammAENDERUNG_DATUM: TDateTimeField;
    AQY_ArtikelStammAENDERUNG_USER_NR: TSmallintField;
    AQY_ArtikelStammAL_NUMMER: TWideStringField;
    AQY_ArtikelStammALTERNATE_ARTNR_1: TWideStringField;
    AQY_ArtikelStammALTERNATE_ARTNR_2: TWideStringField;
    AQY_ArtikelStammALTERNATE_ARTNR_3: TWideStringField;
    AQY_ArtikelStammAMM_ART_KEY1: TSmallintField;
    AQY_ArtikelStammAMM_ART_KEY2: TSmallintField;
    AQY_ArtikelStammAMM_ART_KEY3: TSmallintField;
    AQY_ArtikelStammAMM_ART_KEY4: TSmallintField;
    AQY_ArtikelStammAMM_ART_KEY5: TSmallintField;
    AQY_ArtikelStammAMM_INHALT_FREI4: TWideStringField;
    AQY_ArtikelStammAMM_INHALT_FREI5: TWideStringField;
    AQY_ArtikelStammAMM_INHALT_KEY1: TSmallintField;
    AQY_ArtikelStammAMM_INHALT_KEY2: TSmallintField;
    AQY_ArtikelStammAMM_INHALT_KEY3: TSmallintField;
    AQY_ArtikelStammAMM_PRINT: TWideStringField;
    AQY_ArtikelStammANLAGE_DATUM: TDateTimeField;
    AQY_ArtikelStammANLAGE_USER_NR: TSmallintField;
    AQY_ArtikelStammARBEITSPREIS: TBCDField;
    AQY_ArtikelStammARTNR: TWideStringField;
    AQY_ArtikelStammB_BASIS: TSmallintField;
    AQY_ArtikelStammBEZ_1: TWideStringField;
    AQY_ArtikelStammBEZ_2: TWideStringField;
    AQY_ArtikelStammBEZ_3: TWideStringField;
    AQY_ArtikelStammBEZ_4: TWideStringField;
    AQY_ArtikelStammBEZ_5: TWideStringField;
    AQY_ArtikelStammBEZ_6: TWideStringField;
    AQY_ArtikelStammBEZ_7: TWideStringField;
    AQY_ArtikelStammBEZ_8: TWideStringField;
    AQY_ArtikelStammBN: TWideStringField;
    AQY_ArtikelStammBREITE: TBCDField;
    AQY_ArtikelStammBV_PLAN_NUMMER: TIntegerField;
    AQY_ArtikelStammBV_SI_TAGE: TIntegerField;
    AQY_ArtikelStammC1: TWideStringField;
    AQY_ArtikelStammC10: TWideStringField;
    AQY_ArtikelStammC2: TWideStringField;
    AQY_ArtikelStammC3: TWideStringField;
    AQY_ArtikelStammC4: TWideStringField;
    AQY_ArtikelStammC5: TWideStringField;
    AQY_ArtikelStammC6: TWideStringField;
    AQY_ArtikelStammC7: TWideStringField;
    AQY_ArtikelStammC8: TWideStringField;
    AQY_ArtikelStammC9: TWideStringField;
    AQY_ArtikelStammCHARGENPFLICHTIG: TWideStringField;
    AQY_ArtikelStammDISPO_STOP: TWideStringField;
    AQY_ArtikelStammDK_1: TIntegerField;
    AQY_ArtikelStammDK_2: TIntegerField;
    AQY_ArtikelStammDK_3: TIntegerField;
    AQY_ArtikelStammDK_4: TIntegerField;
    AQY_ArtikelStammDK_5: TIntegerField;
    AQY_ArtikelStammDURCH_EK: TBCDField;
    AQY_ArtikelStammDURCHMESSER: TBCDField;
    AQY_ArtikelStammEAN_NUMMER: TBCDField;
    AQY_ArtikelStammECCN_NUMMER: TWideStringField;
    AQY_ArtikelStammEK: TBCDField;
    AQY_ArtikelStammEM_JN: TWideStringField;
    AQY_ArtikelStammEM1_ANTEIL: TBCDField;
    AQY_ArtikelStammEM1_METHODE: TWideStringField;
    AQY_ArtikelStammEM1_NUMMER: TSmallintField;
    AQY_ArtikelStammEM2_ANTEIL: TBCDField;
    AQY_ArtikelStammEM2_METHODE: TWideStringField;
    AQY_ArtikelStammEM2_NUMMER: TSmallintField;
    AQY_ArtikelStammEM3_ANTEIL: TBCDField;
    AQY_ArtikelStammEM3_METHODE: TWideStringField;
    AQY_ArtikelStammEM3_NUMMER: TSmallintField;
    AQY_ArtikelStammFEINPLANUNG: TWideStringField;
    AQY_ArtikelStammGARANTIE_ZEIT: TSmallintField;
    AQY_ArtikelStammGEWICHT: TBCDField;
    AQY_ArtikelStammGUE_BEME: TBCDField;
    AQY_ArtikelStammHOEHE: TBCDField;
    AQY_ArtikelStammHYPERLINK: TIntegerField;
    AQY_ArtikelStammINFO: TWideStringField;
    AQY_ArtikelStammKALK_AUFSCHLAG_GRUPPE: TIntegerField;
    AQY_ArtikelStammKALK_KZ: TWideStringField;
    AQY_ArtikelStammKALK_KZ_VK: TWideStringField;
    AQY_ArtikelStammKB: TWideStringField;
    AQY_ArtikelStammLAENGE: TBCDField;
    AQY_ArtikelStammLEAB: TDateTimeField;
    AQY_ArtikelStammLEZU: TDateTimeField;
    AQY_ArtikelStammMASSE_FREITEXT: TWideStringField;
    AQY_ArtikelStammMASSE_FUER_FA: TWideStringField;
    AQY_ArtikelStammMASSE_SIND_MM: TWideStringField;
    AQY_ArtikelStammMASSEINHEIT: TBCDField;
    AQY_ArtikelStammME: TWideStringField;
    AQY_ArtikelStammMIN_DB: TBCDField;
    AQY_ArtikelStammMS_JN: TWideStringField;
    AQY_ArtikelStammP_BASIS: TSmallintField;
    AQY_ArtikelStammPACKMITTEL: TWideStringField;
    AQY_ArtikelStammPACKMITTEL_IST_PM: TWideStringField;
    AQY_ArtikelStammPACKMITTEL_STUECK_IN_PM: TBCDField;
    AQY_ArtikelStammPACKMITTEL_VERSION: TIntegerField;
    AQY_ArtikelStammPDM_GEPFLEGT: TWideStringField;
    AQY_ArtikelStammPE_VK: TSmallintField;
    AQY_ArtikelStammPRAEFERENZ: TWideStringField;
    AQY_ArtikelStammPRAEFERENZ_ANTEIL: TBCDField;
    AQY_ArtikelStammPRAEFERENZ_ARTIKEL: TWideStringField;
    AQY_ArtikelStammPRAEFERENZ_UE_DATUM: TDateTimeField;
    AQY_ArtikelStammPREISAENDERUNG_BEMERKUNG: TWideStringField;
    AQY_ArtikelStammPRL_POS: TIntegerField;
    AQY_ArtikelStammPRUEF_PFLICHTIG: TWideStringField;
    AQY_ArtikelStammRASTER_VK: TSmallintField;
    AQY_ArtikelStammRG: TSmallintField;
    AQY_ArtikelStammSACHMERKMAL: TWideStringField;
    AQY_ArtikelStammSL_JN: TWideStringField;
    AQY_ArtikelStammSPEZ_GEWICHT: TBCDField;
    AQY_ArtikelStammSTATUS: TSmallintField;
    AQY_ArtikelStammURSPRUNG_LAND: TSmallintField;
    AQY_ArtikelStammURSPRUNG_REGION: TSmallintField;
    AQY_ArtikelStammUS: TSmallintField;
    AQY_ArtikelStammV_EINHEIT: TBCDField;
    AQY_ArtikelStammVERPACKUNGSKOSTEN: TBCDField;
    AQY_ArtikelStammVIEWER_PFAD: TWideStringField;
    AQY_ArtikelStammVORGABELAGER_AB: TIntegerField;
    AQY_ArtikelStammVORGABELAGER_AB_DV: TIntegerField;
    AQY_ArtikelStammVORGABELAGER_ZU: TIntegerField;
    AQY_ArtikelStammVORGABELAGER_ZU_DV: TIntegerField;
    AQY_ArtikelStammWARENNUMMER: TIntegerField;
    AQY_ArtikelStammWG: TSmallintField;
    AQY_ArtikelStammZN: TWideStringField;
    AQY_ArtikelStammZN_REV: TWideStringField;
    AQY_ArtikelStammZOLLTARIF_NUMMER: TWideStringField;
    AQY_ArtNr: TADOQuery;
    AQY_Auftrag: TADOQuery;
    AQY_Bild: TADOQuery;
    AQY_BildFILE_INHALT: TBlobField;
    AQY_BildFILE_NAME: TWideStringField;
    AQY_Dispo: TADOQuery;
    AQY_Divers: TADOQuery;
    AQY_Divers2: TADOQuery;
    AQY_DVFehlmengen: TADOQuery;
    AQY_DVKalk: TADOQuery;
    AQY_DVKalkARTNR: TWideStringField;
    AQY_DVKalkBEM: TWideStringField;
    AQY_DVKalkBEM_Kurz: TWideStringField;
    AQY_DVKalkEK_EINMALKOSTEN: TBCDField;
    AQY_DVKalkEK_FERTIGUNG: TBCDField;
    AQY_DVKalkEK_FREMDARBEIT_FIX: TBCDField;
    AQY_DVKalkEK_FREMDARBEIT_MINDEST: TBCDField;
    AQY_DVKalkEK_FREMDARBEIT_VAR: TBCDField;
    AQY_DVKalkEK_MATERIAL: TBCDField;
    AQY_DVKalkEK_RUESTKOSTEN: TBCDField;
    AQY_DVKalkEK_WERKZEUGKOSTEN: TBCDField;
    AQY_DVKalkEK_ZUSCHLAG: TBCDField;
    AQY_DVKalkLE_KALK_DATUM: TDateTimeField;
    AQY_DVKalkLE_KALK_MENGE: TIntegerField;
    AQY_DVKalkLE_KALK_USER: TIntegerField;
    AQY_DVKalkNUMMER: TIntegerField;
    AQY_DVKalkVK_EINMALKOSTEN: TBCDField;
    AQY_DVKalkVK_FERTIGUNG: TBCDField;
    AQY_DVKalkVK_FREMDARBEIT_FIX: TBCDField;
    AQY_DVKalkVK_FREMDARBEIT_MINDEST: TBCDField;
    AQY_DVKalkVK_FREMDARBEIT_VAR: TBCDField;
    AQY_DVKalkVK_MATERIAL: TBCDField;
    AQY_DVKalkVK_RUESTKOSTEN: TBCDField;
    AQY_DVKalkVK_WERKZEUGKOSTEN: TBCDField;
    AQY_DVKalkVK_ZUSCHLAG: TBCDField;
    AQY_FremdTexte: TADOQuery;
    AQY_FremdTexteARTNR: TWideStringField;
    AQY_FremdTexteBEZ_1: TWideStringField;
    AQY_FremdTexteBEZ_2: TWideStringField;
    AQY_FremdTexteBEZ_3: TWideStringField;
    AQY_FremdTexteBEZ_4: TWideStringField;
    AQY_FremdTexteBEZ_5: TWideStringField;
    AQY_FremdTexteBEZ_6: TWideStringField;
    AQY_FremdTexteBEZ_7: TWideStringField;
    AQY_FremdTexteBEZ_8: TWideStringField;
    AQY_FremdTexteSPRACHE: TSmallintField;
    AQY_GetLamps: TADOQuery;
    AQY_HinweiseExists: TADOQuery;
    AQY_IBExist: TADOQuery;
    AQY_Lager: TADOQuery;
    AQY_LagerARTNR: TWideStringField;
    AQY_LagerBBK: TBCDField;
    AQY_LagerBESTAND: TBCDField;
    AQY_LagerBESTELLT: TBCDField;
    AQY_LagerINV_BESTAND: TBCDField;
    AQY_LagerINV_DATUM: TDateTimeField;
    AQY_LagerINV_EK: TBCDField;
    AQY_LagerINV_GEZAEHLT: TBCDField;
    AQY_LagerINV_GEZAEHLT_ZUM: TBCDField;
    AQY_LagerINV_KZ: TWideStringField;
    AQY_LagerLAGER: TIntegerField;
    AQY_LagerLAGERNAME: TWideStringField;
    AQY_LagerMIBEST: TBCDField;
    AQY_LagerORT: TWideStringField;
    AQY_LagerRUECKSTAND: TBCDField;
    AQY_LagerSOLLBEST: TBCDField;
    AQY_Lieferant: TADOQuery;
    AQY_LieferantARTNR: TWideStringField;
    AQY_LieferantBEM: TWideStringField;
    AQY_LieferantBESTELL_NR: TWideStringField;
    AQY_LieferantEK_1: TBCDField;
    AQY_LieferantEK_10: TBCDField;
    AQY_LieferantEK_2: TBCDField;
    AQY_LieferantEK_3: TBCDField;
    AQY_LieferantEK_4: TBCDField;
    AQY_LieferantEK_5: TBCDField;
    AQY_LieferantEK_6: TBCDField;
    AQY_LieferantEK_7: TBCDField;
    AQY_LieferantEK_8: TBCDField;
    AQY_LieferantEK_9: TBCDField;
    AQY_LieferantFRACHT: TBCDField;
    AQY_LieferantFRACHT_BP: TWideStringField;
    AQY_LieferantGESPERRT: TSmallintField;
    AQY_LieferantHYPERLINK: TIntegerField;
    AQY_LieferantKUNU: TIntegerField;
    AQY_LieferantLE_PREIS_UPDATE: TDateTimeField;
    AQY_LieferantLIEF_NAME: TWideStringField;
    AQY_LieferantMIAB: TBCDField;
    AQY_LieferantNUMMER: TSmallintField;
    AQY_LieferantPE: TSmallintField;
    AQY_LieferantRABATT: TBCDField;
    AQY_LieferantRASTER: TSmallintField;
    AQY_LieferantSTAFFEL_BP: TWideStringField;
    AQY_LieferantWBZ: TSmallintField;
    AQY_LieferantWS: TSmallintField;
    AQY_LieferantZOLL: TBCDField;
    AQY_LieferantZOLL_BP: TWideStringField;
    AQY_LookUp: TADOQuery;
    AQY_MiniSet: TADOQuery;
    AQY_MiniSetARTNR: TWideStringField;
    AQY_MiniSetBEZ_1: TWideStringField;
    AQY_MiniSetBEZ_2: TWideStringField;
    AQY_MiniSetMENGE: TBCDField;
    AQY_MiniSetNUMMER: TSmallintField;
    AQY_MiniSetUNTER_ARTNR: TWideStringField;
    AQY_Nav: TADOQuery;
    AQY_Preise: TADOQuery;
    AQY_PreiseART: TWideStringField;
    AQY_PreiseARTNR: TWideStringField;
    AQY_PreiseLE_PREIS_UPDATE: TDateTimeField;
    AQY_PreiseVK_1: TBCDField;
    AQY_PreiseVK_10: TBCDField;
    AQY_PreiseVK_2: TBCDField;
    AQY_PreiseVK_3: TBCDField;
    AQY_PreiseVK_4: TBCDField;
    AQY_PreiseVK_5: TBCDField;
    AQY_PreiseVK_6: TBCDField;
    AQY_PreiseVK_7: TBCDField;
    AQY_PreiseVK_8: TBCDField;
    AQY_PreiseVK_9: TBCDField;
    AQY_PreiseWS: TSmallintField;
    AQY_SumBestand: TADOQuery;
    AQY_Umsatz: TADOQuery;
    AQY_UmsatzAJ_DB_PROZ: TCurrencyField;
    AQY_UmsatzSUMAJDB_WERT: TBCDField;
    AQY_UmsatzSUMAJEK_STUECK: TBCDField;
    AQY_UmsatzSUMAJEK_WERT: TBCDField;
    AQY_UmsatzSUMAJVB_STUECK: TBCDField;
    AQY_UmsatzSUMAJVK_STUECK: TBCDField;
    AQY_UmsatzSUMAJVK_WERT: TBCDField;
    AQY_UmsatzSUMTOTDB_WERT: TBCDField;
    AQY_UmsatzSUMTOTEK_STUECK: TBCDField;
    AQY_UmsatzSUMTOTEK_WERT: TBCDField;
    AQY_UmsatzSUMTOTVB_STUECK: TBCDField;
    AQY_UmsatzSUMTOTVK_STUECK: TBCDField;
    AQY_UmsatzSUMTOTVK_WERT: TBCDField;
    AQY_UmsatzSUMVJDB_WERT: TBCDField;
    AQY_UmsatzSUMVJEK_STUECK: TBCDField;
    AQY_UmsatzSUMVJEK_WERT: TBCDField;
    AQY_UmsatzSUMVJVB_STUECK: TBCDField;
    AQY_UmsatzSUMVJVK_STUECK: TBCDField;
    AQY_UmsatzSUMVJVK_WERT: TBCDField;
    AQY_UmsatzSUMVVJDB_WERT: TBCDField;
    AQY_UmsatzSUMVVJEK_STUECK: TBCDField;
    AQY_UmsatzSUMVVJEK_WERT: TBCDField;
    AQY_UmsatzSUMVVJVB_STUECK: TBCDField;
    AQY_UmsatzSUMVVJVK_STUECK: TBCDField;
    AQY_UmsatzSUMVVJVK_WERT: TBCDField;
    AQY_UmsatzTOT_DB_PROZ: TCurrencyField;
    AQY_UmsatzVJ_DB_PROZ: TCurrencyField;
    AQY_UmsatzVVJ_DB_PROZ: TCurrencyField;
    BVL_Bilder: TBevel;
    CBX_BildStretch: TCheckBox;
    DLGP_Print: TPrintDialog;
    DTS_ArtikelStamm: TDataSource;
    DTS_Bild: TDataSource;
    DTS_DVKalk: TDataSource;
    DTS_FremdTexte: TDataSource;
    DTS_Lager: TDataSource;
    DTS_Lieferant: TDataSource;
    DTS_MiniSet: TDataSource;
    DTS_Preise: TDataSource;
    DTS_SumBestand: TDataSource;
    DTS_Umsatz: TDataSource;
    EDT_AMM_Art1: TSHBButtonEdit;
    EDT_AMM_Art2: TSHBButtonEdit;
    EDT_AMM_Art3: TSHBButtonEdit;
    EDT_AMM_Art4: TSHBButtonEdit;
    EDT_AMM_Art5: TSHBButtonEdit;
    EDT_AMM_Inhalt_Key1: TSHBDBIntEdit;
    EDT_AMM_Inhalt_Key2: TSHBDBIntEdit;
    EDT_AMM_Inhalt_Key3: TSHBDBIntEdit;
    EDT_AMM_Inhalt1: TSHBButtonEdit;
    EDT_AMM_Inhalt2: TSHBButtonEdit;
    EDT_AMM_Inhalt3: TSHBButtonEdit;
    EDT_AMM_InhaltFrei4: TSHBDBEdit;
    EDT_AMM_InhaltFrei5: TSHBDBEdit;
    EDT_AMM_Key1: TSHBDBIntEdit;
    EDT_AMM_Key2: TSHBDBIntEdit;
    EDT_AMM_Key3: TSHBDBIntEdit;
    EDT_AMM_Key4: TSHBDBIntEdit;
    EDT_AMM_Key5: TSHBDBIntEdit;
    EDT_AMMPrint: TSHBDBEdit;
    EDT_ArtNr: TSHBLookupWithQueryEdit;
    EDT_AufschlagGruppe: TSHBDBIntEdit;
    EDT_BEZ_1: TSHBLookupWithQueryEdit;
    EDT_Bez_2: TSHBDBEdit;
    EDT_BN: TSHBLookupWithQueryEdit;
    EDT_DVKalk_EK_Einmalkosten: TSHBDBNumEdit;
    EDT_DVKalk_EK_Fertigung: TSHBDBNumEdit;
    EDT_DVKalk_EK_Fremdarbeit_Fix: TSHBDBNumEdit;
    EDT_DVKalk_EK_Fremdarbeit_Mindest: TSHBDBNumEdit;
    EDT_DVKalk_EK_FremdarbeitVar: TSHBDBNumEdit;
    EDT_DVKalk_EK_Material: TSHBDBNumEdit;
    EDT_DVKalk_EK_Ruestkosten: TSHBDBNumEdit;
    EDT_DVKalk_EK_Werkzeugkosten: TSHBDBNumEdit;
    EDT_DVKalk_EK_Zuschlag: TSHBDBNumEdit;
    EDT_DVKalk_KalkDatum: TSHBDBDateEdit;
    EDT_DVKalk_KalkUser: TSHBDBIntEdit;
    EDT_DVKalk_Menge: TSHBDBIntEdit;
    EDT_DVKalk_VK_Einmalkosten: TSHBDBNumEdit;
    EDT_DVKalk_VK_Fertigung: TSHBDBNumEdit;
    EDT_DVKalk_VK_Fremdarbeit_Fix: TSHBDBNumEdit;
    EDT_DVKalk_VK_Fremdarbeit_Mindest: TSHBDBNumEdit;
    EDT_DVKalk_VK_Fremdarbeit_Var: TSHBDBNumEdit;
    EDT_DVKalk_VK_Material: TSHBDBNumEdit;
    EDT_DVKalk_VK_Ruestkosten: TSHBDBNumEdit;
    EDT_DVKalk_VK_Werkzeugkosten: TSHBDBNumEdit;
    EDT_DVKalk_VK_Zuschlag: TSHBDBNumEdit;
    EDT_DVKalkNummer: TSHBDBIntEdit;
    EDT_FBez_1: TSHBDBEdit;
    EDT_FBez_2: TSHBDBEdit;
    EDT_FBez_3: TSHBDBEdit;
    EDT_FBez_4: TSHBDBEdit;
    EDT_FBez_5: TSHBDBEdit;
    EDT_FBez_6: TSHBDBEdit;
    EDT_FBez_7: TSHBDBEdit;
    EDT_FBez_8: TSHBDBEdit;
    EDT_KalkKZ: TSHBDBEdit;
    EDT_KALKKZ_VK: TSHBDBEdit;
    EDT_KB: TSHBLookupWithQueryEdit;
    EDT_LePreisUpdate: TSHBDBDateEdit;
    EDT_LePreisUpdateVK: TSHBDBDateEdit;
    EDT_LiefBemerkung: TSHBDBEdit;
    EDT_LiefBestellNr: TSHBDBEdit;
    EDT_LiefEK_1: TSHBDBNumEdit;
    EDT_LiefEK_10: TSHBDBNumEdit;
    EDT_LiefEK_2: TSHBDBNumEdit;
    EDT_LiefEK_3: TSHBDBNumEdit;
    EDT_LiefEK_4: TSHBDBNumEdit;
    EDT_LiefEK_5: TSHBDBNumEdit;
    EDT_LiefEK_6: TSHBDBNumEdit;
    EDT_LiefEK_7: TSHBDBNumEdit;
    EDT_LiefEK_8: TSHBDBNumEdit;
    EDT_LiefEK_9: TSHBDBNumEdit;
    EDT_LiefFracht: TSHBDBNumEdit;
    EDT_LiefFracht_BP: TSHBDBEdit;
    EDT_LiefKuNu: TSHBDBIntEdit;
    EDT_LiefMiAb: TSHBDBNumEdit;
    EDT_LiefPE: TSHBDBIntEdit;
    EDT_LiefRabatt: TSHBDBNumEdit;
    EDT_LiefRaster: TSHBDBIntEdit;
    EDT_LiefStaffelBP: TSHBDBEdit;
    EDT_LiefWBZ: TSHBDBIntEdit;
    EDT_LiefWS: TSHBDBIntEdit;
    EDT_LiefZoll: TSHBDBNumEdit;
    EDT_LiefZOLL_BP: TSHBDBEdit;
    EDT_PreisBem: TSHBDBEdit;
    EDT_Sprache: TSHBDBIntEdit;
    EDT_VK_1: TSHBDBNumEdit;
    EDT_VK_10: TSHBDBNumEdit;
    EDT_VK_2: TSHBDBNumEdit;
    EDT_VK_3: TSHBDBNumEdit;
    EDT_VK_4: TSHBDBNumEdit;
    EDT_VK_5: TSHBDBNumEdit;
    EDT_VK_6: TSHBDBNumEdit;
    EDT_VK_7: TSHBDBNumEdit;
    EDT_VK_8: TSHBDBNumEdit;
    EDT_VK_9: TSHBDBNumEdit;
    EDT_ZN: TSHBLookupWithQueryEdit;
    MEM_DVKalkBemKurz: TDBMemo;
    MEM_SM: TMemo;
    MNI_Trenner3: TMenuItem;
    MNI_10: TMenuItem;
    MNI_11: TMenuItem;
    MNI_AddRecent: TMenuItem;
    MNI_AMM: TMenuItem;
    MNI_ArtikelArchiv: TMenuItem;
    MNI_ArtikelPreisArchiv: TMenuItem;
    MNI_ArtikelPreisArchivSingle: TMenuItem;
    MNI_ArtikelTab: TMenuItem;
    MNI_Bereinigungslauf: TMenuItem;
    MNI_BIOSSearchParams: TMenuItem;
    MNI_BuKz: TMenuItem;
    MNI_CallRecentList: TMenuItem;
    MNI_ChangeToLief1: TMenuItem;
    MNI_ChargeInsert: TMenuItem;
    MNI_Chargerecherchieren: TMenuItem;
    MNI_CutTextToClipboard: TMenuItem;
    MNI_DauerEdit: TMenuItem;
    MNI_Delete: TMenuItem;
    MNI_DeleteRecent: TMenuItem;
    MNI_DeleteSet: TMenuItem;
    MNI_DispoAll: TMenuItem;
    MNI_DispoSingle: TMenuItem;
    MNI_DrDocArchivieren: TMenuItem;
    MNI_DrDocSichten: TMenuItem;
    MNI_Drucken: TMenuItem;
    MNI_EdelMetall: TMenuItem;
    MNI_Edit: TMenuItem;
    MNI_EKStaffelEingeben: TMenuItem;
    MNI_EKVariablesRasterErfassen: TMenuItem;
    MNI_EnableBIOSSearch: TMenuItem;
    MNI_Erfassen: TMenuItem;
    MNI_FCPOutput: TMenuItem;
    MNI_FelderManipulieren: TMenuItem;
    MNI_FliessText: TMenuItem;
    MNI_FremdFliessText: TMenuItem;
    MNI_InsertBPool: TMenuItem;
    MNI_IntraStat: TMenuItem;
    MNI_Inventur: TMenuItem;
    MNI_ISGA: TMenuItem;
    MNI_ISHA: TMenuItem;
    MNI_ISIE: TMenuItem;
    MNI_ISIL: TMenuItem;
    MNI_ISKatalog: TMenuItem;
    MNI_ISUL: TMenuItem;
    MNI_ISUR: TMenuItem;
    MNI_ISVerfahren: TMenuItem;
    MNI_ISVZ: TMenuItem;
    MNI_Kalk1EK: TMenuItem;
    MNI_Kalk1VK: TMenuItem;
    MNI_KalkEK: TMenuItem;
    MNI_KalkVK: TMenuItem;
    MNI_Korrektur: TMenuItem;
    MNI_KundenSuche: TMenuItem;
    MNI_LAdrN1: TMenuItem;
    MNI_LagerCancel: TMenuItem;
    MNI_LagerDelete: TMenuItem;
    MNI_LagerEdit: TMenuItem;
    MNI_LagerInsert: TMenuItem;
    MNI_LagerSave: TMenuItem;
    MNI_LastArtNr: TMenuItem;
    MNI_LiefCancel: TMenuItem;
    MNI_LiefDelete: TMenuItem;
    MNI_LiefEdit: TMenuItem;
    MNI_LiefInsert: TMenuItem;
    MNI_LiefSave: TMenuItem;
    MNI_LoadSelect: TMenuItem;
    MNI_LoadSLExplorer: TMenuItem;
    MNI_LookUp: TMenuItem;
    MNI_Mark: TMenuItem;
    MNI_MassenAnfrageInsertBPool: TMenuItem;
    MNI_MegamatArtikelExport: TMenuItem;
    MNI_N19: TMenuItem;
    MNI_OpenZeichDaten: TMenuItem;
    MNI_Packmittel: TMenuItem;
    MNI_PackmittelKunde: TMenuItem;
    MNI_PflegeAutoArtNr: TMenuItem;
    MNI_PflegeBlob: TMenuItem;
    MNI_PflegeCF: TMenuItem;
    MNI_PflegeLagerName: TMenuItem;
    MNI_PflegenRaster: TMenuItem;
    MNI_PLTexte: TMenuItem;
    MNI_PreiseCancel: TMenuItem;
    MNI_PreiseDelete: TMenuItem;
    MNI_PreiseEdit: TMenuItem;
    MNI_PreiseInsert: TMenuItem;
    MNI_PreiseSave: TMenuItem;
    MNI_PreisKalk: TMenuItem;
    MNI_PrintEtikett: TMenuItem;
    MNI_RecordCopy: TMenuItem;
    MNI_ReiterAnheftenBewegungen: TMenuItem;
    MNI_ReiterLoesenBewegungen: TMenuItem;
    MNI_RG: TMenuItem;
    MNI_S10: TMenuItem;
    MNI_S3: TMenuItem;
    MNI_S5: TMenuItem;
    MNI_S6: TMenuItem;
    MNI_S8: TMenuItem;
    MNI_SaveSelect: TMenuItem;
    MNI_Schluessel: TMenuItem;
    MNI_SchnellSucheParams: TMenuItem;
    MNI_SetUpLenArtNr: TMenuItem;
    MNI_SetViewListPath: TMenuItem;
    MNI_ShowChargenlager: TMenuItem;
    MNI_SiArchiv: TMenuItem;
    MNI_SiArtKu: TMenuItem;
    MNI_SiAuftrag: TMenuItem;
    MNI_SiBestellung: TMenuItem;
    MNI_Sichten: TMenuItem;
    MNI_SichtenFehlmengen: TMenuItem;
    MNI_SiDavosArchiv: TMenuItem;
    MNI_SiDavosFA: TMenuItem;
    MNI_SiDispo: TMenuItem;
    MNI_SiInfoBlatt: TMenuItem;
    MNI_SiNettoBedarf: TMenuItem;
    MNI_SiRO: TMenuItem;
    MNI_SiSerial: TMenuItem;
    MNI_SiSLStruktur: TMenuItem;
    MNI_SiSonderPM: TMenuItem;
    MNI_SiSoPreis: TMenuItem;
    MNI_SiStatistik: TMenuItem;
    MNI_SiVertrag: TMenuItem;
    MNI_Status: TMenuItem;
    MNI_StdWerte: TMenuItem;
    MNI_Tips: TMenuItem;
    MNI_Translate: TMenuItem;
    MNI_Trenner1: TMenuItem;
    MNI_Viewer: TMenuItem;
    MNI_VKStaffelEingeben: TMenuItem;
    MNI_VKVariablesRasterErfassen: TMenuItem;
    MNI_WG: TMenuItem;
    MNI_WGKonten: TMenuItem;
    MNI_XRef: TMenuItem;
    MNI_ZusatzTexte: TMenuItem;
    N1: TMenuItem;
    PAN_LiefName: TSHBPanel;
    PUM_AMM: TPopupMenu;
    PUM_Archiv: TPopupMenu;
    PUM_ArtNr: TPopupMenu;
    PUM_Bewegungen: TPopupMenu;
    PUM_EKPreise: TPopupMenu;
    PUM_Fremdtexte: TPopupMenu;
    PUM_KB: TPopupMenu;
    PUM_Lager: TPopupMenu;
    PUM_Lief: TPopupMenu;
    PUM_LiefNr: TPopupMenu;
    PUM_Preise: TPopupMenu;
    PUM_Raster: TPopupMenu;
    PUM_Texte: TPopupMenu;
    PUM_Zeichnung: TPopupMenu;
    RCC_Artikel: TRecordCopy;
    MNI_AktivierenAuftraege: TMenuItem;
    MNI_DurchsucheRueckstaende: TMenuItem;
    AQY_DVRueckstaende: TADOQuery;
    AQY_DVRueckstaendeANZAHL: TIntegerField;
    MNI_AktivierenAuftrag: TMenuItem;
    AQY_Zusatztexte: TADOQuery;
    DTS_Zusatztexte: TDataSource;
    TDB_Zusatztexte: TDBRichEdit;
    AQY_ZusatztexteINHALT: TMemoField;
    AQY_ZusatztexteSPRACHE: TIntegerField;
    AQY_LagerGESPERRT: TIntegerField;
    AQY_CHLager: TADOQuery;
    DTS_CHLager: TDataSource;
    AQY_CHLagerARTNR: TWideStringField;
    AQY_CHLagerGANG: TWideStringField;
    AQY_CHLagerEBENE: TIntegerField;
    AQY_CHLagerFACH: TIntegerField;
    AQY_CHLagerBESTAND: TBCDField;
    AQY_CHLagerDATUM: TDateTimeField;
    AQY_CHLagerCHARGE: TWideStringField;
    AQY_CHLagerBestand0: TCurrencyField;
    AQY_CHLagerReserviert0: TCurrencyField;
    AQY_CHLagerSumBestandCL: TCurrencyField;
    EDT_Bestand0: TSHBDBNumEdit;
    EDT_Reserviert0: TSHBDBNumEdit;
    EDT_SumBestandCL: TSHBDBNumEdit;
    LYC_LagerverwaltungGroup_Root: TdxLayoutGroup;
    LYC_Lagerverwaltung: TdxLayoutControl;
    SBT_InternetLink: TSpeedButton;
    EDT_Bez_3: TSHBDBEdit;
    EDT_Bez_4: TSHBDBEdit;
    EDT_Bez_5: TSHBDBEdit;
    EDT_Bez_6: TSHBDBEdit;
    EDT_Bez_7: TSHBDBEdit;
    EDT_Bez_8: TSHBDBEdit;
    EDT_Info: TSHBDBEdit;
    EDT_ViewerPfad: TSHBDBEdit;
    EDT_DK_2: TSHBDBIntEdit;
    EDT_DK_3: TSHBDBIntEdit;
    EDT_DK_4: TSHBDBIntEdit;
    EDT_DK_5: TSHBDBIntEdit;
    EDT_DK_1: TSHBDBIntEdit;
    EDT_ZNRev: TSHBDBEdit;
    EDT_SumBestand: TSHBDBNumEdit;
    EDT_SumBestellt: TSHBDBNumEdit;
    EDT_SumRueckstand: TSHBDBNumEdit;
    EDT_SumMiBest: TSHBDBNumEdit;
    EDT_SumSollBest: TSHBDBNumEdit;
    EDT_SumDavosBestellt: TSHBDBNumEdit;
    EDT_SumDavosRueckstand: TSHBDBNumEdit;
    EDT_SumBBK: TSHBDBNumEdit;
    EDT_GueBeMe: TSHBDBNumEdit;
    EDT_LeZu: TSHBDBDateEdit;
    EDT_LeAb: TSHBDBDateEdit;
    EDT_EK: TSHBDBNumEdit;
    EDT_DurchEK: TSHBDBNumEdit;
    EDT_AP: TSHBDBNumEdit;
    EDT_V_Einheit: TSHBDBNumEdit;
    EDT_SumReserviert: TSHBDBNumEdit;
    EDT_MinDB: TSHBDBNumEdit;
    EDT_Dispo: TSHBNumEdit;
    EDT_C1: TSHBDBEdit;
    EDT_C2: TSHBDBEdit;
    EDT_C3: TSHBDBEdit;
    EDT_C4: TSHBDBEdit;
    EDT_C5: TSHBDBEdit;
    EDT_C6: TSHBDBEdit;
    EDT_C7: TSHBDBEdit;
    EDT_C8: TSHBDBEdit;
    EDT_C9: TSHBDBEdit;
    EDT_C10: TSHBDBEdit;
    EDT_WG: TSHBDBIntEdit;
    EDT_RG: TSHBDBIntEdit;
    EDT_Status: TSHBDBIntEdit;
    EDT_US: TSHBDBIntEdit;
    EDT_ME: TSHBDBEdit;
    EDT_MS_JN: TSHBDBEdit;
    EDT_RasterVK: TSHBDBIntEdit;
    PAN_RG: TSHBPanel;
    PAN_WG: TSHBPanel;
    EDT_PE_VK: TSHBDBIntEdit;
    EDT_SLJN: TSHBDBEdit;
    EDT_Sachmerkmal: TSHBDBEdit;
    EDT_DispoStop: TSHBDBEdit;
    EDT_Pruefpflichtig: TSHBDBEdit;
    EDT_PDMGepflegt: TSHBDBEdit;
    EDT_Chargenpflichtig: TSHBDBEdit;
    EDT_Feinplanung: TSHBDBEdit;
    EDT_Gewicht: TSHBDBNumEdit;
    EDT_AnlageDatum: TSHBDBDateEdit;
    EDT_AenderungDatum: TSHBDBDateEdit;
    EDT_UNAnlage: TSHBDBIntEdit;
    EDT_UNAenderung: TSHBDBIntEdit;
    EDT_GarantieZeit: TSHBDBIntEdit;
    EDT_EANNummer: TSHBDBNumEdit;
    EDT_PrlPos: TSHBDBPictureEdit;
    EDT_BVPlanNr: TSHBDBIntEdit;
    EDT_BVSiTage: TSHBDBIntEdit;
    EDT_Packmittel: TSHBDBEdit;
    EDT_PackmittelVariante: TSHBDBIntEdit;
    EDT_PackmittelIsPM: TSHBDBEdit;
    EDT_Packmittel_InStueck: TSHBDBNumEdit;
    EDT_AlternateArtNr3: TSHBDBEdit;
    EDT_Verpackungskosten: TSHBDBNumEdit;
    EDT_EMJN: TSHBDBEdit;
    EDT_EM1_Methode: TSHBDBEdit;
    EDT_EM2_Methode: TSHBDBEdit;
    EDT_EM3_Methode: TSHBDBEdit;
    EDT_EM1_Nummer: TSHBDBIntEdit;
    EDT_EM2_Nummer: TSHBDBIntEdit;
    EDT_EM3_Nummer: TSHBDBIntEdit;
    EDT_EM1_Anteil: TSHBDBNumEdit;
    EDT_EM2_Anteil: TSHBDBNumEdit;
    EDT_EM3_Anteil: TSHBDBNumEdit;
    EDT_Laenge: TSHBDBNumEdit;
    EDT_Breite: TSHBDBNumEdit;
    EDT_Hoehe: TSHBDBNumEdit;
    EDT_Durchmesser: TSHBDBNumEdit;
    EDT_SpezGewicht: TSHBDBNumEdit;
    EDT_B_Basis: TSHBDBIntEdit;
    EDT_P_Basis: TSHBDBIntEdit;
    EDT_B_BasisText: TSHBEdit;
    EDT_P_BasisText: TSHBEdit;
    EDT_MasseInmm: TSHBDBEdit;
    EDT_InFAVorbesetzen: TSHBDBEdit;
    EDT_MasseFreitext: TSHBDBEdit;
    EDT_Warennummer: TSHBDBPictureEdit;
    EDT_Ursprungsland: TSHBDBIntEdit;
    EDT_Ursprungsregion: TSHBDBIntEdit;
    EDT_MassEinheit: TSHBDBNumEdit;
    EDT_ALNummer: TSHBDBEdit;
    EDT_ZolltarifNummer: TSHBDBEdit;
    EDT_ECCN_Nummer: TSHBDBEdit;
    EDT_Praeferenz: TSHBDBEdit;
    EDT_PraeferenzArtikel: TSHBDBEdit;
    EDT_Anteil: TSHBDBNumEdit;
    EDT_Praeferenz_UEDatum: TSHBDBDateEdit;
    EDT_VorgabeLagerZu: TSHBDBIntEdit;
    EDT_VorgabeLagerZuDV: TSHBDBIntEdit;
    EDT_VorgabeLagerAB: TSHBDBIntEdit;
    EDT_VorgabeLagerABDV: TSHBDBIntEdit;
    EDT_AlternateArtNr1: TSHBDBEdit;
    EDT_AlternateArtNr2: TSHBDBEdit;
    LYI_Artikelnummer: TdxLayoutItem;
    LYI_Kurzbezeichnung: TdxLayoutItem;
    LYI_Bestellnummer: TdxLayoutItem;
    LYI_Zeichnungsnummer: TdxLayoutItem;
    LYI_Bezeichnung1: TdxLayoutItem;
    LYI_Bezeichnung2: TdxLayoutItem;
    LYI_Bezeichnung3: TdxLayoutItem;
    LYI_Bezeichnung4: TdxLayoutItem;
    LYI_Bezeichnung5: TdxLayoutItem;
    LYI_Bezeichnung6: TdxLayoutItem;
    LYI_Bezeichnung7: TdxLayoutItem;
    LYI_Bezeichnung8: TdxLayoutItem;
    LYI_Info: TdxLayoutItem;
    LYI_DK1: TdxLayoutItem;
    LYI_DK2: TdxLayoutItem;
    LYI_DK3: TdxLayoutItem;
    LYI_DK4: TdxLayoutItem;
    LYI_DK5: TdxLayoutItem;
    LYI_Zeichnungspfad: TdxLayoutItem;
    LYI_ZNIndex: TdxLayoutItem;
    LYI_BestandFrei: TdxLayoutItem;
    LYI_Reserviert: TdxLayoutItem;
    LYI_Bestellt: TdxLayoutItem;
    LYI_Rueckstand: TdxLayoutItem;
    LYI_Mindestbestand: TdxLayoutItem;
    LYI_SollBestand: TdxLayoutItem;
    LYI_SummeBBK: TdxLayoutItem;
    LYI_DVBestand: TdxLayoutItem;
    LYI_DVOffen: TdxLayoutItem;
    LYI_LetzterEK: TdxLayoutItem;
    LYI_DurchEK: TdxLayoutItem;
    LYI_MinDB: TdxLayoutItem;
    LYI_Arbeitspreis: TdxLayoutItem;
    LYI_VEinheit: TdxLayoutItem;
    LYI_GuenstBestellmenge: TdxLayoutItem;
    LYI_LetzterZugang: TdxLayoutItem;
    LYI_LetzterAbgang: TdxLayoutItem;
    LYI_SummeDispo: TdxLayoutItem;
    LYI_Warengruppe: TdxLayoutItem;
    LYI_Rabattgruppe: TdxLayoutItem;
    LYI_Status: TdxLayoutItem;
    LYI_Umsatzsteuer: TdxLayoutItem;
    LYI_Preiseinheit: TdxLayoutItem;
    LYI_WarengruppeBez: TdxLayoutItem;
    LYI_RabattgruppeBez: TdxLayoutItem;
    LYI_Sachmerkmal: TdxLayoutItem;
    LYI_Stueckliste: TdxLayoutItem;
    LYI_Mengenraster: TdxLayoutItem;
    LYI_Miniset: TdxLayoutItem;
    LYI_Mengeneinheit: TdxLayoutItem;
    LYI_DispoStop: TdxLayoutItem;
    LYI_Feinplanung: TdxLayoutItem;
    LYI_PDM: TdxLayoutItem;
    LYI_Pruefpflichtig: TdxLayoutItem;
    LYI_Chargenpflichtig: TdxLayoutItem;
    LYI_C1: TdxLayoutItem;
    LYI_C2: TdxLayoutItem;
    LYI_C3: TdxLayoutItem;
    LYI_C4: TdxLayoutItem;
    LYI_C5: TdxLayoutItem;
    LYI_C6: TdxLayoutItem;
    LYI_C7: TdxLayoutItem;
    LYI_C8: TdxLayoutItem;
    LYI_C9: TdxLayoutItem;
    LYI_C10: TdxLayoutItem;
    LYI_Garantie: TdxLayoutItem;
    LYI_PreisListenPos: TdxLayoutItem;
    LYI_EANNummer: TdxLayoutItem;
    LYI_Gewicht: TdxLayoutItem;
    LYI_IstEinPackmittel: TdxLayoutItem;
    LYI_Verpackungskosten: TdxLayoutItem;
    LYI_PMVariante: TdxLayoutItem;
    LYI_FuellmengePM: TdxLayoutItem;
    LYI_Packmittel: TdxLayoutItem;
    LYI_PackmittelArtikelnummer: TdxLayoutItem;
    LYI_AngelegtDatum: TdxLayoutItem;
    LYI_AngelegtUser: TdxLayoutItem;
    LYI_BVNummer: TdxLayoutItem;
    LYI_Aenderungsdatum: TdxLayoutItem;
    LYI_AenderungsUser: TdxLayoutItem;
    LYI_BVST: TdxLayoutItem;
    LYI_EM1Nummer: TdxLayoutItem;
    LYI_EM2Nummer: TdxLayoutItem;
    LYI_EM3Nummer: TdxLayoutItem;
    LYI_EMBerechnung: TdxLayoutItem;
    LYI_EM1Art: TdxLayoutItem;
    LYI_EM2Art: TdxLayoutItem;
    LYI_EM3Art: TdxLayoutItem;
    LYI_EM1Anteil: TdxLayoutItem;
    LYI_EM2Anteil: TdxLayoutItem;
    LYI_EM3Anteil: TdxLayoutItem;
    LYI_BestandBasis: TdxLayoutItem;
    LYI_PreisbestEinheitBasis: TdxLayoutItem;
    LYI_MasseInMM: TdxLayoutItem;
    LYI_BestandBasisText: TdxLayoutItem;
    LYI_PreisbestEinheitBasisText: TdxLayoutItem;
    LYI_MasseInFA: TdxLayoutItem;
    LYI_Laenge: TdxLayoutItem;
    LYI_Breite: TdxLayoutItem;
    LYI_Hoehe: TdxLayoutItem;
    LYI_Durchmesser: TdxLayoutItem;
    LYI_SpezGewicht: TdxLayoutItem;
    LYI_MasseFreitext: TdxLayoutItem;
    LYI_StatWarennummer: TdxLayoutItem;
    LYI_Ursprungsland: TdxLayoutItem;
    LYI_Region: TdxLayoutItem;
    LYI_Masseinheit: TdxLayoutItem;
    LYI_Anteilsberechnung: TdxLayoutItem;
    LYI_DatumUrsprungserklaerung: TdxLayoutItem;
    LYI_ALNummer: TdxLayoutItem;
    LYI_Zolltarifnummer: TdxLayoutItem;
    LYI_ECCNNummer: TdxLayoutItem;
    LYI_Praeferenz: TdxLayoutItem;
    LYI_AnteilsberechnungProzent: TdxLayoutItem;
    LYI_Zugang: TdxLayoutItem;
    LYI_ZugangFertigung: TdxLayoutItem;
    LYI_Abgang: TdxLayoutItem;
    LYI_AbgangFertigung: TdxLayoutItem;
    LYI_Ersatztype1: TdxLayoutItem;
    LYI_Ersatztype2: TdxLayoutItem;
    LYI_LiefName: TdxLayoutItem;
    LYI_LiefPreiseSeit: TdxLayoutItem;
    LYI_LiefBENummer: TdxLayoutItem;
    LYI_LiefWaerungsschluessel: TdxLayoutItem;
    LYI_LiefEK1: TdxLayoutItem;
    LYI_LiefEK6: TdxLayoutItem;
    LYI_LiefWBZ: TdxLayoutItem;
    LYI_LiefMengenraster: TdxLayoutItem;
    LYI_LiefEK2: TdxLayoutItem;
    LYI_LiefEK7: TdxLayoutItem;
    LYI_LiefMiAbnahmMenge: TdxLayoutItem;
    LYI_LiefPreiseinheit: TdxLayoutItem;
    LYI_LiefEK3: TdxLayoutItem;
    LYI_LiefEK8: TdxLayoutItem;
    LYI_Zoll: TdxLayoutItem;
    LYI_ZollArt: TdxLayoutItem;
    LYI_LiefRabatt: TdxLayoutItem;
    LYI_LiefEK4: TdxLayoutItem;
    LYI_LiefEK9: TdxLayoutItem;
    LYI_LiefFracht: TdxLayoutItem;
    LYI_LiefFrachtArt: TdxLayoutItem;
    LYI_LiefBP: TdxLayoutItem;
    LYI_LiefEK5: TdxLayoutItem;
    LYI_LiefEK10: TdxLayoutItem;
    LYI_LiefBemerkung: TdxLayoutItem;
    LYI_LiefNummer: TdxLayoutItem;
    LYI_ChaotLagerGesamtBestand: TdxLayoutItem;
    LYI_ChaotLagerBestand0: TdxLayoutItem;
    LYI_ChaotLagerReserviert0: TdxLayoutItem;
    LYI_BildSkalieren: TdxLayoutItem;
    LYI_MerkmaleDrucken: TdxLayoutItem;
    LYI_MerkmaleSachmerkmal: TdxLayoutItem;
    LYI_KategorieArt1: TdxLayoutItem;
    LYI_KategorieArtButton1: TdxLayoutItem;
    LYI_Merkmal1: TdxLayoutItem;
    LYI_MerkmalButton1: TdxLayoutItem;
    LYI_KategorieArt2: TdxLayoutItem;
    LYI_KategorieArtButton2: TdxLayoutItem;
    LYI_Merkmal2: TdxLayoutItem;
    LYI_MerkmalButton2: TdxLayoutItem;
    LYI_KategorieArt3: TdxLayoutItem;
    LYI_KategorieArtButton3: TdxLayoutItem;
    LYI_Merkmal3: TdxLayoutItem;
    LYI_MerkmalButton3: TdxLayoutItem;
    LYI_KategorieArt4: TdxLayoutItem;
    LYI_KategorieArtButton4: TdxLayoutItem;
    LYI_Merkmal4: TdxLayoutItem;
    LYI_KategorieArt5: TdxLayoutItem;
    LYI_KategorieArtButton5: TdxLayoutItem;
    LYI_Merkmal5: TdxLayoutItem;
    LYI_FremdTexteSprache: TdxLayoutItem;
    LYI_FremdTexteBez1: TdxLayoutItem;
    LYI_FremdTexteBez2: TdxLayoutItem;
    LYI_FremdTexteBez3: TdxLayoutItem;
    LYI_FremdTexteBez4: TdxLayoutItem;
    LYI_FremdTexteBez5: TdxLayoutItem;
    LYI_FremdTexteBez6: TdxLayoutItem;
    LYI_FremdTexteBez7: TdxLayoutItem;
    LYI_FremdTexteBez8: TdxLayoutItem;
    LYI_Zusatztexte: TdxLayoutItem;
    LYI_KalkEKEinmal: TdxLayoutItem;
    LYI_KalkEKMaterial: TdxLayoutItem;
    LYI_KalkEKRuest: TdxLayoutItem;
    LYI_KalkEKFertigung: TdxLayoutItem;
    LYI_KalkEKFremdFix: TdxLayoutItem;
    LYI_KalkEKFremdStueck: TdxLayoutItem;
    LYI_KalkEKFremdMin: TdxLayoutItem;
    LYI_KalkEKZuschlag: TdxLayoutItem;
    LYI_KalkEKWerkzeug: TdxLayoutItem;
    LYI_KalkVKEinmal: TdxLayoutItem;
    LYI_KalkVKMaterial: TdxLayoutItem;
    LYI_KalkVKRuest: TdxLayoutItem;
    LYI_KalkVKFertigung: TdxLayoutItem;
    LYI_KalkVKFremdFix: TdxLayoutItem;
    LYI_KalkVKFremdStueck: TdxLayoutItem;
    LYI_KalkVKFremdMin: TdxLayoutItem;
    LYI_KalkVKZuschlag: TdxLayoutItem;
    LYI_KalkVKWerkzeug: TdxLayoutItem;
    LYI_KalkSchema: TdxLayoutItem;
    LYI_KalkKZVK: TdxLayoutItem;
    LYI_KalkAuGruppe: TdxLayoutItem;
    LYI_KalkStueck: TdxLayoutItem;
    LYI_KalkAm: TdxLayoutItem;
    LYI_KalkVon: TdxLayoutItem;
    LYI_KalkBemerkung: TdxLayoutItem;
    LYG_Stammdaten: TdxLayoutGroup;
    LYG_Bestand: TdxLayoutGroup;
    LYG_Bestaende1: TdxLayoutGroup;
    LYG_Bestaende2: TdxLayoutGroup;
    LYG_Codierung: TdxLayoutGroup;
    LYG_Diverse: TdxLayoutGroup;
    LYG_Edelmetall: TdxLayoutGroup;
    LYG_Maße: TdxLayoutGroup;
    LYG_IntrastattZoll: TdxLayoutGroup;
    LYG_ZuAbgangslager: TdxLayoutGroup;
    LYG_TexteTab: TdxLayoutGroup;
    LYG_Lieferanten: TdxLayoutGroup;
    LYG_Miniset: TdxLayoutGroup;
    LYG_Lager: TdxLayoutGroup;
    LYG_ChaotischeLager: TdxLayoutGroup;
    LYG_Umsaetze: TdxLayoutGroup;
    LYG_Bilder: TdxLayoutGroup;
    LYG_Merkmale: TdxLayoutGroup;
    LYG_FremdsprachTexte: TdxLayoutGroup;
    LYG_Zusatztexte: TdxLayoutGroup;
    LYG_Kalkulation: TdxLayoutGroup;
    PAN_Lieferanten: TPanel;
    LYI_LiefButtons: TdxLayoutItem;
    SBT_LiefEdit: TSpeedButton;
    SBT_LiefInsert: TSpeedButton;
    SBT_LiefDelete: TSpeedButton;
    SBT_LiefCancel: TSpeedButton;
    SBT_LiefSave: TSpeedButton;
    PAN_Miniset: TPanel;
    LYI_MinisetButtons: TdxLayoutItem;
    SBT_MiniSetNumerieren: TSpeedButton;
    SBT_MiniSetEdit: TSpeedButton;
    SBT_MiniSetInsert: TSpeedButton;
    SBT_MiniSetDelete: TSpeedButton;
    SBT_MiniSetCancel: TSpeedButton;
    SBT_MiniSetSave: TSpeedButton;
    PAN_Laeger: TPanel;
    LYI_LagerButtons: TdxLayoutItem;
    SBT_DispoAll: TSpeedButton;
    SBT_DispoSingle: TSpeedButton;
    SBT_LagerEdit: TSpeedButton;
    SBT_LagerInsert: TSpeedButton;
    SBT_LagerDelete: TSpeedButton;
    SBT_LagerCancel: TSpeedButton;
    SBT_LagerSave: TSpeedButton;
    PAN_FremdTexte: TPanel;
    LYI_FremdTexteButtons: TdxLayoutItem;
    SBT_FremdTextEdit: TSpeedButton;
    SBT_FremdTextInsert: TSpeedButton;
    SBT_FremdTextDelete: TSpeedButton;
    SBT_FremdTextCancel: TSpeedButton;
    SBT_FremdTextSave: TSpeedButton;
    PAN_Kalkulation: TPanel;
    LYI_KalkulationButtons: TdxLayoutItem;
    SBT_DVKalkInsert: TSpeedButton;
    SBT_DVKalkDelete: TSpeedButton;
    SBT_DVKalkCancel: TSpeedButton;
    SBT_DVKalkSave: TSpeedButton;
    SBT_DVKalkMaske: TSpeedButton;
    SBT_DVKalkSchemaVgl: TSpeedButton;
    SBT_DVKalkEdit: TSpeedButton;
    LYI_VK3: TdxLayoutItem;
    LYI_VK5: TdxLayoutItem;
    LYI_VK2: TdxLayoutItem;
    LYI_VK1: TdxLayoutItem;
    LYI_VK4: TdxLayoutItem;
    LYI_VK10: TdxLayoutItem;
    LYI_VK6: TdxLayoutItem;
    LYI_VKPreiseSeit: TdxLayoutItem;
    LYI_VK9: TdxLayoutItem;
    LYI_VK7: TdxLayoutItem;
    LYI_VK8: TdxLayoutItem;
    LYI_VKBemerkung: TdxLayoutItem;
    PAN_Preise: TPanel;
    LYI_PreiseButtons: TdxLayoutItem;
    SBT_PreiseEdit: TSpeedButton;
    SBT_PreiseSave: TSpeedButton;
    SBT_PreiseInsert: TSpeedButton;
    SBT_PreiseCancel: TSpeedButton;
    SBT_PreiseDelete: TSpeedButton;
    LYG_Preise: TdxLayoutGroup;
    BTN_LoadZusatzTexte: TdxBarLargeButton;
    BTN_LoadBestandsKorrektur: TdxBarLargeButton;
    BTN_LoadPreisKalkulation: TdxBarLargeButton;
    BTN_LoadNeBedarfPool: TdxBarLargeButton;
    BTN_LoadKuSpezPackmittel: TdxBarLargeButton;
    BTN_WerkzeugEntnahme: TdxBarLargeButton;
    LYG_Codefelder: TdxLayoutGroup;
    LYI_EmptySpace6: TdxLayoutEmptySpaceItem;
    LYI_EmptySpace7: TdxLayoutEmptySpaceItem;
    LYI_Trenner6: TdxLayoutEmptySpaceItem;
    LYI_Trenner5: TdxLayoutEmptySpaceItem;
    LYG_KalkulationUnten: TdxLayoutGroup;
    LYG_LiefPreise6b10: TdxLayoutGroup;
    LYG_LiefPreise1b5: TdxLayoutGroup;
    LYG_LiefDaten1: TdxLayoutGroup;
    CBX_LiefGesperrt: TDBCheckBox;
    LYG_LieferantenName: TdxLayoutGroup;
    LYG_VK1b10: TdxLayoutGroup;
    LYG_VK1b5: TdxLayoutGroup;
    LYG_6b10: TdxLayoutGroup;
    LYG_MerkmaleKategorie: TdxLayoutGroup;
    LYG_MerkmalText: TdxLayoutGroup;
    LYG_MerkmaleZusatz: TdxLayoutGroup;
    LYG_EKGrundkosten: TdxLayoutGroup;
    LYG_VKGrundkosten: TdxLayoutGroup;
    LYG_KalkEinstellungen: TdxLayoutGroup;
    LYG_LagerTexte: TdxLayoutGroup;
    BTN_LoadPMAllg: TdxBarLargeButton;
    PUM_BarPackmittel: TdxBarPopupMenu;
    BTN_PMBeimKunden: TdxBarLargeButton;
    SBT_LiefInternetLink: TSpeedButton;
    BTN_SucheSachnummer: TdxBarLargeButton;
    PUM_LVSuche: TdxBarPopupMenu;
    LYI_ArtikelHyperlink: TdxLayoutItem;
    LYI_Spacer: TdxLayoutEmptySpaceItem;
    LYI_EmptySpace8: TdxLayoutEmptySpaceItem;
    GRD_MinisetView: TcxGridDBTableView;
    GRD_Container_MinisetLevel1: TcxGridLevel;
    GRD_Container_Miniset: TcxGrid;
    LYI_MinisetTabelle: TdxLayoutItem;
    GRD_MinisetViewARTNR: TcxGridDBColumn;
    GRD_MinisetViewNUMMER: TcxGridDBColumn;
    GRD_MinisetViewUNTER_ARTNR: TcxGridDBColumn;
    GRD_MinisetViewMENGE: TcxGridDBColumn;
    GRD_MinisetViewBEZ_1: TcxGridDBColumn;
    GRD_MinisetViewBEZ_2: TcxGridDBColumn;
    LYG_Texte: TdxLayoutGroup;
    GRD_LagerDBView: TcxGridDBBandedTableView;
    GRD_LagerContainerLevel1: TcxGridLevel;
    GRD_LagerContainer: TcxGrid;
    LYI_LagerTabelle: TdxLayoutItem;
    GRD_LagerDBViewARTNR: TcxGridDBBandedColumn;
    GRD_LagerDBViewLAGER: TcxGridDBBandedColumn;
    GRD_LagerDBViewLAGERNAME: TcxGridDBBandedColumn;
    GRD_LagerDBViewBESTAND: TcxGridDBBandedColumn;
    GRD_LagerDBViewBESTELLT: TcxGridDBBandedColumn;
    GRD_LagerDBViewRUECKSTAND: TcxGridDBBandedColumn;
    GRD_LagerDBViewORT: TcxGridDBBandedColumn;
    GRD_LagerDBViewBBK: TcxGridDBBandedColumn;
    GRD_LagerDBViewMIBEST: TcxGridDBBandedColumn;
    GRD_LagerDBViewSOLLBEST: TcxGridDBBandedColumn;
    GRD_LagerDBViewINV_BESTAND: TcxGridDBBandedColumn;
    GRD_LagerDBViewINV_GEZAEHLT: TcxGridDBBandedColumn;
    GRD_LagerDBViewINV_EK: TcxGridDBBandedColumn;
    GRD_LagerDBViewINV_KZ: TcxGridDBBandedColumn;
    GRD_LagerDBViewINV_DATUM: TcxGridDBBandedColumn;
    GRD_LagerDBViewINV_GEZAEHLT_ZUM: TcxGridDBBandedColumn;
    GRD_LagerDBViewGESPERRT: TcxGridDBBandedColumn;
    GRD_ChaotLagerView: TcxGridDBTableView;
    GRD_ChaotLagerLevel1: TcxGridLevel;
    GRD_ChaotLagerContainer: TcxGrid;
    LYI_TabelleChaotLager: TdxLayoutItem;
    GRD_ChaotLagerViewARTNR: TcxGridDBColumn;
    GRD_ChaotLagerViewGANG: TcxGridDBColumn;
    GRD_ChaotLagerViewEBENE: TcxGridDBColumn;
    GRD_ChaotLagerViewFACH: TcxGridDBColumn;
    GRD_ChaotLagerViewBESTAND: TcxGridDBColumn;
    GRD_ChaotLagerViewDATUM: TcxGridDBColumn;
    GRD_ChaotLagerViewCHARGE: TcxGridDBColumn;
    GRD_ChaotLagerViewSumBestandCL: TcxGridDBColumn;
    GRD_ChaotLagerViewBestand0: TcxGridDBColumn;
    GRD_ChaotLagerViewReserviert0: TcxGridDBColumn;
    GRD_UmsaetzeView: TcxGridDBTableView;
    GRD_UmsaetzeLevel1: TcxGridLevel;
    GRD_UmsaetzeContainer: TcxGrid;
    LYI_UmsatzTabelle: TdxLayoutItem;
    DTS_UmsatzTabelle: TDataSource;
    GRD_UmsaetzeViewRecId: TcxGridDBColumn;
    GRD_UmsaetzeViewANZEIGE: TcxGridDBColumn;
    GRD_UmsaetzeViewAKTJAHR: TcxGridDBColumn;
    GRD_UmsaetzeViewVORJAHR: TcxGridDBColumn;
    GRD_UmsaetzeViewVORVORJAHR: TcxGridDBColumn;
    GRD_UmsaetzeViewALLEJAHRE: TcxGridDBColumn;
    MEM_Umsaetze: TdxMemData;
    MEM_UmsaetzeANZEIGE: TStringField;
    MEM_UmsaetzeAJ: TCurrencyField;
    MEM_UmsaetzeVJ: TCurrencyField;
    MEM_UmsaetzeVVJ: TCurrencyField;
    MEM_UmsaetzeTOT: TCurrencyField;
    LYG_MainLinks: TdxLayoutGroup;
    LYG_MainRechts: TdxLayoutGroup;
    EDT_WaehrungsText: TSHBEdit;
    LYI_VKWSText: TdxLayoutItem;
    EDT_PreiseWS: TSHBDBIntEdit;
    LYI_VKWS: TdxLayoutItem;
    EDT_LiefNummer: TSHBDBIntEdit;
    LYG_LieferantenPreise: TdxLayoutGroup;
    LYG_LiefZusatzDaten1: TdxLayoutGroup;
    LYG_LieferantDaten: TdxLayoutGroup;
    LYI_Trenner: TdxLayoutSeparatorItem;
    LYI_Trenner1: TdxLayoutSeparatorItem;
    BTN_LoadArtikelArchiv: TdxBarLargeButton;
    BTN_MarkSmall: TdxBarButton;
    BTN_MakeAnfrage: TdxBarLargeButton;
    BTN_MakeBestellung: TdxBarLargeButton;
    BTN_MakeFertigungsauftrag: TdxBarLargeButton;
    BTN_MakeArbeitsplan: TdxBarButton;
    BTN_MakeAngebotMehrArtikel: TdxBarLargeButton;
    BTN_MakeAuftragMehrArtikel: TdxBarLargeButton;
    BTN_MakeAnfragenMehrArtikel: TdxBarLargeButton;
    BTN_MakeBestellungMehrArtikel: TdxBarLargeButton;
    LYG_MerkmaleOben: TdxLayoutGroup;
    LYG_KalkulationOben: TdxLayoutGroup;
    LYI_KalkKZEK: TdxLayoutItem;
    LYG_DruckKennzeichen: TdxLayoutGroup;
    IML_Tabs: TcxImageList;
    RBT_PreiseNetto: TcxRadioButton;
    RBT_PreiseBrutto: TcxRadioButton;
    RBT_PreiseAktuell: TcxRadioButton;
    RBT_PreiseNeu: TcxRadioButton;
    LAB_ArtikelInatktivText: TcxLabel;
    LYI_ArtikelGesperrtInfo: TdxLayoutItem;
    LFL_LayoutLV: TdxLayoutLookAndFeelList;
    LAF_CaptionUnderline: TdxLayoutStandardLookAndFeel;
    LYG_StammdatenOben: TdxLayoutGroup;
    LYG_StammdatenUnten: TdxLayoutGroup;
    BTN_MarkSpecial: TdxBarButton;
    PUM_Mark: TdxBarPopupMenu;
    BTN_SaveSHBLayoufile: TdxBarButton;
    DLG_SelektionVorhanden: TTaskDialog;
    SBT_PreisePrior: TSpeedButton;
    SBT_PreiseNext: TSpeedButton;
    SBT_PreiseLast: TSpeedButton;
    SBT_PreiseFirst: TSpeedButton;
    SBT_LieferantFirst: TSpeedButton;
    SBT_LieferantPrior: TSpeedButton;
    SBT_LieferantNext: TSpeedButton;
    SBT_LieferantLast: TSpeedButton;
    IMC_Bilder: TcxImageCollection;
    IMS_Bilder: TdxImageSlider;
    LYI_Bild: TdxLayoutItem;
    SBT_FremdTexteFirst: TSpeedButton;
    SBT_FremdtextePrior: TSpeedButton;
    SBT_FremdtexteNext: TSpeedButton;
    SBT_FremdtexteLast: TSpeedButton;
    SBT_KalkFirst: TSpeedButton;
    SBT_KalkPrior: TSpeedButton;
    SBT_KalkNext: TSpeedButton;
    SBT_KalkLast: TSpeedButton;
    LAB_LieferantenAnzahl: TLabel;
    LAB_DVKalkGrundkosten: TLabel;
    LAF_CaptionUnderlineAndBold: TdxLayoutStandardLookAndFeel;
    BTN_UseBadges: TdxBarButton;
    AQY_Badges: TADOQuery;
    LYG_FremdtexteSprache: TdxLayoutGroup;
    LYI_FremdTexteSpracheLabel: TdxLayoutItem;
    PAN_ZusatztexteNavigation: TPanel;
    LYG_ZusatztexteButtons: TdxLayoutItem;
    SBT_ZusatztextSpracheFirst: TSpeedButton;
    SBT_ZusatztextSprachePrior: TSpeedButton;
    SBT_ZusatztextSpracheNext: TSpeedButton;
    SBT_ZusatztextSpracheLast: TSpeedButton;
    EDT_ZusatztextSprache: TSHBDBEdit;
    LAB_ZusatztexteSprache: TLabel;
    LYI_ZugangslagerFertigungName: TdxLayoutItem;
    LYG_ZugangslagerFertigung: TdxLayoutGroup;
    LYG_Zugangslager: TdxLayoutGroup;
    LYG_Abgangslager: TdxLayoutGroup;
    LYG_AbgangslagerFertigung: TdxLayoutGroup;
    LYI_ZugangslagerName: TdxLayoutItem;
    LYI_Abgangslagername: TdxLayoutItem;
    LYI_AbgangslagerFertigungName: TdxLayoutItem;
    BTN_ArtikelZusatzInfos: TdxBarLargeButton;
    PUM_ArtikelZusatzInfos: TdxBarPopupMenu;
    BTN_Vorgaenge: TdxBarLargeButton;
    PUM_Belege: TdxBarPopupMenu;
    BTN_Fertigung: TdxBarLargeButton;
    PUM_Fertigung: TdxBarPopupMenu;
    BTN_Seriennummern: TdxBarLargeButton;
    PUM_Seriennummern: TdxBarPopupMenu;
    BTN_Dispo: TdxBarLargeButton;
    PUM_Dispo: TdxBarPopupMenu;
    BTN_Statistiken: TdxBarLargeButton;
    PUM_Statistiken: TdxBarPopupMenu;
    BTN_Stuecklisten: TdxBarLargeButton;
    PUM_Stuecklisten: TdxBarPopupMenu;
    BTN_Dokumente: TdxBarLargeButton;
    PUM_Dokumente: TdxBarPopupMenu;
    BTN_Drucken: TdxBarLargeButton;
    PUM_Drucken: TdxBarPopupMenu;
    BTN_Kundenspezifisch: TdxBarLargeButton;
    PUM_Kundenspezifisch: TdxBarPopupMenu;
    BTN_Archive: TdxBarLargeButton;
    PUM_Archive: TdxBarPopupMenu;
    BTN_Packmittelverwaltung: TdxBarButton;
    BTN_Kalkulation: TdxBarLargeButton;
    PUM_Kalkulation: TdxBarPopupMenu;
    MNI_Bearbeiten: TMenuItem;
    MNI_DrDoc: TMenuItem;
    MNI_Selektion: TMenuItem;
    N2: TMenuItem;
    MNI_Massenaenderung: TMenuItem;
    N3: TMenuItem;
    MNI_Bestellpool: TMenuItem;
    MNI_Kundenspezifisch: TMenuItem;
    MNI_Programme: TMenuItem;
    N4: TMenuItem;
    N5: TMenuItem;
    N6: TMenuItem;
    MNI_Packmittelverwaltung: TMenuItem;
    N9: TMenuItem;
    N10: TMenuItem;
    N11: TMenuItem;
    N12: TMenuItem;
    N13: TMenuItem;
    N14: TMenuItem;
    N15: TMenuItem;
    N16: TMenuItem;
    N18: TMenuItem;
    N17: TMenuItem;
    N19: TMenuItem;
    N20: TMenuItem;
    N21: TMenuItem;
    N22: TMenuItem;
    LYG_KB: TdxLayoutGroup;
    LYG_Zeichnungsnummer: TdxLayoutGroup;
    LYG_Warengruppe: TdxLayoutGroup;
    LYG_Rabattgruppe: TdxLayoutGroup;
    LYG_StatusSachmerkmal: TdxLayoutGroup;
    LYG_MEDispoStop: TdxLayoutGroup;
    LYG_PruefCharge: TdxLayoutGroup;
    LYG_FeinplanungPDM: TdxLayoutGroup;
    LYG_SLMiniSet: TdxLayoutGroup;
    LYG_Angelegt: TdxLayoutGroup;
    LYG_Geaendert: TdxLayoutGroup;
    LYG_BVNrBVST: TdxLayoutGroup;
    LYG_EM1: TdxLayoutGroup;
    LYG_EM2: TdxLayoutGroup;
    LYG_EM3: TdxLayoutGroup;
    LYG_Bestandeinheit: TdxLayoutGroup;
    LYG_Preiseinheit: TdxLayoutGroup;
    LYG_Ursprung: TdxLayoutGroup;
    LYG_Anteil: TdxLayoutGroup;
    LYG_Waehrung: TdxLayoutGroup;
    LYG_PreiseZusatz: TdxLayoutGroup;
    LYG_VK: TdxLayoutGroup;
    LYG_Zoll: TdxLayoutGroup;
    LYG_Fracht: TdxLayoutGroup;
    LYG_ChaotLager1: TdxLayoutGroup;
    LYG_Kategorie1: TdxLayoutGroup;
    LYG_Kategorie2: TdxLayoutGroup;
    LYG_Kategorie3: TdxLayoutGroup;
    LYG_Kategorie4: TdxLayoutGroup;
    LYG_Kategorie5: TdxLayoutGroup;
    LYG_Merkmal1: TdxLayoutGroup;
    LYG_Merkmal2: TdxLayoutGroup;
    LYG_Merkmal3: TdxLayoutGroup;
    LYG_KalkZusatz: TdxLayoutGroup;
    LYG_LieferantenTabelle: TdxLayoutGroup;
    GRD_LieferantDBTableView1: TcxGridDBTableView;
    GRD_LieferantLevel1: TcxGridLevel;
    GRD_Lieferant: TcxGrid;
    LYI_LieferantTabelle: TdxLayoutItem;
    GRD_LieferantDBTableView1ARTNR: TcxGridDBColumn;
    GRD_LieferantDBTableView1NUMMER: TcxGridDBColumn;
    GRD_LieferantDBTableView1KUNU: TcxGridDBColumn;
    GRD_LieferantDBTableView1BESTELL_NR: TcxGridDBColumn;
    GRD_LieferantDBTableView1WS: TcxGridDBColumn;
    GRD_LieferantDBTableView1RABATT: TcxGridDBColumn;
    GRD_LieferantDBTableView1WBZ: TcxGridDBColumn;
    GRD_LieferantDBTableView1PE: TcxGridDBColumn;
    GRD_LieferantDBTableView1RASTER: TcxGridDBColumn;
    GRD_LieferantDBTableView1STAFFEL_BP: TcxGridDBColumn;
    GRD_LieferantDBTableView1ZOLL_BP: TcxGridDBColumn;
    GRD_LieferantDBTableView1FRACHT_BP: TcxGridDBColumn;
    GRD_LieferantDBTableView1EK_1: TcxGridDBColumn;
    GRD_LieferantDBTableView1EK_2: TcxGridDBColumn;
    GRD_LieferantDBTableView1EK_3: TcxGridDBColumn;
    GRD_LieferantDBTableView1EK_4: TcxGridDBColumn;
    GRD_LieferantDBTableView1EK_5: TcxGridDBColumn;
    GRD_LieferantDBTableView1EK_6: TcxGridDBColumn;
    GRD_LieferantDBTableView1EK_7: TcxGridDBColumn;
    GRD_LieferantDBTableView1EK_8: TcxGridDBColumn;
    GRD_LieferantDBTableView1EK_9: TcxGridDBColumn;
    GRD_LieferantDBTableView1EK_10: TcxGridDBColumn;
    GRD_LieferantDBTableView1ZOLL: TcxGridDBColumn;
    GRD_LieferantDBTableView1FRACHT: TcxGridDBColumn;
    GRD_LieferantDBTableView1LE_PREIS_UPDATE: TcxGridDBColumn;
    GRD_LieferantDBTableView1LIEF_NAME: TcxGridDBColumn;
    GRD_LieferantDBTableView1MIAB: TcxGridDBColumn;
    GRD_LieferantDBTableView1BEM: TcxGridDBColumn;
    GRD_LieferantDBTableView1GESPERRT: TcxGridDBColumn;
    GRD_LieferantDBTableView1HYPERLINK: TcxGridDBColumn;
    PUM_Lieferanten: TcxGridPopupMenu;
    LYG_Sonderpreise: TdxLayoutGroup;
    GRD_SonderpreiseDBTableView1: TcxGridDBTableView;
    GRD_SonderpreiseLevel1: TcxGridLevel;
    GRD_Sonderpreise: TcxGrid;
    LYI_SonderpreiseTabelle: TdxLayoutItem;
    AQY_SoPreise: TADOQuery;
    AQY_SoPreiseKUNU: TIntegerField;
    AQY_SoPreiseNAME: TWideStringField;
    AQY_SoPreisePREIS: TBCDField;
    AQY_SoPreiseRABATT: TBCDField;
    AQY_SoPreiseWS: TSmallintField;
    AQY_SoPreiseSACHTEXT_1: TWideStringField;
    AQY_SoPreiseSACHTEXT_2: TWideStringField;
    AQY_SoPreiseDATUM: TDateTimeField;
    AQY_SoPreiseBIS_DATUM: TDateTimeField;
    AQY_SoPreiseRASTER: TSmallintField;
    AQY_SoPreisePREIS_2: TBCDField;
    AQY_SoPreisePREIS_3: TBCDField;
    AQY_SoPreisePREIS_4: TBCDField;
    AQY_SoPreisePREIS_5: TBCDField;
    AQY_SoPreisePREIS_6: TBCDField;
    AQY_SoPreisePREIS_7: TBCDField;
    AQY_SoPreisePREIS_8: TBCDField;
    AQY_SoPreisePREIS_9: TBCDField;
    AQY_SoPreisePREIS_10: TBCDField;
    DTS_SoPreise: TDataSource;
    GRD_SonderpreiseDBTableView1KUNU: TcxGridDBColumn;
    GRD_SonderpreiseDBTableView1NAME: TcxGridDBColumn;
    GRD_SonderpreiseDBTableView1PREIS: TcxGridDBColumn;
    GRD_SonderpreiseDBTableView1RABATT: TcxGridDBColumn;
    GRD_SonderpreiseDBTableView1WS: TcxGridDBColumn;
    GRD_SonderpreiseDBTableView1SACHTEXT_1: TcxGridDBColumn;
    GRD_SonderpreiseDBTableView1SACHTEXT_2: TcxGridDBColumn;
    GRD_SonderpreiseDBTableView1DATUM: TcxGridDBColumn;
    GRD_SonderpreiseDBTableView1BIS_DATUM: TcxGridDBColumn;
    GRD_SonderpreiseDBTableView1RASTER: TcxGridDBColumn;
    GRD_SonderpreiseDBTableView1PREIS_2: TcxGridDBColumn;
    GRD_SonderpreiseDBTableView1PREIS_3: TcxGridDBColumn;
    GRD_SonderpreiseDBTableView1PREIS_4: TcxGridDBColumn;
    GRD_SonderpreiseDBTableView1PREIS_5: TcxGridDBColumn;
    GRD_SonderpreiseDBTableView1PREIS_6: TcxGridDBColumn;
    GRD_SonderpreiseDBTableView1PREIS_7: TcxGridDBColumn;
    GRD_SonderpreiseDBTableView1PREIS_8: TcxGridDBColumn;
    GRD_SonderpreiseDBTableView1PREIS_9: TcxGridDBColumn;
    GRD_SonderpreiseDBTableView1PREIS_10: TcxGridDBColumn;
    LYG_LieferantStamm: TdxLayoutGroup;
    PUM_GRDMiniset: TcxGridPopupMenu;
    PUM_GRDLager: TcxGridPopupMenu;
    PUM_GRDChaotLager: TcxGridPopupMenu;
    PUM_GRDUmsaetze: TcxGridPopupMenu;
    EDT_Dummy: TSHBEdit;
    LYI_EmptySpace1: TdxLayoutEmptySpaceItem;
    LYI_EmptySpace2: TdxLayoutEmptySpaceItem;
    LYI_EmptySpace3: TdxLayoutEmptySpaceItem;
    LYI_EmptySpace4: TdxLayoutEmptySpaceItem;
    LYI_EmptySpace5: TdxLayoutEmptySpaceItem;
    LYI_Trenner2: TdxLayoutSeparatorItem;
    LYG_Code: TdxLayoutGroup;
    LYG_DKZuCF: TdxLayoutGroup;
    LYG_Packmittel: TdxLayoutGroup;
    LYG_PM1: TdxLayoutGroup;
    LYG_PM2: TdxLayoutGroup;
    LYG_Diverses1: TdxLayoutGroup;
    LYG_Unbenutzt1: TdxLayoutGroup;
    LYG_Unbenutzt2: TdxLayoutGroup;
    LYG_Unbenutzt3: TdxLayoutGroup;
    LYG_Ersatztype: TdxLayoutGroup;
    LYG_PESL: TdxLayoutGroup;
    LYG_RasterMiniSet: TdxLayoutGroup;
    LYG_MasseInMMuFA: TdxLayoutGroup;
    LYG_Intrastat2: TdxLayoutGroup;
    LYG_Intrastat1: TdxLayoutGroup;
    LYG_PreiseSPUmsaetze: TdxLayoutGroup;
    LYG_Unbenutzt4: TdxLayoutGroup;
    LYG_Unbenutzt5: TdxLayoutGroup;
    BTN_GetFromClipboardKlein: TdxBarButton;
    BTN_SaveLayoutCaptions: TdxBarLargeButton;
    BTN_InfoDummyNurInfoblatt: TdxBarLargeButton;
    BTN_InfoDummyNurWH: TdxBarLargeButton;
    BTN_InfoDummyBeideBadges: TdxBarLargeButton;
    BTN_InfoDummyOhneBadges: TdxBarLargeButton;
    PUM_Miniset: TPopupMenu;
    MNI_MiniSetEdit: TMenuItem;
    MNI_MiniSetInsert: TMenuItem;
    MNI_MiniSetDelete: TMenuItem;
    MNI_MiniSetNumerieren: TMenuItem;
    MNI_MiniSetLagerInfo: TMenuItem;
    MNI_4: TMenuItem;
    MNI_MiniSetCancel: TMenuItem;
    MNI_MiniSetSave: TMenuItem;
    BTN_DrDocArchiv: TdxBarLargeButton;
    DLGO_FileOpenDialog: TFileOpenDialog;
    N23: TMenuItem;
    MNI_LiefEdit2: TMenuItem;
    MNI_LiefInsert2: TMenuItem;
    MNI_LiefDelete2: TMenuItem;
    N24: TMenuItem;
    MNI_LiefCancel2: TMenuItem;
    MNI_LiefSave2: TMenuItem;
    BTN_InfoDummyNurWichtigeHinweiseBlau: TdxBarLargeButton;
    BTN_InfoDummyBeideWHBlau: TdxBarLargeButton;
    BTN_DokumenteDummyNurZusatztexte: TdxBarLargeButton;
    BTN_DokumenteDummyNurZusatzdokumente: TdxBarLargeButton;
    BTN_DokumenteDummyBeideBadges: TdxBarLargeButton;
    BTN_DokumenteDummyOhneBadges: TdxBarLargeButton;
    MNI_WichtigeHinweise: TMenuItem;
    MNI_Kontrakte: TMenuItem;
    BTN_ToggleMouseOverDropDown: TdxBarLargeButton;
    BTN_ToggleTabname: TdxBarLargeButton;
    BTN_SucheNachLiefBestellNr: TdxBarLargeButton;
    IML_BadgeIconsBar: TcxImageList;
    BTN_NeuMaske: TdxBarButton;
    BTN_NeueStueckliste: TdxBarLargeButton;
    ACT_MakeSL: TAction;
    PUM_GRDSonderpreise: TcxGridPopupMenu;
    BTN_LoadNBListe: TdxBarLargeButton;
    AQY_GetXRef: TADOQuery;
    AQY_GetXRefCOUNTXREF: TIntegerField;
    BTN_SelNavSL: TdxBarLargeButton;
    BTN_SelNavAuftragMitSL: TdxBarLargeButton;
    BTN_SelNavAP: TdxBarLargeButton;
    BTN_ToggleXRef: TdxBarLargeButton;
    BTN_ArtikelToBestellpool: TdxBarLargeButton;
    BTN_MassenAnfrageBPool: TdxBarLargeButton;
    MNI_Zuschlagsarten: TMenuItem;
    AQY_ArtikelStammHIDE_BESTAND: TWideStringField;
    EDT_HideBestand: TSHBDBEdit;
    LYI_HideBestand: TdxLayoutItem;
    dxLayoutAutoCreatedGroup1: TdxLayoutAutoCreatedGroup;
    EDT_ZuschlagArt1: TSHBDBIntEdit;
    LYI_Zuschlag1Art: TdxLayoutItem;
    EDT_Zuschlag1Proz: TSHBDBNumEdit;
    LYI_Zuschlag1Proz: TdxLayoutItem;
    EDT_ZuschlagArt2: TSHBDBIntEdit;
    LYI_Zuschlag2Art: TdxLayoutItem;
    EDT_Zuschlag2Proz: TSHBDBNumEdit;
    LYI_Zuschlag2Proz: TdxLayoutItem;
    EDT_ZuschlagRabattiert: TSHBDBEdit;
    LYI_ZuschlagRabattiert: TdxLayoutItem;
    AQY_LieferantZUSCHLAGSART1: TSmallintField;
    AQY_LieferantZUSCHLAG1: TBCDField;
    AQY_LieferantZUSCHLAGSART2: TSmallintField;
    AQY_LieferantZUSCHLAG2: TBCDField;
    AQY_LieferantRABATTIERT: TWideStringField;
    LYG_ZuschlaegeArten: TdxLayoutGroup;
    LYG_ZuschlaegeProz: TdxLayoutGroup;
    LYG_Zuschlaege: TdxLayoutGroup;
    LYG_LiefZuschlaege: TdxLayoutGroup;
    EDT_ZuschlagArt3: TSHBDBIntEdit;
    LYI_Zuschlag3Art: TdxLayoutItem;
    EDT_Zuschlag3Proz: TSHBDBNumEdit;
    LYI_Zuschlag3Proz: TdxLayoutItem;
    AQY_LieferantZUSCHLAGSART3: TSmallintField;
    AQY_LieferantZUSCHLAG3: TBCDField;
    GRD_LieferantDBTableView1ZUSCHLAGSART1: TcxGridDBColumn;
    GRD_LieferantDBTableView1ZUSCHLAG1: TcxGridDBColumn;
    GRD_LieferantDBTableView1ZUSCHLAGSART2: TcxGridDBColumn;
    GRD_LieferantDBTableView1ZUSCHLAG2: TcxGridDBColumn;
    GRD_LieferantDBTableView1ZUSCHLAGSART3: TcxGridDBColumn;
    GRD_LieferantDBTableView1ZUSCHLAG3: TcxGridDBColumn;
    GRD_LieferantDBTableView1RABATTIERT: TcxGridDBColumn;
    BTN_NeuSchnellanlage: TdxBarLargeButton;
    BTN_RKMViewer: TdxBarLargeButton;
    N7: TMenuItem;
    MNI_ErfassenMaske: TMenuItem;
    BTN_NettobedarfspoolAlle: TdxBarLargeButton;
    MNI_TexteUebersetzenDeepL: TMenuItem;

    procedure DTS_ArtikelStammDataChange(Sender: TObject; Field: TField);
    procedure EDT_ArtNrEnter(Sender: TObject);
    procedure EDT_ArtNrExit(Sender: TObject);
    procedure EDT_ArtNrKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure FormCreate(Sender: TObject);
    procedure AQY_ArtikelStammAfterScroll(DataSet: TDataSet);
    procedure EDT_PreiseWSChange(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure EDT_B_BasisChange(Sender: TObject);
    procedure EDT_ArtNrLookupClick(Sender: TObject);
    procedure EDT_KBLookupClick(Sender: TObject);
    procedure EDT_BNLookupClick(Sender: TObject);
    procedure EDT_ZNLookupClick(Sender: TObject);
    procedure EDT_BEZ_1LookupClick(Sender: TObject);
    procedure EDT_KBKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure AQY_UmsatzCalcFields(DataSet: TDataSet);
    procedure EDT_KBExit(Sender: TObject);
    procedure EDT_KBEnter(Sender: TObject);
    procedure EDT_KBChange(Sender: TObject);
    procedure EDT_BNExit(Sender: TObject);
    procedure EDT_ZNExit(Sender: TObject);
    procedure EDT_BEZ_1Exit(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure AQY_ArtikelStammAfterInsert(DataSet: TDataSet);
    procedure BTN_AllgNeuKopierenClick(Sender: TObject);
    procedure AQY_ArtikelStammBeforePost(DataSet: TDataSet);
    procedure SBT_PflegeBlobClick(Sender: TObject);
    procedure SBT_PreiseEditClick(Sender: TObject);
    procedure SBT_PreiseCancelClick(Sender: TObject);
    procedure SBT_PreiseSaveClick(Sender: TObject);
    procedure SBT_PreiseInsertClick(Sender: TObject);
    procedure AQY_PreiseBeforePost(DataSet: TDataSet);
    procedure SBT_PreiseDeleteClick(Sender: TObject);
    procedure DTS_PreiseStateChange(Sender: TObject);
    procedure AQY_PreiseAfterScroll(DataSet: TDataSet);
    procedure AQY_PreisePostError(DataSet: TDataSet; E: EDatabaseError; var Action: TDataAction);
    procedure DTS_LieferantStateChange(Sender: TObject);
    procedure SBT_LiefEditClick(Sender: TObject);
    procedure SBT_LiefCancelClick(Sender: TObject);
    procedure SBT_LiefSaveClick(Sender: TObject);
    procedure SBT_LiefDeleteClick(Sender: TObject);
    procedure SBT_LiefInsertClick(Sender: TObject);
    procedure EDT_LiefZOLL_BPValidate(var Text: String; var Continue: Boolean);
    procedure EDT_LiefPEValidate(var Text: String; var Continue: Boolean);
    procedure AQY_LieferantAfterScroll(DataSet: TDataSet);
    procedure AQY_LieferantPostError(DataSet: TDataSet; E: EDatabaseError;var Action: TDataAction);
    procedure EDT_LiefKuNuExit(Sender: TObject);
    procedure EDT_LiefKuNuLookupClick(Sender: TObject);
    procedure MNI_EditClick(Sender: TObject);
    procedure MNI_DauerEditClick(Sender: TObject);
    procedure MNI_ErfassenClick(Sender: TObject);
    procedure AQY_LieferantBeforePost(DataSet: TDataSet);
    procedure RCC_ArtikelGetFieldData(Sender: TObject; Field: TBufferedField);
    procedure RCC_PreiseGetFieldData(Sender: TObject; Field: TBufferedField);
    procedure RCC_LieferantGetFieldData(Sender: TObject; Field: TBufferedField);
    procedure MNI_RecordCopyClick(Sender: TObject);
    procedure EDT_EM1_MethodeValidate(var Text: String; var Continue: Boolean);
    procedure EDT_EMJNValidate(var Text: String; var Continue: Boolean);
    procedure SBT_MiniSetEditClick(Sender: TObject);
    procedure SBT_MiniSetInsertClick(Sender: TObject);
    procedure SBT_MiniSetDeleteClick(Sender: TObject);
    procedure SBT_MiniSetCancelClick(Sender: TObject);
    procedure SBT_MiniSetSaveClick(Sender: TObject);
    procedure DTS_MiniSetStateChange(Sender: TObject);
    procedure AQY_MiniSetAfterScroll(DataSet: TDataSet);
    procedure AQY_MiniSetBeforePost(DataSet: TDataSet);
    procedure AQY_MiniSetPostError(DataSet: TDataSet; E: EDatabaseError; var Action: TDataAction);
    procedure FormKeyPress(Sender: TObject; var Key: Char);
    procedure SBT_LagerEditClick(Sender: TObject);
    procedure SBT_LagerInsertClick(Sender: TObject);
    procedure SBT_LagerDeleteClick(Sender: TObject);
    procedure SBT_LagerCancelClick(Sender: TObject);
    procedure SBT_LagerSaveClick(Sender: TObject);
    procedure AQY_LagerAfterScroll(DataSet: TDataSet);
    procedure AQY_LagerBeforePost(DataSet: TDataSet);
    procedure AQY_LagerPostError(DataSet: TDataSet; E: EDatabaseError; var Action: TDataAction);
    procedure DTS_LagerStateChange(Sender: TObject);
    procedure AQY_LagerAfterInsert(DataSet: TDataSet);
    procedure EDT_LiefKuNuKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure AQY_ArtikelStammAfterEdit(DataSet: TDataSet);
    procedure SBT_MiniSetNumerierenClick(Sender: TObject);
    procedure PCT_TexteBestandExit(Sender: TObject);
    procedure PCT_BewegungExit(Sender: TObject);
    procedure AQY_PreiseAfterPost(DataSet: TDataSet);
    procedure AQY_LieferantAfterPost(DataSet: TDataSet);
    procedure AQY_LagerAfterPost(DataSet: TDataSet);
    procedure AQY_MiniSetAfterPost(DataSet: TDataSet);
    procedure EDT_WGLookupClick(Sender: TObject);
    procedure EDT_RGLookupClick(Sender: TObject);
    procedure MNI_WGClick(Sender: TObject);
    procedure MNI_RGClick(Sender: TObject);
    procedure MNI_StatusClick(Sender: TObject);
    procedure EDT_StatusLookupClick(Sender: TObject);
    procedure EDT_USLookupClick(Sender: TObject);
    procedure EDT_PE_VKLookupClick(Sender: TObject);
    procedure EDT_MELookupClick(Sender: TObject);
    procedure EDT_LiefPELookupClick(Sender: TObject);
    procedure EDT_RasterVKLookupClick(Sender: TObject);
    procedure EDT_RasterVKExit(Sender: TObject);
    procedure EDT_LiefRasterLookupClick(Sender: TObject);
    procedure EDT_C1LookupClick(Sender: TObject);
    procedure EDT_LiefWSLookupClick(Sender: TObject);
    procedure EDT_PreiseWSLookupClick(Sender: TObject);
    procedure MNI_EdelMetallClick(Sender: TObject);
    procedure EDT_EM1_NummerLookupClick(Sender: TObject);
    procedure MNI_ISKatalogClick(Sender: TObject);
    procedure MNI_ISULClick(Sender: TObject);
    procedure MNI_ISURClick(Sender: TObject);
    procedure MNI_ISVerfahrenClick(Sender: TObject);
    procedure MNI_ISVZClick(Sender: TObject);
    procedure MNI_ISGAClick(Sender: TObject);
    procedure MNI_ISHAClick(Sender: TObject);
    procedure EDT_WarennummerLookupClick(Sender: TObject);
    procedure EDT_UrsprungslandLookupClick(Sender: TObject);
    procedure EDT_UrsprungsregionLookupClick(Sender: TObject);
    procedure EDT_SachmerkmalLookupClick(Sender: TObject);
    procedure MNI_FelderManipulierenClick(Sender: TObject);
    procedure MNI_ISIEClick(Sender: TObject);
    procedure MNI_ISILClick(Sender: TObject);
    procedure MNI_PLTexteClick(Sender: TObject);
    procedure MNI_PflegenRasterClick(Sender: TObject);
    procedure SBT_PreisKalkClick(Sender: TObject);
    procedure SBT_ViewerClick(Sender: TObject);
    procedure MNI_SetViewListPathClick(Sender: TObject);
    procedure EDT_WGChange(Sender: TObject);
    procedure EDT_RGChange(Sender: TObject);
    procedure SBT_DispoAllClick(Sender: TObject);
    procedure MNI_PflegeAutoArtNrClick(Sender: TObject);
    procedure MNI_PflegeCFClick(Sender: TObject);
    procedure MNI_KontextHilfeClick(Sender: TObject);
    procedure EDT_PrlPosLookupClick(Sender: TObject);
    procedure AQY_ArtikelStammAfterPost(DataSet: TDataSet);
    procedure AQY_PreiseFilterRecord(DataSet: TDataSet; var Accept: Boolean);
    procedure AQY_ArtikelStammPostError(DataSet: TDataSet; E: EDatabaseError; var Action: TDataAction);
    procedure EDT_EMJNLookupClick(Sender: TObject);
    procedure EDT_EM1_MethodeLookupClick(Sender: TObject);
    procedure EDT_LiefZOLL_BPLookupClick(Sender: TObject);
    procedure EDT_LiefStaffelBPLookupClick(Sender: TObject);
    procedure AQY_LieferantAfterOpen(DataSet: TDataSet);
    procedure MNI_LookUpClick(Sender: TObject);
    procedure MNI_CallRecentListClick(Sender: TObject);
    procedure MNI_DeleteRecentClick(Sender: TObject);
    procedure MNI_AddRecentClick(Sender: TObject);
    procedure AQY_LagerCalcFields(DataSet: TDataSet);
    procedure MNI_PflegeLagerNameClick(Sender: TObject);
    procedure AQY_SumBestandAfterScroll(DataSet: TDataSet);
    procedure ACT_MakeAUExecute(Sender: TObject);
    procedure ACT_MakeAFExecute(Sender: TObject);
    procedure ACT_MakeBEExecute(Sender: TObject);
    procedure ACT_MakeAGExecute(Sender: TObject);
    procedure ACT_MakeFEExecute(Sender: TObject);
    procedure MNI_MiniSetLagerInfoClick(Sender: TObject);
    procedure MNI_StdWerteClick(Sender: TObject);
    procedure MNI_SaveSelectClick(Sender: TObject);
    procedure MNI_LoadSelectClick(Sender: TObject);
    procedure MNI_DeleteSetClick(Sender: TObject);
    procedure SBT_ViewerMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure MNI_BuKzClick(Sender: TObject);
    procedure MNI_LastArtNrClick(Sender: TObject);
    procedure MNI_CutTextToClipboardClick(Sender: TObject);
    procedure MNI_ChangeToLief1Click(Sender: TObject);
    procedure FormResize(Sender: TObject);
    procedure AQY_MiniSetAfterInsert(DataSet: TDataSet);
    procedure MNI_FliessTextClick(Sender: TObject);
    procedure ACT_MakeAPExecute(Sender: TObject);
    procedure CBX_BildStretchClick(Sender: TObject);
    procedure ACT_MakeAUManyClick(Sender: TObject);
    procedure MNI_SichtenFehlmengenClick(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure MNI_BereinigungslaufClick(Sender: TObject);
    procedure EDT_DispoStopLookupClick(Sender: TObject);
    procedure EDT_KalkKZLookupClick(Sender: TObject);
    procedure EDT_KalkKZValidate(var Text: String; var Continue: Boolean);
    procedure MNI_MegamatArtikelExportClick(Sender: TObject);
    procedure MNI_LoadSLExplorerClick(Sender: TObject);
    procedure EDT_LiefBestellNrLookupClick(Sender: TObject);
    procedure MNI_DrDocSichtenClick(Sender: TObject);
    procedure MNI_DrDocArchivierenClick(Sender: TObject);
    procedure SBT_FremdTextEditClick(Sender: TObject);
    procedure SBT_FremdTextSaveClick(Sender: TObject);
    procedure SBT_FremdTextCancelClick(Sender: TObject);
    procedure SBT_FremdTextDeleteClick(Sender: TObject);
    procedure SBT_FremdTextInsertClick(Sender: TObject);
    procedure EDT_SpracheLookupClick(Sender: TObject);
    procedure EDT_SpracheChange(Sender: TObject);
    procedure DTS_FremdTexteDataChange(Sender: TObject; Field: TField);
    procedure DTS_FremdTexteStateChange(Sender: TObject);
    procedure AQY_FremdTexteAfterPost(DataSet: TDataSet);
    procedure EDT_AMM_Key1LookupClick(Sender: TObject);
    procedure MNI_AMMClick(Sender: TObject);
    procedure EDT_AMM_Inhalt_Key1LookupClick(Sender: TObject);
    procedure EDT_AMMPrintLookupClick(Sender: TObject);
    procedure EDT_AMM_Key1Exit(Sender: TObject);
    procedure EDT_AMMPrintValidate(var Text: string; var Continue: Boolean);
    procedure MNI_TranslateClick(Sender: TObject);
    procedure MNI_ArtikelTabClick(Sender: TObject);
    procedure EDT_B_BasisLookupClick(Sender: TObject);
    procedure AQY_FremdTexteBeforePost(DataSet: TDataSet);
    procedure MNI_NeueAufgabeClick(Sender: TObject);
    procedure MNI_FremdFliessTextClick(Sender: TObject);
    procedure MNI_FCPOutputClick(Sender: TObject);
    procedure AQY_DVKalkAfterPost(DataSet: TDataSet);
    procedure SBT_DVKalkEditClick(Sender: TObject);
    procedure SBT_DVKalkInsertClick(Sender: TObject);
    procedure SBT_DVKalkDeleteClick(Sender: TObject);
    procedure SBT_DVKalkCancelClick(Sender: TObject);
    procedure SBT_DVKalkSaveClick(Sender: TObject);
    procedure EDT_PackmittelLookupClick(Sender: TObject);
    procedure EDT_PackmittelVarianteLookupClick(Sender: TObject);
    procedure EDT_KALKKZ_VKValidate(var Text: string; var Continue: Boolean);
    procedure EDT_KALKKZ_VKLookupClick(Sender: TObject);
    procedure BTN_LoadArtikelArchivClick(Sender: TObject);
    procedure MNI_ArtikelPreisArchivClick(Sender: TObject);
    procedure AQY_DVKalkBeforePost(DataSet: TDataSet);
    procedure MNI_WGKontenClick(Sender: TObject);
    procedure MNI_InsertBPoolClick(Sender: TObject);
    procedure MNI_KalkVKClick(Sender: TObject);
    procedure MNI_KalkEKClick(Sender: TObject);
    procedure MNI_PackmittelClick(Sender: TObject);
    procedure MNI_PackmittelKundeClick(Sender: TObject);
    procedure MNI_NeuerKontraktClick(Sender: TObject);
    procedure SBT_DVKalkMaskeClick(Sender: TObject);
    procedure MNI_ChargeInsertClick(Sender: TObject);
    procedure MNI_ChargerecherchierenClick(Sender: TObject);
    procedure MNI_MassenAnfrageInsertBPoolClick(Sender: TObject);
    procedure CBX_LiefGesperrtClick(Sender: TObject);
    procedure DTS_DVKalkDataChange(Sender: TObject; Field: TField);
    procedure DTS_DVKalkStateChange(Sender: TObject);
    procedure EDT_AlternateArtNr3LookupClick(Sender: TObject);
    procedure EDT_AlternateArtNr3Exit(Sender: TObject);
    procedure MNI_ShowChargenlagerClick(Sender: TObject);
    procedure MNI_OpenZeichDatenClick(Sender: TObject);
    procedure AQY_DVKalkCalcFields(DataSet: TDataSet);
    procedure BIOSSelectionFired(Sender: TObject);
    procedure EDT_BEZ_1Enter(Sender: TObject);
    procedure EDT_BNEnter(Sender: TObject);
    procedure EDT_ZNEnter(Sender: TObject);
    procedure MNI_EnableBIOSSearchClick(Sender: TObject);
    procedure MNI_KundenSucheClick(Sender: TObject);
    procedure EDT_VorgabeLagerZuLookupClick(Sender: TObject);
    procedure EDT_AlternateArtNr1LookupClick(Sender: TObject);
    procedure EDT_VorgabeLagerZuExit(Sender: TObject);
    procedure FormDeactivate(Sender: TObject);
    procedure MNI_SiArchivClick(Sender: TObject);
    procedure EDT_LiefNummerEnter(Sender: TObject);
    procedure MNI_BIOSSearchParamsClick(Sender: TObject);
    procedure EDT_StatusExit(Sender: TObject);
    procedure EDT_ArtNrChange(Sender: TObject);
    procedure SBT_InternetLinkClick(Sender: TObject);
    procedure MNI_SichtenSonderPMClick(Sender: TObject);
    procedure EDT_AufschlagGruppeLookupClick(Sender: TObject);
    procedure MNI_SetUpLenArtNrClick(Sender: TObject);
    procedure MNI_VKStaffelEingebenClick(Sender: TObject);
    procedure SBT_InternetLinkMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    procedure PUM_RasterPopup(Sender: TObject);
    procedure PAN_LiefNameDblClick(Sender: TObject);
    procedure EDT_LiefStaffelBPValidate(var Text: string; var Continue: Boolean);
    procedure EDT_LiefStaffelBPChange(Sender: TObject);
    procedure EDT_LiefRasterChange(Sender: TObject);
    procedure AQY_LieferantBeforeEdit(DataSet: TDataSet);
    procedure EDT_PackmittelIsPMLookupClick(Sender: TObject);
    procedure MNI_DurchsucheRueckstaendeClick(Sender: TObject);
    procedure EDT_ZusatzTextSpracheChange(Sender: TObject);
    procedure AQY_CHLagerCalcFields(DataSet: TDataSet);
    procedure BTN_LoadIBClick(Sender: TObject);
    procedure BTN_LoadZusatzTexteClick(Sender: TObject);
    procedure BTN_LoadAUClick(Sender: TObject);
    procedure BTN_LoadSNClick(Sender: TObject);
    procedure BTN_LoadSMClick(Sender: TObject);
    procedure BTN_LoadNettobedarfClick(Sender: TObject);
    procedure BTN_LoadAKKClick(Sender: TObject);
    procedure BTN_LoadSonderpreiseClick(Sender: TObject);
    procedure BTN_LoadDruckEtikettClick(Sender: TObject);
    procedure BTN_LoadStrukturstuecklisteClick(Sender: TObject);
    procedure BTN_LoadXrefClick(Sender: TObject);
    procedure BTN_LoadSXClick(Sender: TObject);
    procedure BTN_LoadARClick(Sender: TObject);
    procedure BTN_LoadFEClick(Sender: TObject);
    procedure BTN_LoadFEArchivClick(Sender: TObject);
    procedure BTN_LoadVertraegeClick(Sender: TObject);
    procedure BTN_LoadROClick(Sender: TObject);
    procedure BTN_LoadDruckClick(Sender: TObject);
    procedure BTN_LoadInventurClick(Sender: TObject);
    procedure BTN_LoadBestandsKorrekturClick(Sender: TObject);
    procedure BTN_LoadPreisKalkulationClick(Sender: TObject);
    procedure BTN_LoadZusatzDokumenteClick(Sender: TObject);
    procedure BTN_LoadDocViewerClick(Sender: TObject);
    procedure BTN_LoadDrDocClick(Sender: TObject);
    procedure BTN_LoadKontrakteClick(Sender: TObject);
    procedure BTN_LoadNeBedarfPoolClick(Sender: TObject);
    procedure BTN_LoadKuSpezPackmittelClick(Sender: TObject);
    procedure BTN_WerkzeugEntnahmeClick(Sender: TObject);
    procedure BTN_LoadPackmittelStrukturClick(Sender: TObject);
    procedure BTN_LoadErwSucheLVClick(Sender: TObject);
    procedure BTN_LoadAuftragsrueckstaendeClick(Sender: TObject);
    procedure BTN_LoadFehlmengenClick(Sender: TObject);
    procedure BTN_LoadChaotLagerClick(Sender: TObject);
    procedure BTN_SucheSachnummerClick(Sender: TObject);
    procedure BTN_LoadWichtigeHinweiseClick(Sender: TObject);
    procedure GRD_MinisetViewUNTER_ARTNRPropertiesButtonClick(Sender: TObject;AButtonIndex: Integer);
    procedure BTN_BookmarkClick(Sender: TObject);
    procedure BTN_NavFirstClick(Sender: TObject);
    procedure BTN_NavRefreshClick(Sender: TObject);
    procedure BTN_AllgDauerEditClick(Sender: TObject);
    procedure BTN_AllgEditDauerEditClick(Sender: TObject);
    procedure BTN_AllgKopierenKleinClick(Sender: TObject);
    procedure BTN_AllgLoeschenClick(Sender: TObject);
    procedure BTN_LoadInfoCenterLagerClick(Sender: TObject);
    procedure BTN_MarkSmallClick(Sender: TObject);
    procedure BTN_LoadOutlookClick(Sender: TObject);
    procedure BTN_SelNavFirstClick(Sender: TObject);
    procedure BTN_SelNavPriorClick(Sender: TObject);
    procedure BTN_SelNavNextClick(Sender: TObject);
    procedure BTN_SelNavLastClick(Sender: TObject);
    procedure BTN_SelNavLoeschenClick(Sender: TObject);
    procedure BTN_SelNavStopClick(Sender: TObject);
    procedure RBT_PreiseAktuellClick(Sender: TObject);
    procedure LYI_ArtikelnummerCaptionClick(Sender: TObject);
    procedure BTN_SaveSHBLayoufileClick(Sender: TObject);
    procedure DTS_LieferantDataChange(Sender: TObject; Field: TField);
    procedure BTN_DBNavPostClick(Sender: TObject);
    procedure BTN_DBNavAbbrechenClick(Sender: TObject);
    procedure SBT_PreisePriorClick(Sender: TObject);
    procedure SBT_LieferantFirstClick(Sender: TObject);
    procedure SBT_FremdTexteFirstClick(Sender: TObject);
    procedure SBT_KalkFirstClick(Sender: TObject);
    procedure EDT_ViewerPfadLookupClick(Sender: TObject);
    procedure AQY_DVKalkAfterOpen(DataSet: TDataSet);
    procedure EDT_DVKalkNummerChange(Sender: TObject);
    procedure LYI_SummeDispoCaptionClick(Sender: TObject);
    procedure BTN_UseBadgesClick(Sender: TObject);
    procedure SBT_ZusatztextSpracheFirstClick(Sender: TObject);
    procedure BTN_MakeVorgaengeClick(Sender: TObject);
    procedure BTN_ArtikelZusatzInfosClick(Sender: TObject);
    procedure BTN_VorgaengeClick(Sender: TObject);
    procedure BTN_FertigungClick(Sender: TObject);
    procedure BTN_SeriennummernClick(Sender: TObject);
    procedure BTN_DispoClick(Sender: TObject);
    procedure BTN_StatistikenClick(Sender: TObject);
    procedure BTN_StuecklistenClick(Sender: TObject);
    procedure BTN_DokumenteClick(Sender: TObject);
    procedure BTN_ArchiveClick(Sender: TObject);
    procedure BTN_PackmittelverwaltungClick(Sender: TObject);
    procedure BTN_LoadPMAllgClick(Sender: TObject);
    procedure BTN_DruckenClick(Sender: TObject);
    procedure BTN_KundenspezifischClick(Sender: TObject);
    procedure BTN_LoadAPClick(Sender: TObject);
    procedure BTN_KalkulationClick(Sender: TObject);
    procedure AQY_SoPreisePREISGetText(Sender: TField; var Text: string;
      DisplayText: Boolean);
{
    procedure UIA_AdornerLVBadgeInfoblattClick(AManager: TdxUIAdornerManager;
      AAdorner: TdxCustomAdorner);
    procedure UIA_AdornerLVBadgeWichtigeHinweiseClick(
      AManager: TdxUIAdornerManager; AAdorner: TdxCustomAdorner);
}
    procedure GRD_MinisetViewKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure LYC_LagerverwaltungGetItemStoredProperties(
      Sender: TdxCustomLayoutControl; AItem: TdxCustomLayoutItem;
      AProperties: TStrings);
    procedure BTN_GetFromClipboardKleinClick(Sender: TObject);
    procedure BTN_SaveLayoutCaptionsClick(Sender: TObject);
    procedure GRD_UmsaetzeViewANZEIGEGetCellHint(Sender: TcxCustomGridTableItem;
      ARecord: TcxCustomGridRecord; ACellViewInfo: TcxGridTableDataCellViewInfo;
      const AMousePos: TPoint; var AHintText: TCaption;
      var AIsHintMultiLine: Boolean; var AHintTextRect: TRect);
    procedure GRD_MinisetViewUNTER_ARTNRPropertiesEditValueChanged(
      Sender: TObject);
    procedure GRD_LagerDBViewLAGERStylesGetContentStyle(
      Sender: TcxCustomGridTableView; ARecord: TcxCustomGridRecord;
      AItem: TcxCustomGridTableItem; var AStyle: TcxStyle);
    procedure GRD_LagerDBViewLAGERGetCellHint(Sender: TcxCustomGridTableItem;
      ARecord: TcxCustomGridRecord; ACellViewInfo: TcxGridTableDataCellViewInfo;
      const AMousePos: TPoint; var AHintText: TCaption;
      var AIsHintMultiLine: Boolean; var AHintTextRect: TRect);
    procedure GRD_MinisetViewUNTER_ARTNRPropertiesValidate(Sender: TObject;
      var DisplayValue: Variant; var ErrorText: TCaption; var Error: Boolean);
    procedure BTN_ToggleMouseOverDropDownClick(Sender: TObject);
    procedure BTN_ToggleTabnameClick(Sender: TObject);
    procedure BTN_NeuMaskeClick(Sender: TObject);
    procedure ACT_MakeSLExecute(Sender: TObject);
    procedure EDT_LiefStaffelBPExit(Sender: TObject);
    procedure EDT_LiefRasterExit(Sender: TObject);
    procedure EDT_ZNRevEnter(Sender: TObject);
    procedure BTN_SelNavSLClick(Sender: TObject);
    procedure BTN_ToggleXRefClick(Sender: TObject);
    procedure EDT_AMM_InhaltFrei4Exit(Sender: TObject);
    procedure EDT_AMM_InhaltFrei4LookupClick(Sender: TObject);
    procedure GRD_SonderpreiseDBTableView1PREISGetCellHint(
      Sender: TcxCustomGridTableItem; ARecord: TcxCustomGridRecord;
      ACellViewInfo: TcxGridTableDataCellViewInfo; const AMousePos: TPoint;
      var AHintText: TCaption; var AIsHintMultiLine: Boolean;
      var AHintTextRect: TRect);
    procedure EDT_HideBestandLookupClick(Sender: TObject);
    procedure GRD_LagerDBViewBESTANDGetDisplayText(
      Sender: TcxCustomGridTableItem; ARecord: TcxCustomGridRecord;
      var AText: string);
    procedure GRD_LagerDBViewLAGERPropertiesButtonClick(Sender: TObject;
      AButtonIndex: Integer);
    procedure MNI_ZuschlagsartenClick(Sender: TObject);
    procedure EDT_ZuschlagArt1LookupClick(Sender: TObject);
    procedure EDT_ZuschlagRabattiertValidate(var Text: string;
      var Continue: Boolean);
    procedure MNI_ArtikelArchivClick(Sender: TObject);
    procedure BTN_SelNav10BackClick(Sender: TObject);
    procedure BTN_SelNav10ForwardClick(Sender: TObject);
    procedure EDT_SelNavDatensatzVonPropertiesValidate(Sender: TObject;
      var DisplayValue: Variant; var ErrorText: TCaption; var Error: Boolean);
    procedure EDT_SelNavDatensatzVonPropertiesButtonClick(Sender: TObject;
      AButtonIndex: Integer);
    procedure EDT_SelNavDatensatzVonPropertiesEditValueChanged(Sender: TObject);
    procedure BTN_NeuSchnellanlageClick(Sender: TObject);
    procedure LYC_LagerverwaltungGetItemStoredPropertyValue(
      Sender: TdxCustomLayoutControl; AItem: TdxCustomLayoutItem;
      const AName: string; var AValue: Variant);
    procedure LYC_LagerverwaltungSetItemStoredPropertyValue(
      Sender: TdxCustomLayoutControl; AItem: TdxCustomLayoutItem;
      const AName: string; const AValue: Variant);
    procedure BTN_RKMViewerClick(Sender: TObject);
    procedure MNI_ErfassenMaskeClick(Sender: TObject);
    procedure PUM_ArtNrPopup(Sender: TObject);
    procedure EDT_PE_VKValidate(var Text: string; var Continue: Boolean);
    procedure BTN_NettobedarfspoolAlleClick(Sender: TObject);
    procedure BTN_SeriennummernkarteiClick(Sender: TObject);
    procedure MNI_TexteUebersetzenDeepLClick(Sender: TObject);
    procedure GRD_LagerDBViewBESTANDGetCellHint(Sender: TcxCustomGridTableItem;
      ARecord: TcxCustomGridRecord; ACellViewInfo: TcxGridTableDataCellViewInfo;
      const AMousePos: TPoint; var AHintText: TCaption;
      var AIsHintMultiLine: Boolean; var AHintTextRect: TRect);
    procedure AQY_LieferantBeforeDelete(DataSet: TDataSet);
    procedure AQY_FremdTexteBeforeDelete(DataSet: TDataSet);
    procedure AQY_MiniSetBeforeDelete(DataSet: TDataSet);
    procedure AQY_PreiseBeforeDelete(DataSet: TDataSet);
    procedure AQY_DVKalkBeforeDelete(DataSet: TDataSet);

  private
    FirstSw       : boolean;
    ReNumFlag,
    CopyFlag,
    Strg_I_Flag,
    db,
    ek,
    vk,
    um            : boolean;
    BookArtNr,
    CurrArtNr     : string;
    MEOF,
    MBOF          : boolean;

    SMText        : string;
    fData         : string;
    KeyList       : TSHBDynamicArray;
    CloseFlag     : Boolean;

    ArtNrEntryZwang,
    NeuEingabeAktiv,
    PushKBFlag,
    SaveKeyNaviVisible,
    KB_Suche,
    DTS_Open      : boolean;
    BookMrk       : TBookMark;
    SortOrder     : TLVSort;
    KeyIndex      : integer;

    LastErfassenSemaphore : string;
    SaveKB                : string;

    AktuelleMaske         : string;
    AktuellFuellKZ        : Char;
    AktuellLieferant      : integer;

    CopyFromArtNr,
    XArtNr,
    LastArtNr             : string;
    LastRaster            : integer;
    MRaster : array[2..10] of integer;

    NavClicked,
    ReadFWFlag            : boolean;
    ModalCallActive       : Boolean;
    OutDevice             : TOutputDev;
    LastHinweisArtNr      : string;

    RecentList            : array [0..19] of TRecentLAListItem;

    MasterIniValue        : Char;

    STD_US                : integer;
    STD_ME                : string;
    STD_DK1               : integer;
    STD_DK2               : integer;
    STD_DK3               : integer;
    STD_DK4               : integer;
    STD_DK5               : integer;
    STD_Raster            : integer;
    STD_KALK_KZ           : string;
    STD_KALK_KZVK         : string;
    //** 11.2
    STD_MASSE_SIND_MM     : string;
    STD_MASSE_FUER_FA     : string;

    ReSizeRunning         : boolean;

    ExternArtNrNeuList    : TStringList;
    OldEK1,
    OldEK2,
    OldEK3,
    OldEK4,
    OldEK5,
    OldEK6,
    OldEK7,
    OldEK8,
    OldEK9,
    OldEK10,
    OldRabatt             : Currency;
    OldLePreisUpdateVK,
    OldLePreisUpdate      : TDateTime;

    OldVK1,
    OldVK2,
    OldVK3,
    OldVK4,
    OldVK5,
    OldVK6,
    OldVK7,
    OldVK8,
    OldVK9,
    OldVK10               : Currency;

    DispoAktuellSw        : boolean;

    CopyVK,
    CopyEK,
    CopyEM,
    CopyMA,
    CopyIS,
    CopyME,
    CopyIB,
    CopyWH,
    CopyZusatzTexte,
    CopyMiniset,
    CopySL,
    CopyAP,
    CopyZusatz,
    CopyNichtFragen           : boolean;

    //** Für Yamaichi Mandantenabgleich
    {06.11.2019 SM
    YamaichiArtNr          : string;
    YamaichiAntwort        : integer;   }
    //** Famec: ArtikelStammabgleich (M01,M02)
    FamecArtNr   : string;
    FamecAntwort : integer;

    ChargeInsert : boolean; //** 27.11.2013
    PreisChangedFlag : boolean;
    PreisChangedReason : string;

    //** Archivierung bei Änderung LfdLiefNummer
    OldLfdNummer,
    NewLfdNummer : integer;
    ChangeLfdLiefNummer : boolean;

    //** Quick Search
    QuickSearchMaxRecords : integer;

    //**Yamaichi Änderung: *27.03.2015 *PB
    YamaichiSaveStatus : integer;

    //** Aktive Reiter (angeheftet)
    ActivePageTexteBestandStr,
    ActivePageBewegungenStr  : string;

    //** 11.1
    WarnLengthArtNr,
    MaxCharArtNr              : integer;

    BigEKScreenActive         : boolean;

    //ShowBadges : boolean;
    KundenSpezifischeButtons : boolean;

    FormFaktorString  : string;
    SelectionFeuert   : boolean;
    ShowWH : boolean;

    //** XRef im Hintergrund
    DoXRefSelect : boolean;

    //** Schnellanlage Layouts 12.1
    SaveLayoutID : integer;
    IsSchnellAnlage : boolean;
    MAnlageLayouts: TDynamicLayoutSchnellAnlageArray;
    MAnlageLayoutsVarDLG : TDynamicLayoutVarDlgArray;
    FAnzMussFelderMuessenNoch : integer;
    SALinkList : TStringList;

    procedure CMDialogChar(var Message: TCMDialogChar); message CM_DIALOGCHAR;
    procedure HandleOwnActivate (var Msg : TWMNoParams); message OWN_ActivateCommand;
    procedure SetUpLVControls;
    procedure CheckAndInstallSammelArtikel;
    procedure InitQueriesAndDBs;
    procedure InitQuersprungleiste;
    procedure OpenDataSources;
    procedure CloseDataSources;
    procedure SetzeKey;
    procedure MoveToKey;
    procedure UpdateNavi;
    procedure CheckIB;
    procedure ReadSachMerkmal;
    function SearchKeyList(const AArtNr : string) : integer;
    procedure CallSchluesselPflege(AArt : string);

    procedure UpdatePBTexte;
    function ReadRaster (ARaster : integer; AUpdateVKScreen : boolean;
                        AIsLieferant, AUpdateEKScreen : boolean) : boolean;
    procedure UpdateRaster(AVK : boolean);
    procedure UpdateButtons;
    procedure UpdatePreiseButtons;
    procedure UpdateLiefButtons;
    procedure UpdateFremdTexteButtons;
    procedure UpdateDVKalkButtons;
    procedure UpdateMiniSetButtons;
    procedure UpdateLagerButtons;
    procedure ReadLieferantName;
    procedure CheckNebenTabellen(AAuchMaster: boolean);
    procedure UpdateDavosBez;

    function ErmittlePreisArtKey : string;

    procedure ResetLagerColors;
    procedure SetLagerEditColors;

    procedure CloseInsertSemaphore;
    function CheckStammLoeschenOK(AArtNr : string): boolean;
    function DeleteAllArtikelData(AArtNr : string): boolean;
    procedure InitStammFelder;
    procedure CopyPreiseLiefMiniSet;
    procedure CopyStueckliste;
    procedure CopyArbeitsplan;
    procedure PostStammAenderung(AMiniSetFlag : boolean);

    function GetSetViewerPath(var APfad : string; ASetFlag : boolean; var AFeld : string) : boolean;
    function GetVariantenNummer(const AArtNr : string; ASilentMode : boolean) : integer;
    function GetRevNummer(const AArtNr : string; ASilentMode : boolean) : string;

    procedure ReadAllData;
    procedure SetAbbButtonVisible(const AVisible : boolean);
    function ReadWriteRecent(AWrite, AReset : boolean): boolean;
    procedure BereinigeRecentList;
    procedure RecentListQuickSort(pLow,pHigh:Integer; Asc:Boolean);
    function UpdateRecentList : boolean;
    function MakeAUBEAGAF(const AArt : Char) : boolean;
    function GetStdErfassenWerte : boolean;
    function SetStdErfassenWerte : boolean;
    function GetNewStdSetNummer(const AStation : integer) : integer;
    function GetArtNrUndBez(const AString : string;
                            var AArtNr : string;
                            var AArtBez : string;
                            var AArtBez2 : string;
                            var AZN : string): boolean;
    function GetNextArtNrBrendle (AArtNummer : string) : string;
    function ArtikelinM02Yamaichi : boolean;
    function ArtikelinM03Yamaichi : boolean;  //** 08.01.2024 PI
    function ArtikelinM02Famec : boolean;
    function ArtikelinM02Plaschka : boolean;  //** 22.02.2017 SM
    function ArtikelinM04Klotz : boolean; //** 17.06.2024
    function CheckIfM04ExistsKlotz : boolean;

    procedure CallNextArtNrMaske;
    procedure CheckHinweise(const AShow : boolean);

    function CopySTDAP (const AArtNr : string) : boolean;

    procedure UebersteuerungHoehne;
    procedure VorbelegungBezMentec;
    procedure ReadAllAMMData;
    procedure ReadVorgabeLagerNamen;

    function UpdatePackmittel(const APMNr : string; const AArtNr : string) : boolean;  //** 02.2013
    procedure CheckAndSetNavigatorList;
    function VerifyURL(const AAdresse: string): boolean;

    //** FremdKalk
    function ReadBezForFremdKalk(const ABigScreen : boolean; const AKz : string): boolean;

    procedure UpdateAenderungsdatum (const AArtNr : string);
    procedure FillUmsatzMemTable;

    procedure ArtikelStammBeforeEditSaveCancel(Sender: TObject);
    procedure SHBSaveDesignLayoutIniFile;
    procedure FillImageCollection;
    procedure SetNebenTabellenEditOrCancel(const AEdit: boolean);
    procedure SetOptionUseBadges(const AActive : boolean; const ASave : boolean = true);
    procedure SaveUseBadges;
    procedure LoadAndSetUseBadges;
    procedure SetHintsAndBadge;
    function BuildGetLampsSelect : string;
    function BuildGetBadgesSelect : string;
    procedure SetHintsArtikelInfos;
    procedure OpenSoPreise(const AArtNr : string);

    procedure UpdateLieferantenCount;
    function AskSelektionVerwerfen : TModalResult;
    procedure SetInfoButtonGlyphs;
    procedure SetDokumenteButtonGlyphs;
    procedure CheckZusatzInfosZusatzDokumente(const ArtNr: string; ARefresh: boolean);
    procedure UpdateArtikelGesperrtLabel;

    //** Quersprünge per MouseOver öffnen
    procedure ToggleOpenQuerspruengeAutomatisch;
    procedure DoBarMouseMoveDropDown(Sender: TObject; Shift: TShiftState; X, Y: Integer);
    procedure LoadSaveAndSetOpenQuersrpuengeAutomatisch(const ASave : boolean);
    procedure LoadAndSaveTabname(const ASave : boolean);

    procedure SetVorgaengeButtonGlyphs(const AAnzAUAG,AAnzBEAF : integer);
    procedure SetFertigungButtonGlyphs(const AAnzFE, AnzAP : integer);
    procedure SetDispositionButtonGlyphs(const AAnzAR, AnzFM : integer);
    procedure SetStuecklistenButtonGylphs(const AHatSL : boolean);

    //** Tab-Überschrift
    procedure CheckAndSetTabCaption;
    //** XRef im Hintergrund
    function BuildGetXRefSelect : string;
    procedure ToggleXRefSelect;
    procedure LoadSaveAndSetXRefSelect(const ASave : boolean);

    function CheckFibuKonto (const AText : string) : integer;
    procedure ChangeBiogartenCaptions;
    //** 12.1
    procedure SetAllHideBestandEdits;
    procedure GetZuschlaegeHints;

    function CheckBeforePEChange: boolean;
    function CheckDemo: boolean;

  protected
    procedure CreateWnd; override; // eigene CreateWindow Prozedur

  public
    Erfassen,
    ErfassenMaske,
    DauerAendern,
    Aendern      : boolean;
    FFirstSchnellAnlage : boolean;
    FSchnellanlageLayoutName : string;

    Constructor CreateWithHandle (AOwner : TComponent;
                                  AHandle : THandle;
                                  AType : Word;
                                  AIniValue : Char); override;

    function PosMain(const AArtNr    : string;
                     const AString   : string;
                     const ARichtung : TMainPos;
                     const AExcact   : boolean)
                     : boolean;
    function LoadFromExternalList : boolean;

  end; //** TFRM_DobosLV = class(TFRM_ppppppuu)

var
   xBuffer: PAnsiChar;

(******************************************************************************)
(***  Implementation-Teil                                                   ***)
(******************************************************************************)

implementation

{$R *.DFM}

uses
    LVFelderManipulieren, UPLVEditFliessText, UPWerkzeugentnahme,
    PrintLVAK, UPLvStdWerte, UPLVSLParameter, UPCopyArtikelAuswahl, UPArtikelbereinigung,
    UPArtikelAsTabelle, UPInputZweiZahlen,
    DavosUtils;//, UPLayoutCustomize;

const
     tgVK = 98;
     tgEK = 97;
     tgUM = 96;
     tgDB = 95;

(******************************************************************************)
(***  Eigene CreateWindow-Proc                                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.CreateWnd;

begin

if Tag <> tgDummy then
   FormStyle := fsMDIChild;   //** Style sofort auf MDIChild Setzen, damit nicht 2*Create läuft (durch Style-Änderung)

inherited CreateWnd;          //** Dann die originale CreateWnd Prozedur aufrufen
//** Trick um erzeugtes Formular nach MDI-Erzeugung zu verstecken
//** wg. DevExpress bleibt Formularrahmen relativ lange sichtbar
//** kleines Aufblitzen bleibt aber
Self.Top := -12345;
end; //** procedure CreateWnd


(******************************************************************************)
(***      ChangeBiogartenCaptions                                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.ChangeBiogartenCaptions;
begin

if ((IsBiogarten) or (IsArche)) then
   begin
        //LYI_SpezGewicht.Parent := LYG_Diverse;
        //LYI_SpezGewicht.Parent := LYG_Ersatztype;
        //LYI_SpezGewicht.Index := LYI_EANNummer.Index + 1;
        EDT_SpezGewicht.Enabled := true;
        //** ML do not localize, Biogarten
        LYI_SpezGewicht.Caption := 'GP-Faktor';
        LYI_Arbeitspreis.Caption := 'Verp-Einh.';
        LYI_Info.Caption := 'IK/G';
        LYI_EANNummer.Caption := 'BR Tage';
        EDT_EANNummer.Hint := 'Bestellrhythmus in Tagen (Biogarten/Arche)';

        //** 12.07.2022
        LYI_BVNummer.Visible := (IsBiogarten);
        LYI_BVST.Visible := LYI_BVNummer.Visible;
        LYI_PackmittelArtikelnummer.Visible := (IsBiogarten); //** 30.07.2013

        //** 12.07.2022 *DB in FirstInit belassen da bei offener Query zum GPF führt
        //AQY_ArtikelStammSPEZ_GEWICHT.Size := 3;
        //EDT_SpezGewicht.Nachkomma := 3;

        {
        //** 30.07.2013
        LAB_GZ.Top := LAB_GZ.Top;
        EDT_GarantieZeit.Top := EDT_GarantieZeit.Top;
        LAB_EANNummer.Top := LAB_EANNummer.Top;
        EDT_EANNummer.Top := EDT_EANNummer.Top;
        LAB_PrlPos.Top := LAB_GZ.Top;
        EDT_PrlPos.Top := EDT_GarantieZeit.Top;
        LAB_Gewicht.Top := LAB_EANNummer.Top;
        EDT_Gewicht.Top := EDT_EANNummer.Top;

        LAB_Feinplanung.Top := LAB_AlternateArtNr3.Top;
        EDT_Feinplanung.Top := EDT_AlternateArtNr3.Top;

        EDT_SpezGewicht.Parent := LYG_Diverse. PAN_Diverse;

        EDT_SpezGewicht.Top := EDT_Gewicht.Top + 26;  //** 30.07.2013 vorher 27
        EDT_SpezGewicht.Left := EDT_Gewicht.Left;
        EDT_SpezGewicht.Width := EDT_Gewicht.Width;
        LAB_SpezGewicht.Parent := PAN_Diverse;
        LAB_SpezGewicht.Top := LAB_Gewicht.Top + 26;  //** 30.07.2013 vorher 27
        LAB_SpezGewicht.Left := LAB_Gewicht.Left;
        LAB_SpezGewicht.Enabled := true;
        EDT_SpezGewicht.TabOrder := 4;  //** 30.07.2013
        //** Zusatz Version 111:
        EDT_PackMittel_InStueck.Top := EDT_AlternateArtNr3.Top;
        LAB_PackMittel_InStueck.Top := LAB_AlternateArtNr3.Top;
        EDT_Verpackungskosten.Top := EDT_Packmittelvariante.Top;
        EDT_Verpackungskosten.TabOrder := 5;
        LAB_Verpackungskosten.Top := LAB_Packmittelvariante.Top;
        EDT_SpezGewicht.Top := EDT_PackmittelIsPM.Top;  //** 30.07.2013 vorher 27
        EDT_SpezGewicht.Left := EDT_Gewicht.Left;
        EDT_SpezGewicht.Width := EDT_Gewicht.Width;
        EDT_SpezGewicht.Nachkomma := 3;
        EDT_SpezGewicht.TabOrder := 4;  //** 30.07.2013
        LAB_SpezGewicht.Top  := LAB_PackmittelIsPM.Top;
        EDT_Packmittel.TabOrder := 8;
        EDT_AlternateArtNr3.TabOrder := 9;
        }

end; //** IsBiogarten

end; //** procedure ChangeBiogartenCaptions


(******************************************************************************)
(***  Eigener Activate-Messagehandler, vom LoadDLL angestoßen               ***)
(******************************************************************************)

procedure TFRM_DobosLV.HandleOwnActivate (var Msg : TWMNoParams);

            (******************************************************************)
            (***  Erst-Initialisierung einiger Felder                       ***)
            (******************************************************************)
            procedure FirstInit;
            var
               i : integer;

            begin
            CloseFlag := false;
            Erfassen := false;
            ErfassenMaske := false;
            DauerAendern := false;
            Aendern := false;
            CopyFlag := false;
            Strg_I_Flag := false;
            KB_Suche := false;
            ReadFWFlag := false;
            NavClicked := false;
            ModalCallActive := false;
            NeuEingabeAktiv := false;
            PushKBFlag := false;
            SaveKeyNaviVisible := false;
            ArtNrEntryZwang := false;
            ReNumFlag := false;
            LastRaster := -1;
            LastArtNr := '';
            BookMrk := nil;
            AktuelleMaske := '';
            AktuellFuellKZ := 'N';
            AktuellLieferant := 0;
            LastErfassenSemaphore := '';
            AQY_ArtikelStammB_BASIS.MaxValue := Integer(High(TBP_Basis));
            AQY_ArtikelStammP_BASIS.MaxValue := Integer(High(TBP_Basis));
            {06.11.2019 SM
            YamaichiArtNr := '';
            YamaichiAntwort := 0;   }
            FamecArtNr := '';
            FamecAntwort := 0;
            //** 11.0
            EDT_Chargenpflichtig.Enabled := (IsHasCharge);

            for i := 2 to 10 do
                MRaster[i] := 1;     //** Rastertabelle löschen

            if GetLinkagePointer^.Serial = KSerial_Aremo then
               begin
                    if LYG_LagerTexte.Visible then
                       if LYG_LagerTexte.LayoutDirection = ldTabbed then
                          for i := 0 to LYG_LagerTexte.Count -1 do
                             if LYG_LagerTexte.Items[i]  = LYG_Lager then
                                begin
                                     LYG_LagerTexte.ItemIndex := i;
                                     Break;
                                end; //** if LYG_LagerTexte.Items[i]  = LYG_Lager then

               end; //** if GetLinkagePointer^.Serial = KSerial_Aremo then

            with GetlinkagePointer^ do
                if (Serial = KSerial_AllColor) and (PRIV_KLB = 'K') then
                    begin
                         LYG_Lieferanten.Visible := false;
                    end;

            //** Bei Vertreterzugang wird TAB_Lieferant ausgeblendet
            if GetLinkagePointer^.Serial = KSerial_Schnierle then
               if GetlinkagePointer^.IsVertreterNr > -1 then
                  LYG_Lieferanten.Visible := false;

            if GetLinkagePointer^.Serial = KSerial_Oilquick then
               if GetLinkagePointer^.PRIV_SYSVW <> Ja then
                  begin
                       EDT_AMM_Art4.Enabled := false;
                       EDT_AMM_Key4.Enabled := false;
                       EDT_AMM_InhaltFrei4.Enabled := false;
                  end; //** if GetLinkagePointer^.PRIV_SYSVW <> Ja

            with GetLinkagePointer^ do
                 begin
                      if not ((Module[imDAVOS]) or (Module[imLZ])) then
                         for i := 0 to LYG_Maße.Count -1 do // TAB_Masse.ControlCount -1 do
                             LYG_Maße.Items[i].Enabled := false;

                      if (not (Module[imLZ])) then
                         for i := 0 to LYG_Edelmetall.Count -1 do //  TAB_Edelmetall.ControlCount -1 do
                             LYG_Edelmetall.Items[i].Enabled := false;


                      MNI_FelderManipulieren.Enabled := (PRIV_SCHNELL_AENDERN in [ja, 'L']);

                      LYI_ChaotLagerBestand0.Caption := rs_LV_Bestand+'-'+IntToStr(CL_Lagernummer);       //** 14.09.2018 SM
                      LYI_ChaotLagerReserviert0.Caption := rs_LV_Reserviert+'-'+IntToStr(CL_Lagernummer)+''; //** 14.09.2018 SM
                      //LYG_ChaotischeLager.Visible := false;

                      if (Serial = KSerial_ASW) then
                         EDT_ViewerPfad.PopupMenu := PUM_Zeichnung
                      else
                         EDT_ViewerPfad.PopupMenu := nil;

                      //** 12.07.2022 *DB eigene Routine ChangeBiogartenCaptions
                      //** wegen FormResize
                      if ((IsBiogarten) or (IsArche)) then
                         begin
                              ChangeBiogartenCaptions;
                              AQY_ArtikelStammSPEZ_GEWICHT.Size := 3;
                              EDT_SpezGewicht.Nachkomma := 3;
                         end; //** if ((IsBiogarten) or (IsArche)) then

                 end; //** with GetLinkagePointer^ do

            STD_US := 2;
            STD_ME := '';
            STD_DK1 := 8;
            STD_DK2 := 8;
            STD_DK3 := 0;
            STD_DK4 := 0;
            STD_DK5 := 1;
            STD_KALK_KZ := 'D';
            STD_KALK_KZVK := 'S';
            STD_Raster := 0;
            //** 11.2
            STD_MASSE_SIND_MM := 'N';
            STD_MASSE_FUER_FA := 'N';

            SMText := '';
            CheckAndInstallSammelArtikel;
            ReadWriteRecent(false, false);
            BereinigeRecentList;
            if IsRg3Stellen then
               begin
                    EDT_Rg.MaxDigits := 3;
                    AQY_ArtikelStammRG.MaxValue := 999;
               end  //** if IsRg3Stellen then
            else
               begin
                    EDT_Rg.MaxDigits := 2;
                    AQY_ArtikelStammRG.MaxValue := 99;
               end; //** else: if IsRg3Stellen then

            if IsHasCharge then     //** 27.11.2013  - Anfang
               begin
                    MNI_ShowChargenlager.Checked := true; //** wird in Routine auf false gestellt
                    MNI_ShowChargenlagerClick(MNI_ShowChargenlager);
               end; //** if IsHasCharge then
            ChargeInsert := false;  //** 27.11.2013 - Ende

            RBT_PreiseNetto.Checked := true;

            //* 12.1
            IsSchnellAnlage := false;
            FAnzMussFelderMuessenNoch := 0;
            FFirstSchnellAnlage := true;
            FSchnellanlageLayoutName := '';
            ImportStdLayout := false;

            end; //** lokale procedure FirstInit

(******************************************************************************)
(***  Start der procedure HandleOwnActivate                                 ***)
(******************************************************************************)
begin

Msg.result := 0;  //** Message Handled

if FirstSw then
   try
      FirstSw := false;
      //** Keyboardeingabe bits zum WindowReady stoppen - eigentlich schon im FomCreate
      //Self.Enabled := false;
      EDT_ArtNr.Enabled := false;
      CanDisconnect := false;
      KeyList := TSHBDynamicArray.Create(100, SizeOf(TLagerMemKey));
      InitQueriesAndDBs;
      FirstInit;               //** Felder, Privilegien setzen

      SetChildStatusText(GetStdRes(frs_STD_TabellenOeffnen));
      //** Geschmackssache (initial Open)
      //** OpenDataSources;
      SortOrder := asArtNr;
      SetzeKey;

      if not DTS_Open then
         begin
              OpenDataSources;
              PosMain('', '', mpExact, false);
              ReadAllData;
         end; //** if not DTS_Open

      if (MasterIniValue in ['L', 'l']) then
         if ((AQY_ArtikelStamm.Active) and
             (AQY_ArtikelStamm.State <> dsBrowse)) then
            ShowMessage(rs_LV_EsIstArtikelInBearbeitung)
         else
            if MasterIniValue = 'l' then
               LoadFromExternalList
            else
               if MasterIniValue = 'L' then
                  with GetLinkagePointer^ do
                       PosMain(LinkString128, '', mpExact, true);

      UpdateButtons;
      if (MasterIniValue = 'Q') then
         CheckAndSetNavigatorList;

      LoadSaveAndSetOpenQuersrpuengeAutomatisch(false);
      if GetLinkagePointer^.IsTabbedAnsichtActive then
         begin
              LoadAndSaveTabname(false);
              CheckAndSetTabCaption;
         end //** if GetLinkagePointer^.IsTabbedAnsichtActive
      else
         BTN_ToggleTabname.Visible := ivNever;

      LoadSaveAndSetXRefSelect(false);

   finally
      //** PCT_ApLadr macht beim grossen Screen Fehler /zeichnet nicht),
      //** nochmaliger Aufruf beseigt dies...
      FormResize(self);
      Application.ProcessMessages;

      {$IFDEF VERSION130}
      //** vorbereitet für 13.0
      //** unter Delphi11.3 Formulare mit LayoutManager Form nicht sichtbar - das hilft:
      if (not(GetLinkagePointer^.IsTabbedAnsichtActive))  then
        if ((CanBeMaximized) and (MNI_ImmerMaxSize.Checked)) then
           SeiteAnpassen(true, true)
        else
           SeiteAnpassen(false, true);
      {$ENDIF}

      WindowReady := true;
      //** erst jetzt Form freigeben
      //Self.Enabled := true;
      EDT_ArtNr.Enabled := true;
      if EDT_ArtNr.CanFocus then
         EDT_ArtNr.SetFocus;

      //** 12.1 Schnell-Anlage Layout von aussen laden
      if GetLinkagePointer^.LinkSchnellanlageLayout <> '' then
         begin
              FSchnellanlageLayoutName := GetLinkagePointer^.LinkSchnellanlageLayout;
              GetLinkagePointer^.LinkSchnellanlageLayout := '';
              BTN_NeuSchnellanlage.Click;
         end; //** if GetLinkagePointer^.LinkInteger1 > 0 then

   end; //** if FirstSw

end; //** procedure HandleOwnActivate


(******************************************************************************)
(***  DialogChar-Message: '?', '?' und '?' ausfiltern                       ***)
(******************************************************************************)

procedure TFRM_DobosLV.CMDialogChar(var Message: TCMDialogChar);
begin

inherited;

if (Message.Charcode in [78,110]) then
   Message.Result := 1

end; //** procedure CMDialogChar


(******************************************************************************)
(***   FormKeyPress                                                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.FormKeyPress(Sender: TObject; var Key: Char);
begin

inherited;
if (Self.ActiveControl is TcxGridSite) or (Self.ActiveControl is TcxCustomInnerTextEdit) then
   Exit;

ConvertReturnKey(Self, Key);

end; //** procedure FormKeyPress


(******************************************************************************)
(***   Klassenkonstruktor                                                   ***)
(******************************************************************************)

constructor TFRM_DobosLV.CreateWithHandle (AOwner : TComponent;
                                           AHandle : THandle;
                                           AType : Word;
                                           AIniValue : Char);

begin

//!! muss vor inherited im CreateWithHandle stehen
//** Dieses Programm unterstützt FullScreen (1280*1024)
CanBeMaximized := true;

inherited;
ReSizeRunning := false;
AllowedInstances := doboslv_mehrfachaufruf;
FirstSw := true;
BookArtNr := '';
CurrArtNr := '';
MEOF := false;
MBOF := false;

KeyList := nil;
ArtNrEntryZwang := false;
SetUpLVControls;
LastArtNr := '';
DTS_Open := true;
CloseDataSources;

SortOrder := asArtNr;
MasterIniValue := AIniValue;

end; //** constructor CreateWithHandle


(******************************************************************************)
(***    SetUpLVControls                                                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.SetUpLVControls;
var
   i : integer;

begin

with GetLinkagePointer^ do
     begin
          ek := (PRIV_EK = Ja);

          if Serial = KSerial_Hoehne then
             ek := ((ek) and (PRIV_DV_HK = Ja));

          vk := (PRIV_VK = Ja);
          um := (PRIV_UM = Ja);
          db := (PRIV_DB = Ja);

     end;

//** Ausblenden des Inventur-EK´s bei fehlendem Privileg
if not ek then
   begin
        GRD_LagerDBViewINV_EK.Visible := false;
        GRD_LagerDBViewINV_EK.VisibleForCustomization := false;
   end; //** if not ek

for i := 0 to ComponentCount -1 do
    begin
         if Components[i].Tag in [Low(tgFett)..High(tgFett)] then
            if (Components[i] is TSHBBaseEdit) then
               with TSHBBaseEdit(Components[i]) do
                    begin
                         if (GetLinkagePointer^.Desktop_Width >= DefaultWidth) then
                            Font.Style := [fsBold];
                         if (((Tag = tgVK) and (not vk)) or
                             ((Tag = tgDB) and (not db)) or
                             ((Tag = tgEK) and (not ek)) or
                             ((Tag = tgUM) and (not um))) then
                             Deactivated := true;
                    end //** with TSHBBaseEdit(Components[i]) do
            else
               if (Components[i] is TEdit) and (Components[i].Tag in [Low(tgFett)..High(tgFett)]) then
                  begin
                       with TEdit(Components[i]) do
                            begin
                                 if (GetLinkagePointer^.Desktop_Width >= DefaultWidth) then
                                    TEdit(Components[i]).Font.Style := [fsBold];
                                 if (((Tag = tgVK) and (not vk)) or
                                     ((Tag = tgEK) and (not ek)) or
                                     ((Tag = tgUM) and (not um))) then
                                       begin
                                            Enabled := false;
                                            TabStop := false;
                                       end; //** if (((Tag = tgVK) and (not vk)) or
                            end; //** with TEdit(Components[i]) do
                  end;
    end; //** for i := 0 to ComponentCount -1 do

EDT_ZNRev.CustomItem := '';

end; //** procedure SetUpControls


(******************************************************************************)
(***    FormCreate, bei 1024´er Auflösung Daten Fett                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.FormCreate(Sender: TObject);
var
   i : integer;
   ARootKey   : HKEY;
   APath      : string;
   AKey       : string;
   AValue     : Integer;
   ASize      : integer;
   SLR        : TSchlRec;
   b          : boolean;
   ABool      : boolean;

begin

SelectionFeuert := false;
//** Keyboardeingabe bits zum WindowReady stoppen
//Self.Enabled := false;
//** Layout: Captions speichern muss vor inherited stehen...
ARootKey := HKEY_CURRENT_USER;
APath := Registry_BiosPfad+'\SaveLayoutCaptions';
AKey := Self.ClassName;
ASize := SizeOf(Boolean);
ABool := false;
ReadWriteRegistry(rdBool, false, ARootKey, APath, AKey, ABool, ASize);
BTN_SaveLayoutCaptions.Down := ABool;

if ((GetLinkagePointer^.BIOSKundenArt <> tkArtSHB) or
    (IsSHB)) then
   BTN_SaveLayoutCaptions.Visible := ivAlways
else
   BTN_SaveLayoutCaptions.Visible := ivNever;

inherited;
//** zu Testzwecken
BTN_SaveSHBLayoufile.Visible := ivNever;
if ((IsSHB) or
    (GetLinkagePointer^.Serial = KSerial_BV)) then
    BTN_SaveSHBLayoufile.Visible := ivAlways;


BTN_RKMViewer.Visible := ivNever;
if GetLinkagePointer^.RKMViewerExists then
   BTN_RKMViewer.Visible := ivAlways;

BGP_SelNavBarGruppe.Visible := ivNever;
LYC_Lagerverwaltung.DoubleBuffered := true;
MainLayoutControl := nil;
ActiveLayout      := ffUnbekannt;
ActiveLayoutNr    := -1;
RegisterLayoutControl(LYC_Lagerverwaltung);
//** wegen OldCreateOrder = false
//FormResize(self);

SetOptionUseBadges(true);

//** Boolean für Einblendung von kundenspezifischen Buttons
if GetLinkagePointer^.Serial = KSerial_Pabst then
   KundenSpezifischeButtons := true
else
   KundenSpezifischeButtons := false;

MaxCharArtNr := 10;
WarnLengthArtNr := 15;
BigEKScreenActive := false; //** kann eig ausgebaut werden **PB
Self.ActiveControl := EDT_ArtNr;

LYI_ArtikelGesperrtInfo.Visible := false;

//** 11.1 3432 2.2.2017 damit nicht der falsche Reiter aktiv ist (vom Designer)
//PCT_Bewegung.ActivePage := TAB_Lieferant;

//** 11.1
b := false;
SLR := (CallSys('YY', Integer(tYYAnzahlCharArtNr),b));
if b then
   begin
        MaxCharArtNr := SLR.WAEHRUNG_VKONTO;
        WarnLengthArtNr := SLR.NETTOTAGE;
        if ((MaxCharArtNr < 10) or (MaxCharArtNr > 30)) then
           MaxCharArtNr := 10;
        if ((WarnLengthArtNr < 10) or (WarnLengthArtNr > 30)) then
           WarnLengthArtNr := 50;
   end
else
   begin
        //** Do not localize
        InstallYYOrWriteParams(tYYAnzahlCharArtNr, 'Begrenzt Artikelnummernlänge','', MaxCharArtNr, WarnLengthArtNr, 0, 0.0,0.0,' ');
   end; //** if b

EDT_ArtNr.MaxLength := MaxCharArtNr;

//** 11.0
ARootKey := HKEY_CURRENT_USER;
APath := Registry_BiosPfad+'\QuickSearch';
//** Schlüssel ggfs anlegen
AKey := 'Lager';
AValue := 1;
ASize := SizeOf(AValue);
if not ReadWriteRegistry(rdInteger, true, ARootKey, APath, AKey, AValue, ASize) then
   ReadWriteRegistry(wrInteger, true, ARootKey, APath, AKey, AValue, ASize);

MNI_EnableBIOSSearch.Checked := (AValue = 1);
if MNI_EnableBIOSSearch.Checked then
   begin
        EDT_ArtNr.WriteMode := wrmInsert;
        EDT_ArtNr.EntryMode := emForceInsert;

   end
else
   begin
        EDT_ArtNr.WriteMode := wrmOverWrite;
        EDT_ArtNr.EntryMode := emForceOverWrite;
   end; //** if MNI_EnableBIOSSearch.Checked

QuickSearchMaxRecords := 100;
ARootKey := HKEY_CURRENT_USER;
APath := Registry_BiosPfad+'\QuickSearch';
//** Schlüssel ggfs anlegen
AKey := 'LagerMXRecords';
AValue := QuickSearchMaxRecords;
ASize := SizeOf(AValue);
if not ReadWriteRegistry(rdInteger, true, ARootKey, APath, AKey, AValue, ASize) then
   ReadWriteRegistry(wrInteger, true, ARootKey, APath, AKey, AValue, ASize);
QuickSearchMaxRecords := AValue;
AQY_LookUp.MaxRecords := QuickSearchMaxRecords;

ActivePageTexteBestandStr := '';
ActivePageBewegungenStr   := '';

ARootKey := HKEY_CURRENT_USER;
APath := Registry_BiosPfad+'\LVReiter';
AKey := 'ActivePageTexteBestandStr';
ASize := Length(ActivePageTexteBestandStr);
ReadWriteRegistry(rdString, true, ARootKey, APath, AKey, ActivePageTexteBestandStr, ASize);

ARootKey := HKEY_CURRENT_USER;
APath := Registry_BiosPfad+'\LVReiter';
AKey := 'ActivePageBewegungenStr';
ASize := Length(ActivePageBewegungenStr);
ReadWriteRegistry(rdString, true, ARootKey, APath, AKey, ActivePageBewegungenStr, ASize);

ARootKey := HKEY_CURRENT_USER;
APath := Registry_BiosPfad+'\RueckstaendeAktivieren';
AKey := 'Durchsuche Rueckstaende';
AValue := 1;
ASize := SizeOf(AValue);
ReadWriteRegistry(rdInteger, true, ARootKey, APath, AKey, AValue, ASize);
MNI_DurchsucheRueckstaende.Checked := (AValue = 1);



LYI_BVNummer.Visible := (IsBiogarten);
LYI_BVST.Visible := LYI_BVNummer.Visible;
LYI_PackmittelArtikelnummer.Visible := (IsBiogarten); //** 30.07.2013

OldEK1 := 0.0;
OldEK2 := 0.0;
OldEK3 := 0.0;
OldEK4 := 0.0;
OldEK5 := 0.0;
OldEK6 := 0.0;
OldEK7 := 0.0;
OldEK8 := 0.0;
OldEK9 := 0.0;
OldEK10 := 0.0;
OldRabatt := 0.0;
OldLePreisUpdate := SHBStrToDate(NullDatum);

OldVK1 := 0.0;
OldVK2 := 0.0;
OldVK3 := 0.0;
OldVK4 := 0.0;
OldVK5 := 0.0;
OldVK6 := 0.0;
OldVK7 := 0.0;
OldVK8 := 0.0;
OldVK9 := 0.0;
OldVK10 := 0.0;
OldLePreisUpdateVK := SHBStrToDate(NullDatum);

CopyNichtFragen := false;
CopyVK := false;
CopyEK := false;
CopyEM := false;
CopyMA := false;
CopyME := false;
CopyIS := false;
CopyIB := false;
CopyWH := false;
CopyZusatzTexte := false;
CopyMiniset := false;
CopySL := false;
CopyAP := false;
CopyZusatz :=false;
LastHinweisArtNr := '';
DispoAktuellSw := true;
PreisChangedFlag := false;
PreisChangedReason := '';

BTN_DBNavPost.Enabled := false;
BTN_DBNavAbbrechen.Enabled := false;

ExternArtNrNeuList := TStringList.Create;
ExternArtNrNeuList.Sorted := false;
ExternArtNrNeuList.Duplicates := DupIgnore;
MEM_SM.Text := '';

SALinkList := TStringList.Create;

EDT_B_Basis.MaxValue := Integer(High(TBP_Basis));
EDT_P_Basis.MaxValue := Integer(High(TBP_Basis));

//** Kundenspezifische Buttons
if KundenSpezifischeButtons then
   BTN_Kundenspezifisch.Visible := ivAlways
else
   BTN_Kundenspezifisch.Visible := ivNever;

if GetLinkagePointer^.Serial = KSerial_Pabst then
   BTN_WerkzeugEntnahme.Visible := ivAlways
else
   BTN_WerkzeugEntnahme.Visible := ivNever;

//** 11.0
with EDT_KB do
     begin
          BIOSQuery := AQY_LookUp;           //** Eigene Query aufs Formular
          BIOSConnection := GetDOBOSADB;     //** Connection versorgen
          BIOSTableName := 'ARTIKEL_STAMM';  //** Tabellenname
          BIOSKeyField := 'ARTNR';           //** Schlüsselfeld (fürs Ergebnis)
          BIOSMasterField := 'KB';           //** Feld das hauptsächlich durchsucht wird
          BIOSSelectFields := 'ARTNR, KB, BEZ_1'; //** Schlüssel, Masterfield und ein Weiteres (Optional)
                                                   //** ACHTUNG! wenn nur 2 statt 3 dann
                                                   //** BIOSKeyTabWidth2 auf 0 setzen
                                                   //** nur 2 oder 3 Felder gültig!!!
          BIOSOrderBy := 'KB, ARTNR';              //** Order
          BIOSSelectedKey := '';                   //** ReturnKey
          BIOSKeyTabWidth1 := 130;                  //** Spalte 2
          BIOSKeyTabWidth2 := 260;                 //** optionale Spalte 3, 0 wenn nur 2 Spalten
          BIOSDialogWidth := Trunc(EDT_KB.Width * 2.9);   //** Dialogbreite
          BIOSAllowSearch := true;                 //** grundsätzlich Search aktivieren
          BIOSFullTextEasyMode := false;           //** Fulltext ohne Union, ab 15000 Records automatisch an
          BIOSFTSearchOnlyRows := '';              //** Wenn leer automatisch alle String-Spalten > 2 Chars
          //** Beispiel für Spalteneingrenzung:
          //** BIOSFTSearchOnlyRows := 'ARTNR+'' ''+KB+'' ''+ZN+'' ''+BN+'' ''+BEZ_1+'' ''+BEZ_2+'' ''+BEZ_3+'' ''+BEZ_4+'' ''+BEZ_5+'' ''+BEZ_6+'' ''+BEZ_7+'' ''+BEZ_8+'' ''+INFO';
          //BIOSInitSearch;                          //** Search initialisieren
          //** Wird im KBOnEnter ausgeführt
                                                   //** muß immer als erstes gemacht werden
                                                   //** Parameterisierte Query
                                                   //** Bei Bedingungswechsel wieder aufrufen
          OnBIOSSelectionFired:= BIOSSelectionFired; //** Zeiger auf Procedur die Reaktion im Programm                                                    //** hier PosMain (Satzwechsel)

     end; //** with EDT_KB do

//** 11.0
with EDT_BEZ_1 do
     begin
          BIOSQuery := AQY_LookUp;           //** Eigene Query aufs Formular
          BIOSConnection := GetDOBOSADB;     //** Connection versorgen
          BIOSTableName := 'ARTIKEL_STAMM';  //** Tabellenname
          BIOSKeyField := 'ARTNR';           //** Schlüsselfeld (fürs Ergebnis)
          BIOSMasterField := 'BEZ_1';           //** Feld das hauptsächlich durchsucht wird
          BIOSSelectFields := 'ARTNR, KB, BEZ_1'; //** Schlüssel, Masterfield und ein Weiteres (Optional)
                                                   //** ACHTUNG! wenn nur 2 statt 3 dann
                                                   //** BIOSKeyTabWidth2 auf 0 setzen
                                                   //** nur 2 oder 3 Felder gültig!!!
          BIOSOrderBy := 'BEZ_1, ARTNR';              //** Order
          BIOSSelectedKey := '';                   //** ReturnKey
          BIOSKeyTabWidth1 := 130;                  //** Spalte 2
          BIOSKeyTabWidth2 := 260;                 //** optionale Spalte 3, 0 wenn nur 2 Spalten
          BIOSDialogWidth := (EDT_BEZ_1.Width * 2); //** Dialogbreite
          BIOSAllowSearch := true;                 //** grundsätzlich Search aktivieren
          BIOSFullTextEasyMode := false;           //** Fulltext ohne Union, ab 15000 Records automatisch an
          BIOSFTSearchOnlyRows := '';              //** Wenn leer automatisch alle String-Spalten > 2 Chars
          //** Beispiel für Spalteneingrenzung:
          //** BIOSFTSearchOnlyRows := 'ARTNR+'' ''+KB+'' ''+ZN+'' ''+BN+'' ''+BEZ_1+'' ''+BEZ_2+'' ''+BEZ_3+'' ''+BEZ_4+'' ''+BEZ_5+'' ''+BEZ_6+'' ''+BEZ_7+'' ''+BEZ_8+'' ''+INFO';
          //BIOSInitSearch;                          //** Search initialisieren
          //** Wird im Bez1OnEnter ausgeführt
                                                   //** muß immer als erstes gemacht werden
                                                   //** Parameterisierte Query
                                                   //** Bei Bedingungswechsel wieder aufrufen
          OnBIOSSelectionFired:= BIOSSelectionFired; //** Zeiger auf Procedur die Reaktion im Programm                                                    //** hier PosMain (Satzwechsel)

     end; //** with EDT_Bez1 do

//** 11.0
with EDT_BN do
     begin
          BIOSQuery := AQY_LookUp;           //** Eigene Query aufs Formular
          BIOSConnection := GetDOBOSADB;     //** Connection versorgen
          BIOSTableName := 'ARTIKEL_STAMM';  //** Tabellenname
          BIOSKeyField := 'ARTNR';           //** Schlüsselfeld (fürs Ergebnis)
          BIOSMasterField := 'BN';           //** Feld das hauptsächlich durchsucht wird
          BIOSSelectFields := 'ARTNR, BN, BEZ_1'; //** Schlüssel, Masterfield und ein Weiteres (Optional)
                                                   //** ACHTUNG! wenn nur 2 statt 3 dann
                                                   //** BIOSKeyTabWidth2 auf 0 setzen
                                                   //** nur 2 oder 3 Felder gültig!!!
          BIOSOrderBy := 'BN, ARTNR';              //** Order
          BIOSSelectedKey := '';                   //** ReturnKey
          BIOSKeyTabWidth1 := 130;                  //** Spalte 2
          BIOSKeyTabWidth2 := 450;                 //** optionale Spalte 3, 0 wenn nur 2 Spalten
          BIOSDialogWidth := Trunc(EDT_BN.Width * 2.7);   //** Dialogbreite
          BIOSAllowSearch := true;                 //** grundsätzlich Search aktivieren
          BIOSFullTextEasyMode := false;           //** Fulltext ohne Union, ab 15000 Records automatisch an
          BIOSFTSearchOnlyRows := '';              //** Wenn leer automatisch alle String-Spalten > 2 Chars
          //** Beispiel für Spalteneingrenzung:
          //** BIOSFTSearchOnlyRows := 'ARTNR+'' ''+KB+'' ''+ZN+'' ''+BN+'' ''+BEZ_1+'' ''+BEZ_2+'' ''+BEZ_3+'' ''+BEZ_4+'' ''+BEZ_5+'' ''+BEZ_6+'' ''+BEZ_7+'' ''+BEZ_8+'' ''+INFO';
          //BIOSInitSearch;                          //** Search initialisieren
          //** Wird im Bez1OnEnter ausgeführt
                                                   //** muß immer als erstes gemacht werden
                                                   //** Parameterisierte Query
                                                   //** Bei Bedingungswechsel wieder aufrufen
          OnBIOSSelectionFired:= BIOSSelectionFired; //** Zeiger auf Procedur die Reaktion im Programm                                                    //** hier PosMain (Satzwechsel)

     end; //** with EDT_BN do

//** 11.0
with EDT_ZN do
     begin
          BIOSQuery := AQY_LookUp;           //** Eigene Query aufs Formular
          BIOSConnection := GetDOBOSADB;     //** Connection versorgen
          BIOSTableName := 'ARTIKEL_STAMM';  //** Tabellenname
          BIOSKeyField := 'ARTNR';           //** Schlüsselfeld (fürs Ergebnis)
          BIOSMasterField := 'ZN';           //** Feld das hauptsächlich durchsucht wird
          BIOSSelectFields := 'ARTNR, ZN, BEZ_1'; //** Schlüssel, Masterfield und ein Weiteres (Optional)
                                                   //** ACHTUNG! wenn nur 2 statt 3 dann
                                                   //** BIOSKeyTabWidth2 auf 0 setzen
                                                   //** nur 2 oder 3 Felder gültig!!!
          BIOSOrderBy := 'ZN, ARTNR';              //** Order
          BIOSSelectedKey := '';                   //** ReturnKey
          BIOSKeyTabWidth1 := 130;                  //** Spalte 2
          BIOSKeyTabWidth2 := 450;                 //** optionale Spalte 3, 0 wenn nur 2 Spalten
          BIOSDialogWidth := Trunc(EDT_ZN.Width * 3);   //** Dialogbreite
          BIOSAllowSearch := true;                 //** grundsätzlich Search aktivieren
          BIOSFullTextEasyMode := false;           //** Fulltext ohne Union, ab 15000 Records automatisch an
          BIOSFTSearchOnlyRows := '';              //** Wenn leer automatisch alle String-Spalten > 2 Chars
          //** Beispiel für Spalteneingrenzung:
          //** BIOSFTSearchOnlyRows := 'ARTNR+'' ''+KB+'' ''+ZN+'' ''+BN+'' ''+BEZ_1+'' ''+BEZ_2+'' ''+BEZ_3+'' ''+BEZ_4+'' ''+BEZ_5+'' ''+BEZ_6+'' ''+BEZ_7+'' ''+BEZ_8+'' ''+INFO';
          //BIOSInitSearch;                          //** Search initialisieren
          //** Wird im Bez1OnEnter ausgeführt
                                                   //** muß immer als erstes gemacht werden
                                                   //** Parameterisierte Query
                                                   //** Bei Bedingungswechsel wieder aufrufen
          OnBIOSSelectionFired:= BIOSSelectionFired; //** Zeiger auf Procedur die Reaktion im Programm                                                    //** hier PosMain (Satzwechsel)

     end; //** with EDT_ZN do

//** 11.0
with EDT_ArtNr do
     begin
          BIOSQuery := AQY_LookUp;           //** Eigene Query aufs Formular
          BIOSConnection := GetDOBOSADB;     //** Connection versorgen
          BIOSTableName := 'ARTIKEL_STAMM';  //** Tabellenname
          BIOSKeyField := 'ARTNR';           //** Schlüsselfeld (fürs Ergebnis)
          BIOSMasterField := 'ARTNR';         //** Feld das hauptsächlich durchsucht wird
          BIOSSelectFields := 'ARTNR, BEZ_1, BEZ_2'; //** Schlüssel, Masterfield und ein Weiteres (Optional)
                                                   //** ACHTUNG! wenn nur 2 statt 3 dann
                                                   //** BIOSKeyTabWidth2 auf 0 setzen
                                                   //** nur 2 oder 3 Felder gültig!!!
          BIOSOrderBy := 'ARTNR, BEZ_1';           //** Order
          BIOSSelectedKey := '';                   //** ReturnKey
          BIOSKeyTabWidth1 := 340;                 //** Spalte 2
          BIOSKeyTabWidth2 := 720;                 //** optionale Spalte 3, 0 wenn nur 2 Spalten
          BIOSDialogWidth := (Trunc(EDT_ArtNr.Width * 2.7));   //** Dialogbreite
          BIOSAllowSearch := true;                 //** grundsätzlich Search aktivieren
          BIOSFullTextEasyMode := false;           //** Fulltext ohne Union, ab 15000 Records automatisch an
          BIOSFTSearchOnlyRows := '';              //** Wenn leer automatisch alle String-Spalten > 2 Chars
          //** Beispiel für Spalteneingrenzung:
          //** BIOSFTSearchOnlyRows := 'ARTNR+'' ''+KB+'' ''+ZN+'' ''+BN+'' ''+BEZ_1+'' ''+BEZ_2+'' ''+BEZ_3+'' ''+BEZ_4+'' ''+BEZ_5+'' ''+BEZ_6+'' ''+BEZ_7+'' ''+BEZ_8+'' ''+INFO';
          //BIOSInitSearch;                          //** Search initialisieren
          //** Wird im Bez1OnEnter ausgeführt
                                                   //** muß immer als erstes gemacht werden
                                                   //** Parameterisierte Query
                                                   //** Bei Bedingungswechsel wieder aufrufen
          OnBIOSSelectionFired:= BIOSSelectionFired; //** Zeiger auf Procedur die Reaktion im Programm                                                    //** hier PosMain (Satzwechsel)

     end; //** with EDT_ArtNr do

//EnableAlign;
FormResize(self);
LoadAndSetUseBadges;

LYG_ChaotischeLager.Visible := GetLinkagePointer^.Module[imCL];
//** erst in 12.1
MNI_Zuschlagsarten.Visible := true;

{$IFDEF VERSION130}
if GetLinkagePointer^.ActualTheme = 2 then
   begin
        LAF_CaptionUnderline.ItemOptions.CaptionOptions.TextColor := clWhite;
        LAF_CaptionUnderlineAndBold.ItemOptions.CaptionOptions.TextColor := clWhite;
   end; //** if GetLinkagePointer^.ActualTheme = 2

{$ENDIF}

if HasSerienNummernKartei then
   BTN_Seriennummernkartei.Visible := ivAlways
else
   BTN_Seriennummernkartei.Visible := ivNever;

try
   i := EDT_PreiseWS.AsInteger;
except
   i := 0;
end; //** try..except

EDT_WaehrungsText.Text := GetLinkagePointer^.WS_Tabelle[i].Name;

end; //** procedure FormCreate


(******************************************************************************)
(***      BIOSSelectionFired                                                ***)
(******************************************************************************)

procedure TFRM_dobosLV.BIOSSelectionFired(Sender: TObject);
var
   s : string;

begin

inherited;

try
   SelectionFeuert := true;
   if Sender = EDT_KB then
      s := EDT_KB.BIOSSelectedKey
   else
       if Sender = EDT_BEZ_1 then
          s := EDT_BEZ_1.BIOSSelectedKey
       else
          if Sender = EDT_BN then
             s := EDT_BN.BIOSSelectedKey
          else
             if Sender = EDT_ZN then
                s := EDT_ZN.BIOSSelectedKey
             else
                if Sender = EDT_ArtNr then
                   s := EDT_ArtNr.BIOSSelectedKey;

   if s = '' then
      if Sender = EDT_ArtNr then
         begin
              if (not (IsSpace(EDT_ArtNr.Text))) then
                 begin
                      CurrArtNr := EDT_ArtNr.Text;
                      if (not (PosMain(CurrArtNr, '', mpExact, true))) then
                         begin
                              CurrArtNr := '';
                              EDT_ArtNr.Text := CurrArtNr;
                              PosMain(CurrArtNr, '', mpExact, true);
                              SendMessage(Handle, WM_NextDlgCtl, 1, 0);
                              //Self.ActiveControl := EDT_ArtNr;
                              Exit;
                         end;
                 end; //** if (not (IsSpace(EDT_ArtNr.Text))) then
         end
      else
         begin
              EDT_ArtNr.Text := CurrArtNr;
              PosMain(CurrArtNr, '', mpExact, true);
              Exit;
         end
   else
      if PosMain(s, '', mpExact, true) then
         begin
              EDT_ArtNr.Text := s;
              GetLinkagePointer^.LinkLastArtNr := s;
              UpdateRecentList;

              //** 27.04.2021 wieder wie in 11.2
              //** damit bei der ArtNrSuche EDT_ArtNr focussiert bleibt Mail Drasky
              if Sender = EDT_ArtNr then
                 begin
                      PostMessage(Handle, WM_NextDlgCtl, 1, 0);
                      Application.ProcessMessages;
                      if (not (Self.ActiveControl = EDT_ArtNr)) then
                         begin
                              PostMessage(Handle, WM_NextDlgCtl, 0, 0);
                              Application.ProcessMessages;
                              Self.ActiveControl := EDT_ArtNr;
                         end; //** if (not (Self.ActiveControl = EDT_ArtNr))
                 end; //** if Sender = EDT_ArtNr
              {vorher
              if Sender = EDT_ArtNr then
                 begin
                      SendMessage(Handle, WM_NextDlgCtl, 1, 0);
                      if (not (Self.ActiveControl = EDT_ArtNr)) then
                         begin
                              SendMessage(Handle, WM_NextDlgCtl, 0, 0);
                              Self.ActiveControl := EDT_ArtNr;
                         end; //** if (not (Self.ActiveControl = EDT_ArtNr))
                 end; //** if Sender = EDT_ArtNr
              }
         end; //** if PosMain(s, '', mpExact, true) then

finally
   SelectionFeuert := false;
end; //** try..finally

end; //** procedure BIOSSelectionFired


(******************************************************************************)
(***    FormClose                                                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.FormClose(Sender: TObject; var Action: TCloseAction);
begin

if MasterKillSw then
   CloseFlag := true
else
   if CloseFlag then
      Exit
   else
      CloseFlag := true;

DTS_Open := false;

try
   with AQY_Lager do
        begin
             if Active then
                Close;
             if Prepared then
                Prepared := false;
        end; //** with AQY_Lager do

   with AQY_CHLager do    //** 14.09.2018 SM
        begin
             if Active then
                Close;
             if Prepared then
                Prepared := false;
        end; //** with AQY_CHLager do

   with AQY_MiniSet do
        begin
             if Active then
                Close;
             if Prepared then
                Prepared := false;
        end; //** with AQY_MiniSet do

   with AQY_Lieferant do
        begin
             if Active then
                Close;
             if Prepared then
                Prepared := false;
        end; //** with AQY_Lieferant do

   with AQY_FremdTexte do
        begin
             if Active then
                Close;
             if Prepared then
                Prepared := false;
        end; //** with AQY_FremdTexte do

   with AQY_DVKalk do
        begin
             if Active then
                Close;
             if Prepared then
                Prepared := false;
        end; //** with AQY_DVKalk do

   with AQY_Preise do
        begin
             if Active then
                Close;
             if Prepared then
                Prepared := false;
        end; //** with AQY_Preise do

   with AQY_SumBestand do
        begin
             if Active then
                Close;
             if Prepared then
                Prepared := false;
        end; //** with AQY_SumBestand do

   with AQY_Umsatz do
        begin
             if Active then
                Close;
             if Prepared then
                Prepared := false;
        end; //** with AQY_Umsatz do

   with AQY_Bild do
        begin
             if Active then
                Close;
             if Prepared then
                Prepared := false;
        end; //** with AQY_Bild do

   with AQY_ArtikelStamm do
        begin
             if Active then
                Close;
             if Prepared then
                Prepared := false;
        end; //** with AQY_ArtikelStamm do

   with AQY_IBExist do
        begin
             if Active then
                Close;
             if Prepared then
                Prepared := false;
        end; //** with AQY_IBExist do

   with AQY_DVFehlmengen do
        begin
             if Active then
                Close;
             if Prepared then
                Prepared := false;
        end; //** with AQY_DVFehlmengen do

   with AQY_GetLamps do
        begin
             if Active then
                Close;
             if Prepared then
                Prepared := false;
        end; //** with AQY_GetLamps do

   with AQY_Badges do
        begin
             if Active then
                Close;
             if Prepared then
                Prepared := false;
        end; //** with AQY_GetLamps do

   with AQY_HinweiseExists do
        begin
             if Active then
                Close;
             if Prepared then
                Prepared := false;
        end; //** with AQY_HinweiseExists do

   with AQY_GetXRef do
        begin
             if Active then
                Close;
             if Prepared then
                Prepared := false;
        end; //** with AQY_HinweiseExists do

   with AQY_Nav do
        begin
             if Active then
                Close;
        end; //** with AQY_Nav do

   with AQY_DVRueckstaende do
        begin
             if Active then
                Close;
        end; //** with AQY_DVFehlmengen do

   with AQY_Zusatztexte do
        begin
             if Active then
                Close;
             if Prepared then
                Prepared := false;
        end; //** with AQY_DVFehlmengen do

   with AQY_SoPreise do
        begin
             if Active then
                Close;
             if Prepared then
                Prepared := false;
        end; //** with AQY_SoPreise do

except
end; //** try..except

CloseInsertSemaphore;      //** Semaphore Erfassen Schließen

if Assigned(KeyList) then
   try
      KeyList.Free;
      KeyList := nil;
   except
   end; //** try..except

if Assigned(ExternArtNrNeuList) then
   try
      FreeAndNil(ExternArtNrNeuList);
   except
   end; //** try..except

if Assigned(SALinkList) then
   try
      FreeAndNil(SALinkList);
   except
   end; //** try..except

inherited; //** als letztes!!!

end; //** procedure FormClose


(******************************************************************************)
(***  FormCloseQuery                                                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
begin

inherited;

if MasterKillSw then
   CanClose := true
else
   //** 16.11.2021 *DB CloseProblem mit MDITabbedManager
   if (not (CanClose)) then
      Exit
   else
      if (not WindowReady) then
         begin
              CanClose := false;
              Exit;
         end //** if (not WindowReady)
      else
         CanClose := ((not DTS_Open) or (not(DTS_ArtikelStamm.State in [dsEdit, dsInsert])));

if CanClose then
   CloseInsertSemaphore      //** Semaphore Erfassen Schließen
else
   if ((DTS_Open) and (DTS_ArtikelStamm.State in [dsEdit, dsInsert])) then
      ShowMessage(rs_LV_FirstQuitEditMode);

if CanClose then
   ArtNrEntryZwang := false;

end; //** procedure FormCloseQuery


(******************************************************************************)
(***   Registerkarten (Focus, HotKeys..)                                    ***)
(******************************************************************************)

(******************************************************************************)
(***   !SInitQueriesAndDBs                                                  ***)
(******************************************************************************)

procedure TFRM_dobosLV.InitQueriesAndDBs;
var
   i : integer;
   AdrDB : string;
begin

AdrDB := 'ADRESSEN';
with GetLinkagePointer^.MRecord do
     if Mandant > 1 then
        if Adressen_m01 = 'J' then
           AdrDB := 'M01.dbo.ADRESSEN';

with AQY_Nav do
     begin
          if Active then
             Close;
     end; //** with AQY_Nav do

with AQY_ArtikelStamm do
     begin
          if Active then
             Close;
          if Prepared then
             Prepared := false;
     end; //** with AQY_ArtikelStamm do

with AQY_Lager do
     begin
          if Active then
             Close;
          if Prepared then
             Prepared := false;
     end; //** with AQY_Lager do

with AQY_CHLager do       //** 14.09.2018 SM
     begin
          if Active then
             Close;
          if Prepared then
             Prepared := false;
     end; //** with AQY_CHLager do

with AQY_Lieferant do
     begin
          if Active then
             Close;
          if Prepared then
             Prepared := false;
     end; //** with AQY_Lieferant do

with AQY_FremdTexte do
     begin
          if Active then
             Close;
          if Prepared then
             Prepared := false;
     end; //** with AQY_FremdTexte do

with AQY_DVKalk do
     begin
          if Active then
             Close;
          if Prepared then
             Prepared := false;
     end; //** with AQY_DVKalk do

with AQY_MiniSet do
     begin
          if Active then
             Close;
          if Prepared then
             Prepared := false;
     end; //** with AQY_MiniSet do

with AQY_Preise do
     begin
          if Active then
             Close;
          if Prepared then
             Prepared := false;
     end; //** with AQY_Preise do

with AQY_SumBestand do
     begin
          if Active then
             Close;
          if Prepared then
             Prepared := false;
     end; //** with AQY_SumBestand do

with AQY_Umsatz do
     begin
          if Active then
             Close;
          if Prepared then
             Prepared := false;
     end; //** with AQY_Umsatz do

with AQY_Bild do
     begin
          if Active then
             Close;
          if Prepared then
             Prepared := false;
          IMC_Bilder.Items.Clear;
          //IMG_Grafik1.Picture := nil;
     end; //** with AQY_Bild do

with AQY_IBExist do
     begin
          if Active then
             Close;
          if Prepared then
             Prepared := false;
     end; //** with AQY_IBExist do

with AQY_DVFehlmengen do
     begin
          if Active then
             Close;
          if Prepared then
             Prepared := false;
     end; //** with AQY_DVFehlmengen do

with AQY_GetLamps do
     begin
          if Active then
             Close;
          if Prepared then
             Prepared := false;
     end; //** with AQY_GetLamps do

with AQY_Badges do
     begin
          if Active then
             Close;
          if Prepared then
             Prepared := false;
     end; //** with AQY_GetLamps do

with AQY_HinweiseExists do
     begin
          if Active then
             Close;
          if Prepared then
             Prepared := false;
     end; //** with AQY_HinweiseExists do

with AQY_DVRueckstaende do
     begin
          if Active then
             Close;
     end; //** with AQY_DVFehlmengen do

with AQY_Zusatztexte do
     begin
          if Active then
             Close;
          if Prepared then
             Prepared := false;
     end; //** with AQY_HinweiseExists do

with AQY_SoPreise do
     begin
          if Active then
             Close;
          if Prepared then
             Prepared := false;
     end; //** with AQY_SoPreise do

AQY_Nav.Connection := GetDobosADB;
AQY_ArtikelStamm.Connection := GetDOBOSADB;
AQY_Lager.Connection := GetDOBOSADB;
AQY_CHLager.Connection := GetDOBOSADB;         //** 14.09.2018 SM
AQY_MiniSet.Connection := GetDOBOSADB;
AQY_Lieferant.Connection := GetDOBOSADB;
AQY_FremdTexte.Connection := GetDOBOSADB;
AQY_DVKalk.Connection := GetDOBOSADB;
AQY_Preise.Connection := GetDOBOSADB;
AQY_Umsatz.Connection := GetDOBOSADB;
AQY_Bild.Connection := GetDOBOSADB;
AQY_SumBestand.Connection := GetDOBOSADB;
AQY_IBExist.Connection := GetDOBOSADB;
AQY_DVFehlmengen.Connection := GetDOBOSADB;
AQY_GetLamps.Connection := GetDOBOSADB;
AQY_Badges.Connection := GetDobosADB;
AQY_HinweiseExists.Connection := GetDOBOSADB;
AQY_GetXRef.Connection := GetDOBOSADB;
AQY_DVRueckstaende.Connection := GetDOBOSADB;
AQY_Zusatztexte.Connection := GetDOBOSADB;
AQY_SoPreise.Connection := GetDOBOSADB;

with AQY_ArtikelStamm do
     begin
          if Active then
             Close;
          ParamCheck := true;
          SQL.Clear;
          SQL.Add('SELECT * FROM ARTIKEL_STAMM WHERE ARTNR = :ARTNR '
                 +'ORDER BY ARTNR ');
          if not Prepared then
             Prepared := true;
          ParamCheck := false;
     end; //** with AQY_ArtikelStamm do

with AQY_Lager do
     begin
          if Active then
             Close;
          ParamCheck := true;
          SQL.Clear;
          SQL.Add('SELECT ARTNR, LAGER, BESTAND, BESTELLT, RUECKSTAND, '
                 +'ORT, BBK, MIBEST, SOLLBEST, '
                 +'INV_BESTAND, INV_GEZAEHLT, INV_EK, INV_KZ, INV_DATUM, INV_GEZAEHLT_ZUM '
                 +'FROM ARTIKEL_LAGER WHERE ARTNR = :ARTNR '
                 +'ORDER BY ARTNR, LAGER ');
          if not Prepared then
             Prepared := true;
          ParamCheck := false;
          if IsHasCharge then  //** 27.11.2013 - Anfang
             begin
                  Filter := '((LAGER < ' + IntToStr(Min_ChargenLagernummer)+ ') OR '
                            +'((LAGER >= ' + IntToStr(Min_ChargenLagernummer)+') AND '
                            +'(BESTAND > 0) OR (BESTELLT > 0) OR (RUECKSTAND > 0)))';
                  Filtered := false;
             end;  //** if IsHasCharge then  27.11.2013 - Ende
     end; //** with AQY_Lager do

if GetLinkagePointer^.Module[imCL] then   //** 14.09.2018 SM
   with AQY_CHLager do
        begin
             if Active then
                Close;
             ParamCheck := true;
             SQL.Clear;
             SQL.Add('SELECT ARTNR, GANG, EBENE, FACH, BESTAND, DATUM, CHARGE '
                    +'FROM CHAOT_LAGER WHERE ARTNR = :ARTNR '
                    +'ORDER BY ARTNR, GANG, EBENE, FACH ');
             if not Prepared then
                Prepared := true;
             ParamCheck := false;
        end; //** with AQY_CHLager do

with AQY_MiniSet do
     begin
          if Active then
             Close;
          //ParamCheck := true;
          SQL.Clear;
          SQL.Add('SELECT m.*,'
                 +'"BEZ_1" = ISNULL((SELECT BEZ_1 FROM ARTIKEL_STAMM s WHERE s.ARTNR = m.UNTER_ARTNR),'''+GetStdRes(frs_STD_StammsatzFehlt)+'''),'
                 +'"BEZ_2" = ISNULL((SELECT BEZ_2 FROM ARTIKEL_STAMM s WHERE s.ARTNR = m.UNTER_ARTNR),'''+GetStdRes(frs_STD_StammsatzFehlt)+''') '
                 + 'FROM ARTIKEL_MINISET m '
                 +' WHERE m.ARTNR = '''+CurrArtnr+'''  '
                 +'ORDER BY m.ARTNR, NUMMER, UNTER_ARTNR ');
          //if not Prepared then
          //   Prepared := true;
          //ParamCheck := false;
     end; //** with AQY_MiniSet do

with AQY_Lieferant do
     begin
          if Active then
             Close;
          ParamCheck := true;
          SQL.Clear;
          SQL.Add(' SELECT *, "LIEF_NAME" = ISNULL(ad.KB,'''+GetStdRes(frs_STD_StammsatzFehlt)+''') FROM ARTIKEL_LIEFERANT l '
                  +' LEFT JOIN '+AdrDB+' ad ON ad.KUNU = l.KUNU '
                  +' WHERE ARTNR = :ARTNR '
                  +'ORDER BY ARTNR, NUMMER ');
          if not Prepared then
             Prepared := true;
          ParamCheck := false;
     end; //** with AQY_Lieferant do

with AQY_Zusatztexte do
     begin
          if Active then
             Close;
          ParamCheck := true;
          SQL.Clear;
          SQL.Add('SELECT INHALT, SPRACHE FROM ARTIKEL_ZUSATZTEXT WHERE ARTNR = :ARTNR '
                 +'ORDER BY SPRACHE');
          if not Prepared then
             Prepared := true;
          ParamCheck := false;
     end; //** with AQY_Zusatztexte do

with AQY_FremdTexte do
     begin
          if Active then
             Close;
          ParamCheck := true;
          SQL.Clear;
          SQL.Add('SELECT * FROM ARTIKEL_TEXTE WHERE ARTNR = :ARTNR '
                 +'ORDER BY ARTNR, SPRACHE ');
          if not Prepared then
             Prepared := true;
          ParamCheck := false;
     end; //** with AQY_FremdTexte do

with AQY_DVKalk do
     begin
          if Active then
             Close;
          ParamCheck := true;
          SQL.Clear;
          SQL.Add('SELECT * FROM ARTIKEL_KALKULATION WHERE ARTNR = :ARTNR '
                 +'AND NUMMER < 100 ORDER BY ARTNR, NUMMER ');
          if not Prepared then
             Prepared := true;
          ParamCheck := false;
     end; //** with AQY_DVKalk do

with AQY_Preise do
     begin
          if Active then
             Close;
          ParamCheck := true;
          SQL.Clear;
          SQL.Add('SELECT ARTNR, ART, WS, VK_1, VK_2, VK_3, VK_4, '
                 +'VK_5, VK_6, VK_7, VK_8, VK_9, VK_10, LE_PREIS_UPDATE FROM ARTIKEL_PREISE WHERE ARTNR = :ARTNR '
                 +'ORDER BY ARTNR, ART, WS ');
          if not Prepared then
             Prepared := true;
          ParamCheck := false;
     end; //** with AQY_Preise do

with AQY_SoPreise do
     begin
          if Active then
             Close;
          SQL.Clear;
     end; //** with AQY_SoPreise do

with AQY_SumBestand do
     try
        if Active then
           Close;
        ParamCheck := true;
        SQL.Clear;
        {vorbereitet auf OM Klebetechnik
        if GetLinkagePointer^.Serial = KSerial_SHB then
           begin
           AQY_SumBestand.Parameters.Clear;
           SQL.Add('DECLARE @ARTNR NVARCHAR(30) SELECT @ARTNR = :ARTNR '
                  +'SELECT '
                  +'"SUM_BESTAND" = sum(l.BESTAND)-(SELECT ISNULL(sum(d.BESTAND), 0.00) FROM ARTIKEL_LAGER d (NOLOCK) WHERE (d.ARTNR = @ARTNR AND (d.LAGER = 1 OR d.LAGER = -1))), '
                  +'"SUM_BESTELLT" = sum(l.BESTELLT), '
                  +'"SUM_RUECKSTAND" = sum(l.RUECKSTAND), '
                  +'"SUM_MIBEST" = sum(l.MIBEST), '
                  +'"SUM_SOLLBEST" = sum(l.SOLLBEST), '
                  +'"SUM_BBK" = sum(l.BBK), '
                  +'"SUM_DAVOS_BESTELLT" = (SELECT CONVERT(DECIMAL(13,2), ISNULL(sum(CASE WHEN (k.PLAN_MENGE - k.IST_MENGE) < 0 THEN 0 ELSE (k.PLAN_MENGE - k.IST_MENGE) END),0)) FROM DV_FE_KOPF k (NOLOCK) WHERE (k.ARTNR = @ARTNR)), '
                  +'"SUM_DAVOS_RUECKSTAND" = (SELECT CONVERT(DECIMAL(13,2), ISNULL(sum(x.PLAN_ENTNAHME - x.IST_ENTNAHME),0.0)) FROM DV_FE_POSTEN x (NOLOCK) WHERE (x.ARTNR = @ARTNR AND x.ART = ''L'' AND x.PLAN_ENTNAHME > x.IST_ENTNAHME)), '
                  +'"SUM_RESERVIERT"= '
                  +' (SELECT ISNULL(sum(a.GELIEFERT), 0.00) FROM AUFTRAG_POSTEN a (NOLOCK) WHERE (a.ART = ''A'' AND a.ZEILEN_ART = ''L'' AND a.ARTNR = @ARTNR)) '
                  +'+(SELECT ISNULL(sum(d.BESTAND), 0.00) FROM ARTIKEL_LAGER d (NOLOCK) WHERE (d.ARTNR = @ARTNR AND d.LAGER = -1)) '
                  +'+(SELECT ISNULL(sum(p.ABRUFMENGE), 0.00) FROM VDA_ABRUF_POSTEN p (NOLOCK) '
                  +'                                              LEFT OUTER JOIN VDA_ABRUF_KOPF k (NOLOCK) ON (p.NUMMER = k.NUMMER) '
                  +'  WHERE (k.ARTNR = @ARTNR) AND (k.TESTKENNZEICHEN = 0) AND (p.GELIEFERT_FLAG = ''J'')) '
                  +'+(SELECT ISNULL(sum(g.GELIEFERT),0.00) FROM PACKMITTEL_ARTNR_GELIEFERT g (NOLOCK) WHERE (g.ARTNR = @ARTNR)) '
                  +'FROM ARTIKEL_LAGER l (NOLOCK) WHERE (l.ARTNR = @ARTNR)');
                  if not Prepared then
                     Prepared := true;
                  AQY_SumBestand.Parameters.Items[0].DataType := ftWidestring;
                  AQY_SumBestand.Parameters.Items[0].Name := 'ARTNR';
                  AQY_SumBestand.Parameters.Items[0].Size := 30;
                  AQY_SumBestand.Parameters.Items[0].Direction := pdInput;
                  AQY_SumBestand.Parameters.Items[0].NumericScale := 255;
                  AQY_SumBestand.Parameters.Items[0].Precision := 255;

           end
        else
        }
        if (GetLinkagePointer^.Module[imDAVOS]) then
           SQL.Add('GP_SUMMEN_LAGER_MIT_DAVOS :ARTNR ')
        else
           SQL.Add('GP_SUMMEN_LAGER :ARTNR ');
        if not Prepared then
           Prepared := true;
        ParamCheck := false;
     except
        on E:Exception do
           ShowMessage(E.Message);
     end; //** try..except with AQY_SumBestand do

with AQY_Umsatz do
     try
        if Active then
           Close;
        ParamCheck := true;
        SQL.Clear;
        SQL.Add('GP_SUMMEN_LAGERUMSATZ :ARTNR ');
        if not Prepared then
           Prepared := true;
        ParamCheck := false;
     except
        on E:Exception do
           ShowMessage(E.Message);
     end; //** try..except with AQY_Umsatz do

with AQY_Bild do
     try
        if Active then
           Close;
        ParamCheck := true;
        SQL.Clear;
        SQL.Add('SELECT FILE_INHALT, FILE_NAME FROM ARTIKEL_FILE WHERE ARTNR = :ARTNR AND '
               +'(UPPER(FILE_NAME) LIKE ''%.BMP%'' OR '
               +' UPPER(FILE_NAME) LIKE ''%.JPG%'' OR '
               +' UPPER(FILE_NAME) LIKE ''%.JPEG%'' OR '
               +' UPPER(FILE_NAME) LIKE ''%.GIF%'' OR '
               +' UPPER(FILE_NAME) LIKE ''%.TIF%'' OR '
               +' UPPER(FILE_NAME) LIKE ''%.PNG%'' OR '
               +' UPPER(FILE_NAME) LIKE ''%.TIFF%'' ) '
               +' ORDER BY FILE_NAME ');
        if not Prepared then
           Prepared := true;
        ParamCheck := false;
     except
        on E:Exception do
           ShowMessage(E.Message);
     end; //** try..except with AQY_Bild do

with AQY_IBExist do
     try
        if Active then
           Close;
        ParamCheck := true;
        SQL.Clear;
        SQL.Add('SELECT ART FROM INFOBLATT WHERE ((ART=''L'') AND (SCHLUESSEL = :SCHLUESSEL)) ');
        if not Prepared then
           Prepared := true;
        ParamCheck := false;
     except
        on E:Exception do
           ShowMessage(E.Message);
     end; //** with AQY_IBExist do

with AQY_DVFehlmengen do
     try
        if Active then
           Close;
        if GetLinkagePointer^.Module[imDAVOS] then
           begin
                ParamCheck := true;
                SQL.Clear;
                SQL.Add('SELECT * FROM DV_SL_FEHLMENGEN WHERE ARTNR = :ARTNR ');
                if not Prepared then
                   Prepared := true;
           end; //** if GetLinkagePointer^.Module[imDAVOS] then
        ParamCheck := false;
     except
        on E:Exception do
           ShowMessage(E.Message);
     end; //** with AQY_DVFehlmengen do

with AQY_GetLamps do
     begin
          if Active then
             Close;
          ParamCheck := true;
          SQL.Clear;
          SQL.Add(BuildGetLampsSelect);
          if not Prepared then
             Prepared := true;
          ParamCheck := false;
          for i := 0 to Parameters.Count -1 do
              Parameters.Items[i].DataType := ftWideString;
     end; //** with AQY_GetLamps do

with AQY_GetXRef do
     begin
          if Active then
             Close;
          ParamCheck := true;
          SQL.Clear;
          SQL.Add(BuildGetXRefSelect);
          if not Prepared then
             Prepared := true;
          ParamCheck := false;
          for i := 0 to Parameters.Count -1 do
              Parameters.Items[i].DataType := ftWideString;
     end; //** with AQY_GetXRef do

with AQY_Badges do
     begin
          if Active then
             Close;
          ParamCheck := true;
          SQL.Clear;
          SQL.Add(BuildGetBadgesSelect);
          if not Prepared then
             Prepared := true;
          ParamCheck := false;
          for i := 0 to Parameters.Count -1 do
              Parameters.Items[i].DataType := ftWideString;
     end; //** with AQY_GetBadges do

with AQY_HinweiseExists do
     begin
          if Active then
             Close;
          ParamCheck := true;
          SQL.Clear;
          SQL.Add('SELECT ART, SCHLAGWORT_1 FROM INFOBLATT WHERE ((ART = ''w'') AND (SCHLUESSEL = :SCHLUESSEL)) ');
          if not Prepared then
             Prepared := true;
          ParamCheck := false;
     end; //** with AQY_HinweiseExists do

with AQY_DVRueckstaende do
     try
        if Active then
           Close;
        if GetLinkagePointer^.Module[imDAVOS] then
           begin
                SQL.Clear;
                SQL.Add(' SELECT "ANZAHL" = sum(zz.BARCODE) FROM ' +
                        ' ( SELECT ' +
                        '  "BARCODE" = COUNT(a.BARCODE) ' +
                        '  FROM DV_FE_POSTEN a ' +
                        '  JOIN DV_FE_KOPF b ON (a.KUNU = b.KUNU AND a.NUMMER = b.NUMMER AND a.BARCODE = b.BARCODE) ' +
                        '  WHERE a.ARTNR = ''' + CurrArtNr + ''' ' +
                        '  AND a.IST_ENTNAHME < a.PLAN_ENTNAHME AND a.ART =''L'' ' +

                        ' UNION ALL ' +
                        ' SELECT ' +
                        ' "BARCODE" = COUNT(a.BARCODE) ' +
                        ' FROM DV_FE_POSTEN a ' +
                        ' JOIN DV_AUFTRAG_SL b ON (a.BARCODE = b.BARCODE) AND b.MENGE > 0 ' +
                        ' JOIN DV_FE_KOPF c ON (a.KUNU = c.KUNU AND a.NUMMER = c.NUMMER AND a.BARCODE = c.BARCODE) ' +

                        ' WHERE a.ART = ''S'' ' +
                        ' AND b.UMGEBUCHT_ABSOLUT < b.MENGE * a.PLAN_MENGE ' +
                        ' AND b.ARTNR = ''' + CurrArtNr + ''' )' +

                        ' AS zz');
           end; //** if GetLinkagePointer^.Module[imDAVOS] then
     except
        on E:Exception do
           ShowMessage(E.Message);
     end; //** with AQY_DVFehlmengen do

end; //** procedure InitQueriesAndDBs


(******************************************************************************)
(***      InitQuersprungleiste                                              ***)
(******************************************************************************)

procedure TFRM_dobosLV.InitQuersprungleiste;
begin

BTN_ArtikelZusatzinfos.LargeGlyph := BTN_InfoDummyOhneBadges.LargeGlyph;
BTN_Dokumente.LargeGlyph := BTN_DokumenteDummyOhneBadges.LargeGlyph;

BTN_LoadAU.Caption := rs_LV_AUAGStartCaption;
BTN_LoadBE.Caption := rs_LV_AFBEStartCaption;
BTN_LoadKontrakte.Caption := rs_LV_KontrakteStartCaption;
BTN_LoadRO.Caption := rs_LV_ReparaturAuftraegeStartCaption;
BTN_LoadFE.Caption :=rs_LV_FEStartCaption;
BTN_LoadAP.Caption :=rs_LV_APStartCaption;
BTN_LoadFehlmengen.Caption := rs_LV_FehlmengenStartCaption;
BTN_LoadAuftragsrueckstaende.Caption := rs_LV_AuftragsrueckstaendeStartCaption;
BTN_Vorgaenge.Hint := rs_LV_VorgaengeStartHint;
BTN_Dispo.Hint := rs_LV_DispoStartHint;
BTN_Fertigung.Hint := rs_LV_FAStartHint;
SetVorgaengeButtonGlyphs(0,0);
SetFertigungButtonGlyphs(0,0);
SetDispositionButtonGlyphs(0,0);
SetStuecklistenButtonGylphs(false);

end; //** procedure InitQuersprungleiste

(******************************************************************************)
(***    OpenDataSources                                                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.OpenDataSources;
begin

ArtNrEntryZwang := false;
if not DTS_Open then
   try
      DTS_ArtikelStamm.Enabled := true;
      DTS_Preise.Enabled := true;
      DTS_Lieferant.Enabled := true;
      DTS_FremdTexte.Enabled := true;
      DTS_MiniSet.Enabled := true;
      DTS_Lager.Enabled := true;
      DTS_Umsatz.Enabled := true;
      DTS_SumBestand.Enabled := true;
      BTN_Bookmark.Enabled := true;
      SetzeKey;
      DTS_Open := true;
   except
      raise;
   end; //** try..except

MNI_Sichten.Enabled := true;
UpdatePreiseButtons;
UpdateLiefButtons;
UpdateMiniSetButtons;
UpdateLagerButtons;
UpdateDVKalkButtons;

end; //** procedure OpenDataSources


(******************************************************************************)
(***      OpenSoPreise                                                      ***)
(******************************************************************************)

procedure TFRM_DobosLV.OpenSoPreise(const AArtNr : string);
var
   AdrDB : string;

begin

AdrDB := 'ADRESSEN';
with GetLinkagePointer^.MRecord do
     if Mandant > 1 then
        if Adressen_m01 = 'J' then
           AdrDB := 'M01.dbo.ADRESSEN';

with AQY_Sopreise do
     try
        if Active then
           Close;
        SQL.Clear;
        if not IsSpace(AArtNr) then
           begin
                SQL.Add('SELECT p.KUNU, '
                       +'"NAME" = (SELECT a.KB FROM '+AdrDB+' a WHERE a.KUNU = p.KUNU), '
                       +'p.PREIS, p.RABATT, p.WS, p.SACHTEXT_1, p.SACHTEXT_2, p.DATUM, p.BIS_DATUM, '
                       +'p.RASTER, p.PREIS_2, p.PREIS_3, p.PREIS_4, p.PREIS_5, p.PREIS_6, p.PREIS_7, p.PREIS_8, p.PREIS_9, p.PREIS_10 '
                       +'FROM SONDER_PREISE p (NOLOCK) '
                       +'WHERE ARTNR = '''+SqlTextString(AnsiUpperCase(TrimRight(AArtNr)))+''' '
                       +'ORDER BY p.KUNU ');
                UCOpenSQL(AQY_Sopreise);
           end; //** if not IsSpace(AArtNr)

     except
        on E:Exception do
           ShowMessage(E.Message);
     end; //** try..except

end; //** procedure OpenSoPreise


(******************************************************************************)
(***    CloseDataSources                                                    ***)
(******************************************************************************)

procedure TFRM_DobosLV.CloseDataSources;
begin

ArtNrEntryZwang := false;
if DTS_Open then
   try
      DTS_Open := false;
      DTS_SumBestand.Enabled := false;
      DTS_MiniSet.Enabled := false;
      DTS_Lager.Enabled := false;
      DTS_Umsatz.Enabled := false;
      DTS_Lieferant.Enabled := false;
      DTS_FremdTexte.Enabled := false;
      DTS_Preise.Enabled := false;
      DTS_ArtikelStamm.Enabled := false;
      BTN_Bookmark.Enabled := false;
      BTN_Bookmark.down := false;
      EDT_ArtNr.Text := '';
      EDT_KB.Text := '';
      EDT_BN.Text := '';
      EDT_ZN.Text := '';
      EDT_Bez_1.Text := '';
   except
      raise;
   end; //** try..except

MNI_Sichten.Enabled := false;
UpdatePreiseButtons;
UpdateLiefButtons;
UpdateMiniSetButtons;
UpdateLagerButtons;
UpdateDVKalkButtons;
SMText := '';

end; //** procedure CloseDataSources


(******************************************************************************)
(***  Setzen Key                                                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.SetzeKey;
begin

LYC_Lagerverwaltung.BeginUpdate;

LYI_Artikelnummer.LayoutLookAndFeel    := LAF_CaptionUnderline;
LYI_Kurzbezeichnung.LayoutLookAndFeel  := LAF_CaptionUnderline;
LYI_Bestellnummer.LayoutLookAndFeel    := LAF_CaptionUnderline;
LYI_Zeichnungsnummer.LayoutLookAndFeel := LAF_CaptionUnderline;
LYI_Bezeichnung1.LayoutLookAndFeel     := LAF_CaptionUnderline;

case Sortorder of
     asArtNr: LYI_Artikelnummer.LayoutLookAndFeel    := LAF_CaptionUnderlineAndBold;
     asKB   : LYI_Kurzbezeichnung.LayoutLookAndFeel  := LAF_CaptionUnderlineAndBold;
     asBN   : LYI_Bestellnummer.LayoutLookAndFeel    := LAF_CaptionUnderlineAndBold;
     asZN   : LYI_Zeichnungsnummer.LayoutLookAndFeel := LAF_CaptionUnderlineAndBold;
     asBez_1: LYI_Bezeichnung1.LayoutLookAndFeel     := LAF_CaptionUnderlineAndBold;
end; //** case Sortorder of

MEOF := false;
MBOF := false;
UpdateButtons;
LYC_Lagerverwaltung.EndUpdate();

end; //** procedure SetzeKey


(******************************************************************************)
(***  Artikel-Table auf ArtNr aus Keylist positionieren                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.MoveToKey;
var
   ArtNr: TUCStringArtNr;
   x    : PLagerMemKey;

begin

inherited;
OpenDataSources;
CheckNebenTabellen(true);

if SortOrder <> asArtNr then
   begin
        SortOrder := asArtNr;
        SetzeKey;
   end; //** if SortOrder <> asArtNr

try
   x := KeyList.items[KeyIndex];
   ArtNr := x.MArtNr;
   if not PosMain(ArtNr, '', mpExact, false) then
      raise EAbort.Create(rs_LV_KonnteStammsatzNichtFinden);

except
end; //** try..except

if DauerAendern then
   begin
        SetAbbButtonVisible(false);
   end; //** if DauerAendern

end; //** procedure MoveToKey;


(******************************************************************************)
(***  !SUpdateButtons je nach Programmstatus aktivieren/deaktivieren        ***)
(******************************************************************************)

procedure TFRM_DobosLV.UpdateButtons;
var
   ArtOK   : boolean;
   AValues : array [0..0] of Variant;
   st      : integer;
   i1,i2   : integer;
begin

try
   //LYC_Lagerverwaltung.BeginUpdate;
   //BMG_DllForm.BeginUpdate;
   //UIA_AdornerLV.BeginUpdate;

   CheckAndSetTabCaption;

   ArtOK := ((AQY_ArtikelStamm.Active) and
             (AQY_ArtikelStamm.RecordCount > 0));

   EDT_KB.BIOSAllowSearch := ((not((Erfassen) or (Aendern))) and
                              (MNI_EnableBIOSSearch.Checked));
   EDT_BEZ_1.BIOSAllowSearch := EDT_KB.BIOSAllowSearch;
   EDT_BN.BIOSAllowSearch := EDT_KB.BIOSAllowSearch;
   EDT_ZN.BIOSAllowSearch := EDT_KB.BIOSAllowSearch;
   EDT_ArtNr.BIOSAllowSearch := EDT_KB.BIOSAllowSearch;

   MNI_SiDispo.Enabled := (ArtOK);

   MNI_InsertBPool.Enabled := ((ArtOK) and
                               ((GetLinkagePointer^.PRIV_BW = Ja) or (GetLinkagePointer^.PRIV_DV_MEISTER = Ja)));

   MNI_MassenAnfrageInsertBPool.Enabled := (MNI_InsertBPool.Enabled);// and
                                            //(Assigned(AQY_Lieferant)) and
                                            //(AQY_Lieferant.Active) and
                                            //(AQY_Lieferant.RecordCount > 0);

   BTN_ArtikelToBestellpool.Enabled := MNI_InsertBPool.Enabled;
   BTN_MassenAnfrageBPool.Enabled := MNI_MassenAnfrageInsertBPool.Enabled;

   if (Assigned(ExternArtNrNeuList)) and (ExternArtNrNeuList.Count > 0) then
      STB_DLLChild.Panels[0].Text := IntToStr(ExternArtNrNeuList.Count)
   else
      STB_DLLChild.Panels[0].Text := '';

   BTN_Bookmark.Enabled := ((DTS_Open) and (ArtOK));
   BTN_MarkSmall.Enabled := ((DTS_Open) and (ArtOK));
   BTN_NavRefresh.Enabled := (DTS_Open) and (ArtOK);
   BTN_LoadOutlook.Enabled := ((not (Erfassen)) and (ArtOK));

   EDT_KB.PopupMenu := nil;                                    //** 03.2014

   BTN_NavFirst.Enabled := (not MBOF);
   BTN_NavPrior.Enabled := (not MBOF);
   BTN_NavNext.Enabled := (not MEOF);
   BTN_NavLast.Enabled := (not MEOF);

   if ((Erfassen) or (Aendern)) then
      begin
           if (GetLinkagePointer^.Serial = KSerial_Reuss) then //** 03.2014
              EDT_KB.PopupMenu := PUM_KB;                      //** 03.2014
           MNI_TexteUebersetzenDeepL.Enabled := true;
           MNI_FliessText.Enabled := true;
           BTN_MakeVorgaenge.Enabled := false;
           BTN_NavRefresh.Enabled := false;
           BTN_MarkSmall.Enabled := false;
           SetAbbButtonVisible(true);
           EDT_ArtNr.ShowHint := false;
           EDT_KB.ShowHint := false;
           EDT_BN.ShowHint := false;
           EDT_ZN.ShowHint := false;
           EDT_Bez_1.ShowHint := false;
           BTN_Bookmark.Enabled := false;
           //** 11.1
           SBT_InternetLink.Enabled := true;

           //** Änderung 5)
           //** Ist im UpdateLiefButtons drinnen
           //SBT_LiefInternetLink.Enabled := true;
           //** Änderung 5)

           //** Änderung 3)
           //** Statt lookup false nur den button disablen schaut eh besser aus
           //** und das layoutcontrol zeichnet nicht neu
           {
           //** Problem: in XE5 feuert der Lookup = fals (wenn vorher true)
           //** den OnExit - und der reagiert beim ersten RecordCopy
           //** dann falsch, DTS_ArtikelStamm = dsinactive
           try
              EDT_ArtNr.OnExit := nil;
              EDT_ArtNr.LookUp := false;
              EDT_ArtNr.OnExit := EDT_ArtNrExit;
           except
           end; //** try..except
           }
           EDT_ArtNr.LookupButton.Enabled := false;

           {EDT_KB.LookUp := false;
           EDT_BN.LookUp := false;
           EDT_ZN.LookUp := false;
           EDT_Bez_1.LookUp := false;}

           EDT_KB.LookupButton.Enabled := false;
           EDT_BN.LookupButton.Enabled := false;
           EDT_ZN.LookupButton.Enabled := false;
           EDT_Bez_1.LookupButton.Enabled := false;

           //** Änderung 3)

           BTN_DBNavPost.Enabled := true;
           BTN_DBNavAbbrechen.Enabled := true;

           BTN_LoadErwSucheLV.Enabled := false;

      end //** if ((Erfassen) or (Aendern)) then
   else
      begin
           MNI_TexteUebersetzenDeepL.Enabled := ((DTS_Open) and (ArtOK)
                                                and (GetLinkagePointer^.PRIV_AENDERN in ['J', 'L'])
                                                and (GetLinkagePointer^.PRIV_Nur_Sichten <> ja));
           MNI_FliessText.Enabled := false;
           BTN_MakeVorgaenge.Enabled := ((DTS_Open) and (ArtOK));
           //BTN_DBNavPost.Enabled := false;
           SetAbbButtonVisible(false);
           EDT_ArtNr.ShowHint := true;
           EDT_KB.ShowHint := true;
           EDT_BN.ShowHint := true;
           EDT_ZN.ShowHint := true;
           EDT_Bez_1.ShowHint := true;
           BTN_Bookmark.Enabled := ((DTS_Open) and (ArtOK));

           //** Änderung 3)
           //** siehe oben (nur button disablen)
           {
           EDT_ArtNr.LookUp := true;
           EDT_KB.LookUp := true;
           EDT_BN.LookUp := true;
           EDT_ZN.LookUp := true;
           EDT_Bez_1.LookUp := true;
           }
           EDT_ArtNr.LookupButton.Enabled := true;
           EDT_KB.LookupButton.Enabled := true;
           EDT_BN.LookupButton.Enabled := true;
           EDT_ZN.LookupButton.Enabled := true;
           EDT_Bez_1.LookupButton.Enabled := true;
           //** Änderung 3)

           BTN_DBNavPost.Enabled := false;
           BTN_DBNavAbbrechen.Enabled := false;

           BTN_LoadErwSucheLV.Enabled := true;

      end; //** else von if ((Erfassen) or (Aendern))

   BTN_LoadZusatzDokumente.Enabled := (((DTS_Open) and (ArtOK)) or ((Erfassen) and (not IsSpace(AQY_ArtikelStammARTNR.AsString))));
   BTN_LoadZusatzTexte.Enabled := (((DTS_Open) and (ArtOK)) or ((Erfassen) and (not IsSpace(AQY_ArtikelStammARTNR.AsString))));

   BTN_RKMViewer.Enabled := ((BTN_RKMViewer.Visible = ivAlways) and
                             (BTN_LoadWichtigeHinweise.Enabled));


   if Erfassen then
      begin
           BTN_AllgDauerEdit.Enabled := false;
           BTN_AllgEditDauerEdit.Enabled := false;
           BTN_DBNavPost.Enabled := not IsSpace(EDT_ArtNr.Text);
           EDT_ArtNr.Enabled := true;
      end; //** if Erfassen

   if Aendern then
      begin
           BTN_AllgNeuKopieren.Enabled := false;
           BTN_AllgEditDauerEdit.Down := true;
           EDT_ArtNr.Enabled := false;
           if not DauerAendern then
              begin
                   BTN_AllgDauerEdit.Enabled := false;
                   BTN_AllgEditDauerEdit.Caption := rs_LV_Editieren;
              end  //** Not DauerAendern
           else
              begin
                   if (not (AQY_ArtikelStamm.Modified)) then
                      BTN_DBNavPost.Enabled := false;
                   BTN_AllgDauerEdit.Enabled := true;
                   BTN_AllgEditDauerEdit.Caption := rs_LV_DauerEdit;
               end; //** if Aendern
      end; //** if Aendern then

   if ((not (DauerAendern)) and ((not (Aendern)))) then
      begin
           BTN_AllgEditDauerEdit.Caption := rs_LV_Editieren;
           BTN_AllgEditDauerEdit.Down := false;
           BTN_AllgDauerEdit.Down := false;
           EDT_ArtNr.Enabled := true;
           if (Erfassen)then
              begin
                   BTN_AllgEditDauerEdit.Enabled := false;
                   BTN_AllgDauerEdit.Enabled := false;
                   if not IsSpace(LastErfassenSemaphore) then
                      EDT_ArtNr.Enabled := false;

              end //** if Erfassen
           else
              begin
                   BTN_AllgEditDauerEdit.Enabled := true;
                   BTN_AllgDauerEdit.Enabled := true;
              end; //** else
      end; //** if ((not (DauerAendern)) and ((not (Aendern)))) then

   with GetLinkagePointer^ do
        begin
             BTN_AllgDauerEdit.Enabled := (((DTS_Open) and (ArtOK)) and
                                            (PRIV_AENDERN in ['J', 'L']) and
                                            (PRIV_Nur_Sichten <> ja) and
                                            (not Erfassen));

             BTN_AllgEditDauerEdit.Enabled := BTN_AllgDauerEdit.Enabled;

             BTN_AllgNeuKopieren.Enabled := ((DTS_Open) and
                                             (PRIV_ERFASSEN in ['J', 'L', 'l','b','x','y']) and
                                             (PRIV_Nur_Sichten <> ja) and
                                             (not Aendern) and
                                             (not DauerAendern));

             BTN_AllgLoeschen.Enabled := (((DTS_Open) and (ArtOK)) and
                                           (PRIV_LOESCHEN in ['J', 'L']) and
                                           (PRIV_Nur_Sichten <> ja) and
                                           (not Erfassen) and
                                           (not Aendern) and
                                           (not DauerAendern) and
                                           (AQY_ArtikelStamm.State = dsBrowse));

             ACT_MakeFE.Enabled := (Module[imDAVOS]);
             ACT_MakeAP.Enabled := (Module[imDAVOS]);
             ACT_MakeSL.Enabled := (Module[imSL]);
        end; //** with GetLinkagePointer^ do

   MNI_SaveSelect.Enabled := ((not Erfassen) and
                              (not Aendern) and
                              (not DauerAendern) and
                              (Assigned(KeyList)) and
                              (KeyList.Count > 0));
   ACT_MakeAUMany.Enabled := ((MNI_SaveSelect.Enabled) and (KeyList.Count > 1) and (KeyList.Count < 101));
   ACT_MakeAGMany.Enabled := ACT_MakeAUMany.Enabled;
   ACT_MakeBEMany.Enabled := ACT_MakeAUMany.Enabled;
   ACT_MakeAFMany.Enabled := ACT_MakeAUMany.Enabled;

   MNI_LoadSelect.Enabled := ((not Erfassen) and
                              (not Aendern) and
                              (not DauerAendern) and
                              (Assigned(KeyList)));

   MNI_DeleteSet.Enabled := MNI_LoadSelect.Enabled;

   with GetLinkagePointer^ do
        begin
             if (PRIV_NUR_SICHTEN = Ja) then
                begin
                     MNI_DeleteSet.Enabled := false;
                     MNI_SaveSelect.Enabled := false;
                end; //** if (PRIV_NUR_SICHTEN = Ja)

             BTN_MakeKontrakt.Enabled := ((Module[imVDA]) and (Module[imDobos]));

             BTN_LoadDruck.Enabled := ((not Erfassen) and
                                     (not Aendern) and
                                     (not DauerAendern));
             BTN_LoadInventur.Enabled := BTN_LoadDruck.Enabled;
             BTN_LoadBestandsKorrektur.Enabled := BTN_LoadDruck.Enabled;
             BTN_LoadPreisKalkulation.Enabled := BTN_LoadDruck.Enabled;

             BTN_LoadIB.Enabled := ((DTS_Open) and (ArtOK));
             BTN_LoadWichtigeHinweise.Enabled := ((DTS_Open) and (ArtOK));

             BTN_LoadAU.Enabled   := ((not Erfassen) and
                                         (not Aendern) and
                                         ((DTS_Open) and (ArtOK)) and
                                         (Module[imDobos]) and
                                         (not VorjahrAktiv));

             BTN_LoadVertraege.Enabled   := ((BTN_LoadAU.Enabled) and (Module[imWV]));
             BTN_LoadKontrakte.Enabled   := ((BTN_LoadAU.Enabled) and (Module[imVDA]));

             BTN_LoadRO.Enabled        := ((BTN_LoadAU.Enabled) and (Module[imSTBMO]));

             BTN_LoadBE.Enabled  := BTN_LoadAU.Enabled;
             BTN_LoadSM.Enabled   := BTN_LoadAU.Enabled;
             BTN_LoadSonderpreise.Enabled     := (BTN_LoadAU.Enabled);

             BTN_LoadDocViewer.Enabled := BTN_LoadAU.Enabled;

             //** 11.1
             SBT_InternetLink.Enabled := ( (Erfassen) or (Aendern) or
                                           (AQY_ArtikelStamm.Active) and (AQY_ArtikelStammHYPERLINK.AsInteger > 0));
             
             MNI_DrDocSichten.Enabled := ((BTN_LoadDocViewer.Enabled) and (Module[imDrDoc]));
             MNI_DrDocArchivieren.Enabled := ((BTN_LoadDocViewer.Enabled) and (AskDrDocFileOutput (tDrDocAllgemein)));
             if ((not (PRIV_AENDERN in [ja, 'L'])) or (PRIV_NUR_SICHTEN = Ja)) then
                MNI_DrDocArchivieren.Enabled := false;

             BTN_LoadDrDoc.Enabled := MNI_DrDocSichten.Enabled;
             BTN_DrDocArchiv.Enabled := MNI_DrDocArchivieren.Enabled;

             if ((not (PRIV_AENDERN in [ja, 'L'])) or (PRIV_NUR_SICHTEN = Ja)) then
                MNI_ArtikelTab.Visible := false;

             MNI_ArtikelTab.Enabled := ((not Erfassen) and (not Aendern));

             BTN_LoadFE.Enabled     := ((BTN_LoadAU.Enabled) and
                                           (Module[imDavos]));
             BTN_LoadFEArchiv.Enabled := ((BTN_LoadAU.Enabled) and
                                           (Module[imDavos]) and
                                           (PRIV_DV_ARCHIV = Ja) and
                                           (Module[imDVFA]));
             BTN_LoadStrukturstueckliste.Enabled  := ((BTN_LoadAU.Enabled) and
                                           (Module[imSL]) and
                                           (AQY_ArtikelStamm.Active) and
                                           (AQY_ArtikelStammSL_JN.AsString = 'J'));
             BTN_LoadSX.Enabled := BTN_LoadStrukturstueckliste.Enabled;     //** 11.1 SM

             if DoXRefSelect then
                BTN_LoadXref.Enabled        := ((BTN_LoadAU.Enabled) and
                                           //** jetzt immer frei, da auch als Posten im AP gelistet wird
                                           //(BTN_LoadXref.Tag = 1) and  //** 9.3 Trick!!, in AQY_GetLamps versorgt
                                           (Module[imSL]) and
                                           (AQY_GetXRefCOUNTXREF.AsInteger > 0))
             else
                BTN_LoadXref.Enabled        := ((BTN_LoadAU.Enabled) and
                                           (Module[imSL]));

             BTN_LoadAKK.Enabled       := (BTN_LoadAU.Enabled);
             BTN_LoadSN.Enabled      := ((BTN_LoadAU.Enabled) and
                                           (Module[imSN]));

             BTN_LoadDruckEtikett.Enabled  := (((not Erfassen) and
                                            (not Aendern) and
                                            ((BGP_SelNavBarGruppe.Visible = ivAlways) and (KeyList.Count > 0))) or
                                            (ArtOK));
             BTN_LoadNettobedarf.Enabled :=  ((BTN_LoadAU.Enabled) and
                                           (Module[imNB]));
             BTN_LoadNeBedarfPool.Enabled := BTN_LoadNettobedarf.Enabled;
             BTN_NettobedarfspoolAlle.Enabled := (Module[imNB]);

             BTN_Packmittelverwaltung.Enabled := Module[imPV];
             BTN_PMBeimKunden.Enabled := BTN_Packmittelverwaltung.Enabled;
             BTN_LoadKuSpezPackmittel.Enabled := BTN_Packmittelverwaltung.Enabled;
             BTN_LoadPackmittelStruktur.Enabled := BTN_Packmittelverwaltung.Enabled;

             BTN_LoadAR.Enabled := ((ArtOK) and
                            ((GetLinkagePointer^.Module[imAR]) or
                             (GetLinkagePointer^.Module[imBA]) or
                             (GetLinkagePointer^.Module[imAA])));

             BTN_LoadArtikelArchiv.Enabled := ((ArtOK) and
                                  (GetLinkagePointer^.Module[imArtikelArchiv]) and
                                  (((GetLinkagePointer^.PRIV_EK = Ja) and (GetLinkagePointer^.PRIV_VK = Ja)
                                  or
                                  (GetLinkagePointer^.PRIV_SysVW = Ja))));


             //** 14.09.2018 SM
             BTN_LoadChaotLager.Enabled := (Module[imCL] and (ArtOK)
                                             and (PRIV_CL = 'J')   //** 07.11.2018 SM
                                             and (not Erfassen)
                                             and (AQY_CHLagerSumBestandCL.AsCurrency <> 0.00)
                                             and (AQY_ArtikelStamm.Active)
                                             and (AQY_ArtikelStamm.RecordCount > 0));

             {
             //** 30.10.2018 SM - kann nach Änderung 07.11.2018 eigentlich entfallen
             //**               - Geovision (Hr.Müller - will es aber erst mal noch so programmiert lassen
             if LYG_ChaotischeLager.Visible then
                if PRIV_CL <> 'J' then
                   begin
                        BTN_LoadChaotLager.Enabled := false;
                   end  //** if PRIV_CL <> 'J' then
                else
                   begin
                        BTN_LoadChaotLager.Enabled := true;
                   end; //** else: if PRIV_CL <> 'J' then }

             if Serial = KSerial_Robert_Koch then
                if PRIV_EK <> Ja then
                   begin
                        BTN_LoadAKK.Enabled := false;
                        BTN_LoadAU.Enabled := false;
                        BTN_LoadBE.Enabled := false;
                        BTN_LoadSonderpreise.Enabled := false;
                   end; //** if PRIV_EK <> Ja

             if Serial = KSerial_Biersack then
                begin
                     if Privileg_Level < 7 then
                        BTN_LoadIB.Enabled := false;
                     if Privileg_Level < 6 then
                        begin
                             BTN_LoadZusatzDokumente.Enabled := false;
                             MNI_PflegeBlob.Enabled := false;
                        end;
                end; //**  if Serial = KSerial_Biersack then

             if ((Serial = KSerial_Schweizer) or (Serial = KSerial_Schweda)) then
                if PRIV_VK <> Ja then
                   BTN_LoadIB.Enabled := false;

             MNI_S6.Visible := false;
             MNI_MegamatArtikelExport.Visible := false;
             MNI_FCPOutput.Visible := (HasForeCastPro);
             if ((GetLinkagePointer^.Serial = KSerial_Online) and (AQY_ArtikelStamm.Active)) then
                begin
                     MNI_S6.Visible := true;
                     MNI_MegamatArtikelExport.Visible := true;
                end; //** if GetLinkagePointer^.Serial = KSerial_Online

             if ((GetLinkagePointer^.Serial = KSerial_Yamaichi) and (ArtOK)) then
                begin
                     ACT_MakeFE.Enabled := true;
                     st := 0;
                     if not IsSpace(AQY_ArtikelStammARTNR.AsString) then
                        if ReadAnyFields (GetDobosADB,
                                         'ARTIKEL_STAMM',
                                         'WHERE ARTNR = '''+Trim(AQY_ArtikelStammARTNR.AsString)+''' ',
                                         ['STATUS'],
                                         AValues) then
                           try
                              st := AValues[0];
                           except
                           end; //** try..except

                        if st in [4, 5, 7, 8, 9] then
                           ACT_MakeFE.Enabled := false;
                 end; //** if ((GetLinkagePointer^.Serial = KSerial_Yamaichi) and (ArtOK)) then

             //** Laden Packmittelverwaltung
             MNI_Packmittel.Enabled := false;
             BTN_LoadPackmittelStruktur.Enabled := false; //** 12.0 SM
             if GetLinkagePointer^.Module[imPV] then
                begin
                     MNI_Packmittel.Enabled := ((not Erfassen) and
                                                (not Aendern) and
                                                (not DauerAendern));
                     BTN_LoadPMAllg.Enabled := ((MNI_Packmittel.Enabled) and
                                                ((DTS_Open) and (ArtOK)) and
                                                (AQY_ArtikelStamm.Active) and
                                                (AQY_ArtikelStamm.RecordCount > 0) and
                                                (AQY_ArtikelStammPACKMITTEL_IST_PM.AsString = 'J'));
                     BTN_LoadPackmittelStruktur.Enabled := (((DTS_Open) and (ArtOK)) and                                   //** 12.0 SM
                                                             (AQY_ArtikelStamm.Active) and                                 //** 12.0 SM
                                                             (AQY_ArtikelStamm.RecordCount > 0) and                        //** 12.0 SM
                                                             (AQY_ArtikelStammPACKMITTEL_IST_PM.AsString = 'N') and        //** 12.0 SM
                                                             (AQY_ArtikelstammPACKMITTEL_STUECK_IN_PM.AsInteger <> 0) and  //** 12.0 SM
                                                             (AQY_ArtikelStammPACKMITTEL_VERSION.AsInteger <> 0));         //** 12.0 SM
                end; //** if GetLinkagePointer^.Module[imPV] then

             //** Sichten Packmittel beim Kunden
             MNI_PackmittelKunde.Enabled := false;
             if GetLinkagePointer^.Module[imPV] then
                begin
                     MNI_PackmittelKunde.Enabled :=((not Erfassen) and
                                                    (not Aendern) and
                                                    ((DTS_Open) and (ArtOK)) and
                                                    (not VorjahrAktiv) and
                                                    (AQY_ArtikelStamm.Active) and
                                                    (AQY_ArtikelStamm.RecordCount > 0) and
                                                    (AQY_ArtikelStammPACKMITTEL_IST_PM.AsString = 'J'));
                     BTN_PMBeimKunden.Enabled := MNI_PackmittelKunde.Enabled;
                end; //** if GetLinkagePointer^.Module[imPV] then

             //** Sichten kundenspezifische Packmittel beim Kunden  2015 - SM 11.1
             MNI_SISonderPM.Enabled := false;
             if GetLinkagePointer^.Module[imPV] then
                begin
                     MNI_SISonderPM.Enabled :=((not Erfassen) and
                                                    (not Aendern) and
                                                    ((DTS_Open) and (ArtOK)) and
                                                    (not VorjahrAktiv) and
                                                    (AQY_ArtikelStamm.Active) and
                                                    (AQY_ArtikelStamm.RecordCount > 0) and
                                                    (AQY_ArtikelStammPACKMITTEL_IST_PM.AsString = 'N'));
                     BTN_LoadKuSpezPackmittel.Enabled := MNI_SISonderPM.Enabled;
                end; //** if GetLinkagePointer^.Module[imPV] then
        end; //** with GetLinkagePointer^ do

   BTN_AllgKopierenKlein.Enabled := ((BTN_AllgNeuKopieren.Enabled) and
                              (AQY_ArtikelStamm.Active) and
                              (AQY_ArtikelStamm.RecordCount > 0));

   if BTN_AllgNeuKopieren.Down then
      if not BTN_AllgKopierenKlein.Down then
         BTN_AllgKopierenKlein.Enabled := false;

   if GetLinkagePointer.Priv_Nur_Sichten = ja then
      begin
           BTN_MakeVorgaenge.Enabled := false;
           BTN_AllgNeuKopieren.Enabled := false;
           BTN_AllgLoeschen.Enabled := false;
           BTN_AllgDauerEdit.Enabled := false;
           BTN_AllgKopierenKlein.Enabled := false;
           BTN_AllgEditDauerEdit.Enabled := false;
      end; //** if GetLinkagePoiner.Priv_Nur_Sichten = ja

   //** SM 2012
   MNI_Chargerecherchieren.Visible := false;
   if IsHasCharge then
      begin
           MNI_Chargerecherchieren.Visible := true;
           MNI_Chargerecherchieren.Enabled := ((not Erfassen) and    //** 04.04.2017 SM vorher: +(ArtOK) and
                                               (not Aendern) and
                                            //   ((DTS_Open) and (ArtOK)) and
                                               (GetLinkagePointer^.Module[imDobos]) and
                                               (not GetLinkagePointer^.VorjahrAktiv));
      end; //** if IsHasCharge then

   MNI_SiInfoBlatt.Enabled := BTN_LoadIB.Enabled;
   MNI_WichtigeHinweise.Enabled := BTN_LoadWichtigeHinweise.Enabled;

   MNI_SiAuftrag.Enabled := BTN_LoadAU.Enabled;
   MNI_SiBestellung.Enabled := BTN_LoadBE.Enabled;
   MNI_SiVertrag.Enabled := BTN_LoadVertraege.Enabled;
   MNI_Kontrakte.Enabled := BTN_LoadKontrakte.Enabled;

   MNI_SiSoPreis.Enabled := BTN_LoadSonderpreise.Enabled;
   MNI_PreisKalk.Enabled := BTN_LoadPreisKalkulation.Enabled;

   MNI_SiStatistik.Enabled := BTN_LoadSM.Enabled;
   MNI_SiArtKu.Enabled := BTN_LoadAKK.Enabled;

   MNI_SiNettoBedarf.Enabled := BTN_LoadNettobedarf.Enabled;

   MNI_SiSerial.Enabled := BTN_LoadSN.Enabled;
   MNI_SiRO.Enabled := BTN_LoadRO.Enabled;

   MNI_SiSLStruktur.Enabled := BTN_LoadStrukturstueckliste.Enabled;
   MNI_XRef.Enabled := BTN_LoadXref.Enabled;

   MNI_SiDavosFA.Enabled := BTN_LoadFE.Enabled;
   MNI_SiDavosArchiv.Enabled := BTN_LoadFEArchiv.Enabled;

   MNI_ZusatzTexte.Enabled := BTN_LoadZusatzTexte.Enabled;
   MNI_PflegeBlob.Enabled := BTN_LoadZusatzDokumente.Enabled;
   MNI_Viewer.Enabled := BTN_LoadDocViewer.Enabled;

   MNI_SiArchiv.Enabled := BTN_LoadAR.Enabled ;
   MNI_ArtikelArchiv.Enabled := BTN_LoadArtikelArchiv.Enabled;

   MNI_ArtikelPreisArchiv.Enabled := ((MNI_ArtikelArchiv.Enabled) and
                                      (AQY_Preise.Active) and
                                      (AQY_Preise.RecordCount > 0));
   MNI_ArtikelPreisArchivSingle.Enabled :=  MNI_ArtikelPreisArchiv.Enabled;
   MNI_ArtikelPreisArchiv.Enabled :=  MNI_ArtikelPreisArchiv.Enabled;

   MNI_Inventur.Enabled := BTN_LoadInventur.Enabled;
   MNI_Korrektur.Enabled := BTN_LoadBestandsKorrektur.Enabled;
   MNI_Drucken.Enabled := BTN_LoadDruck.Enabled;
   MNI_PrintEtikett.Enabled := BTN_LoadDruckEtikett.Enabled;


   MNI_CutTextToClipboard.Enabled := ((DTS_Open) and (ArtOK));

   MNI_DauerEdit.Enabled := BTN_AllgDauerEdit.Enabled;
   MNI_Erfassen.Enabled := BTN_AllgNeuKopieren.Enabled;
   MNI_RecordCopy.Enabled := BTN_AllgKopierenKlein.Enabled;
   MNI_Delete.Enabled := BTN_AllgLoeschen.Enabled;
   MNI_Edit.Enabled := BTN_AllgEditDauerEdit.Enabled;

   MNI_Mark.Enabled := BTN_MarkSmall.Enabled;

   MNI_StdWerte.Enabled := (GetLinkagePointer^.PRIV_SCHNELL_AENDERN = Ja);

   BTN_GetFromClipboardKlein.Enabled := ((BGP_SelNavBarGruppe.Visible <> ivAlways) and
                                      (Clipboard.HasFormat(SHBArrayClipBoardFormat)));

   if Erfassen then
      SetChildStatusText(rs_LV_AktiverModusErfassen)
   else
      if DauerAendern then
         SetChildStatusText(rs_LV_AktiverModusAendernDauer)
      else
         if Aendern then
            SetChildStatusText(rs_LV_AktiverModusAendern)
         else
            if not (DTS_Open) then
               SetChildStatusText(rs_LV_AktiverModusDatenbankGeschlossen)
            else
               if IsSpace(SMText) then
                  SetChildStatusText(rs_LV_AktiverModusDatenbankOffen)
               else
                  SetChildStatusText(SMText);

   with GetLinkagePointer^ do
        MNI_Bereinigungslauf.Enabled := ((PRIV_LOESCHEN in ['J', 'L']) and (PRIV_SCHNELL_AENDERN = 'J') and (Assigned(KeyList)) and (KeyList.Count > 0));

   BTN_MakeAufgabe.Enabled := false;
   if GetLinkagePointer^.PRIV_NUR_SICHTEN <> Ja then
      if not IsSpace(CurrArtNr) then
         BTN_MakeAufgabe.Enabled := true;

   UpdatePreiseButtons;
   UpdateLiefButtons;
   UpdateMiniSetButtons;
   UpdateLagerButtons;
   UpdateDVKalkButtons;


finally
   //BMG_DllForm.EndUpdate;
   //UIA_AdornerLV.EndUpdate;
   //LYC_Lagerverwaltung.EndUpdate;
end; //** try..finally

end; //** procedure UpdateButtons;


(******************************************************************************)
(***   MNI_Edit: OnClick                                                    ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_EditClick(Sender: TObject);
begin

inherited;
BTN_AllgEditDauerEdit.Down := not BTN_AllgEditDauerEdit.Down;
try
   BTN_AllgEditDauerEditClick(Sender);
except
end;

end; //** procedure MNI_EditClick


(******************************************************************************)
(***   MNI_Erfassen: OnClick                                                ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_ErfassenClick(Sender: TObject);
begin

inherited;
with BTN_AllgNeuKopieren do
     Down := not Down;

BTN_AllgNeuKopierenClick(BTN_AllgNeuKopieren);

end; //** procedure MNI_ErfassenClick


(******************************************************************************)
(***                       MNI_ErfassenMaske: OnClick                       ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_ErfassenMaskeClick(Sender: TObject);
begin

inherited;

if ((not Erfassen) or (not ArtNrEntryZwang)) then
   Exit;
CallNextArtNrMaske;

end; //** procedure MNI_ErfassenMaskeClick

(******************************************************************************)
(***   MNI_RecordCopy: OnClick                                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_RecordCopyClick(Sender: TObject);
begin

inherited;
with BTN_AllgKopierenKlein do
     Down := not Down;

BTN_AllgKopierenKleinClick(BTN_AllgKopierenKlein);

end; //** procedure MNI_RecordCopyClick


(******************************************************************************)
(***   MNI_DauerEdit: OnClick                                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_DauerEditClick(Sender: TObject);
begin

inherited;
with BTN_AllgDauerEdit do
     Down := not Down;

BTN_AllgDauerEditClick(BTN_AllgDauerEdit);

end; //** procedure MNI_DauerEditClick


(******************************************************************************)
(***  MNI_WG: OnClick                                                       ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_WGClick(Sender: TObject);
begin

inherited;

CallSchluesselPflege('WG');

end; //** procedure MNI_WGClick


(******************************************************************************)
(***      MNI_WGKonten: OnClick                                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_WGKontenClick(Sender: TObject);
var
   i : integer;
   FPflegeWarenGruppenKontenParams : TPflegeWarenGruppenKontenParams;
begin
inherited;

with FPflegeWarenGruppenKontenParams do
     begin
          AForm  := self;
          AErloesKonten := true;
     end; //** with FPflegeSchluesselParams do

i := Call (dnCommon, 'pflegenwarengruppenkonten', @FPflegeWarenGruppenKontenParams);

end; //** procedure MNI_WGKontenClick


(******************************************************************************)
(***  MNI_RG: OnClick                                                       ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_RGClick(Sender: TObject);
begin

inherited;

CallSchluesselPflege('RG');

end; //** procedure MNI_RGClick


(******************************************************************************)
(***      MNI_PflegeLagerName: OnClick                                      ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_PflegeLagerNameClick(Sender: TObject);
begin

inherited;
CallSchluesselPflege('LG');

end; //** procedure MNI_PflegeLagerNameClick


(******************************************************************************)
(***  MNI_Status: OnClick                                                   ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_StatusClick(Sender: TObject);
begin

inherited;

CallSchluesselPflege('ST');

end; //** procedure MNI_StatusClick


(******************************************************************************)
(***      MNI_BuKz: OnClick                                                 ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_BuKzClick(Sender: TObject);
begin

inherited;
CallSchluesselPflege('BU');
DM_Dev.OpenDataSetExt(lkDBU);

end; //** procedure MNI_BuKzClick


(******************************************************************************)
(***  MNI_PLTexte: OnClick                                                   ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_PLTexteClick(Sender: TObject);
begin

inherited;

CallSchluesselPflege('PL');

end; //** procedure MNI_PLTexteClick


(******************************************************************************)
(***      MNI_AMM: OnClick                                                  ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_AMMClick(Sender: TObject);
begin

inherited;
CallSchluesselPflege('AM');

end; //** procedure MNI_AMMClick


(******************************************************************************)
(***      MNI_Zuschlagsarten: OnClick                                       ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_ZuschlagsartenClick(Sender: TObject);
begin

inherited;
CallSchluesselPflege('ZU');

end; //** procedure MNI_ZuschlagsartenClick


(******************************************************************************)
(***  MNI_EdelMetall: OnClick                                               ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_EdelMetallClick(Sender: TObject);
begin

inherited;

CallSchluesselPflege('EM');

end; //** procedure MNI_EdelMetallClick


(******************************************************************************)
(***  MNI_ISKatalog: OnClick                                                ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_ISKatalogClick(Sender: TObject);
var
   i : Integer ;
   FPflegeSchluesselParams : TPflegeSchluesselParams;

begin

inherited;
with FPflegeSchluesselParams do
     begin
          AKey  := '  '; //** wird nicht gebraucht!
          AForm := self;
     end; //** with FPflegeSchluesselParams do

i := Call (dnCommon, 'pflegeniskatalog', @FPflegeSchluesselParams);


end; //** procedure MNI_ISClick


(******************************************************************************)
(***  MNI_ISUL: OnClick                                                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_ISULClick(Sender: TObject);
begin

inherited;

CallSchluesselPflege('LD');

end; //** procedure MNI_ISULClick


(******************************************************************************)
(***      MNI_ISIE: OnClick                                                 ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_ISIEClick(Sender: TObject);
begin

inherited;
CallSchluesselPflege('IE');

end; //** procedure MNI_ISIEClick


(******************************************************************************)
(***      MNI_ISIL: OnClick                                                 ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_ISILClick(Sender: TObject);
begin

inherited;
CallSchluesselPflege('IL');

end; //** procedure MNI_ISILClick


(******************************************************************************)
(***  MNI_ISUR: OnClick                                                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_ISURClick(Sender: TObject);
begin

inherited;

CallSchluesselPflege('IR');

end; //** procedure MNI_ISURClick


(******************************************************************************)
(***  MNI_ISVerfahren: OnClick                                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_ISVerfahrenClick(Sender: TObject);
begin

inherited;

CallSchluesselPflege('IV');

end; //** procedure MNI_ISVerfahrenClick


(******************************************************************************)
(***  MNI_ISVZ: OnClick                                                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_ISVZClick(Sender: TObject);
begin

inherited;

CallSchluesselPflege('IZ');

end; //** procedure MNI_ISVZClick


(******************************************************************************)
(***  MNI_ISGA: OnClick                                                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_ISGAClick(Sender: TObject);
begin

inherited;

CallSchluesselPflege('IG');

end; //** procedure MNI_ISGAClick


(******************************************************************************)
(***  MNI_ISHA: OnClick                                                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_ISHAClick(Sender: TObject);
begin

inherited;

CallSchluesselPflege('IH');

end; //** procedure MNI_ISHAClick


(******************************************************************************)
(***   DataSource Data Change, Schlüsselfelder versorgen                    ***)
(******************************************************************************)

procedure TFRM_DobosLV.DTS_ArtikelStammDataChange(Sender: TObject; Field: TField);
var
   B : Boolean ;

begin

inherited;
if ReadFWFlag then
   Exit;

if ((Field = AQY_ArtikelStammARTNR) or (Field = nil) and (AQY_ArtikelStammARTNR.AsString > '')) then
   if not Erfassen then
      if ((TrimRight(LastArtNr) <> TrimRight(AQY_ArtikelStammARTNR.AsString)) or
          ((TrimRight(EDT_KB.Text) <> TrimRight(AQY_ArtikelStammKB.AsString)) and (not PushKBFlag)) or
          ((TrimRight(EDT_BN.Text) <> TrimRight(AQY_ArtikelStammBN.AsString)) and (not PushKBFlag)) or
          ((TrimRight(EDT_ZN.Text) <> TrimRight(AQY_ArtikelStammZN.AsString)) and (not PushKBFlag)) or
          ((TrimRight(EDT_BEZ_1.Text) <> TrimRight(AQY_ArtikelStammBEZ_1.AsString)) and (not PushKBFlag))) then
         begin
              LastArtNr := TrimRight(AQY_ArtikelStammARTNR.AsString);
              GetLinkagePointer^.LinkLastArtNr := LastArtNr;
              EDT_ArtNr.Text := LastArtNr;
              EDT_KB.Text := AQY_ArtikelStammKB.AsString;
              EDT_BN.Text := AQY_ArtikelStammBN.AsString;
              EDT_ZN.Text := AQY_ArtikelStammZN.AsString;
              EDT_BEZ_1.Text := AQY_ArtikelStammBEZ_1.AsString;
              with CallSys('WG',AQY_ArtikelStammWG.AsInteger, B) do
                  if (B) then
                     PAN_WG.Caption := Text
                  else
                     PAN_WG.Caption := rs_LV_undefiniert;
              with CallSys('RG',AQY_ArtikelStammRG.AsInteger, B) do
                  if (B) then
                     PAN_RG.Caption := Text
                  else
                     PAN_RG.Caption := rs_LV_undefiniert;
              if ((not (IsSpace(AQY_ArtikelStammSACHMERKMAL.AsString))) and
                  (AQY_ArtikelStammSACHMERKMAL.AsString <> '00000000000000000000')) then
                 ReadSachMerkmal
              else
                 begin
                      SMText := ' ';
                      MEM_SM.Text := '';
                      SetChildStatusText(SMText);
                      EDT_Sachmerkmal.Hint := rs_LV_smBaseHint+rs_LV_smHint;
                 end;
              UpdateNavi;
         end; //** if not Erfassen...

{
if AQY_ArtikelStamm.Active then
   case AQY_ArtikelStamm.State of
        dsEdit, dsInsert : begin
                                //BTN_AllgEditDauerEdit.Down := true;
                                //Erfassen,DauerAendern,Aendern
                                if (not (IsSpace(EDT_KB.Text))) then
                                   BTN_DBNavPost.Enabled := true
                                else
                                   BTN_DBNavPost.Enabled := false;
                                BTN_DBNavAbbrechen.Enabled := true;
                           end;
        dsBrowse         : begin
                                BTN_AllgEditDauerEdit.Down := false;
                                BTN_DBNavPost.Enabled := false;
                                BTN_DBNavAbbrechen.Enabled := false;
                           end;
   end; //** case AQY_ArtikelStamm.State
}


UpdateButtons;

end; //** procedure DTS_ArtikelStammDataChange


(******************************************************************************)
(***   DTS_Lieferant: OnDataChange (Lieferantenname lesen)                  ***)
(******************************************************************************)

procedure TFRM_DobosLV.DTS_LieferantDataChange(Sender: TObject; Field: TField);

begin

inherited;
//** Macht vermutlich keinen Sinn ?? mal rausgenommen *OB 06.11.2019
//if Field = nil then
//   ReadLieferantName;

end; //** procedure DTS_LieferantDataChange


(******************************************************************************)
(***      EDT_ArtNr: OnChange                                               ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_ArtNrChange(Sender: TObject);
begin

inherited;
if Length(EDT_ArtNr.Text) > WarnLengthArtNr then
   EDT_ArtNr.Font.Color := $000000DF
else
   EDT_ArtNr.Font.Color := clWindowText;

end; //** procedure EDT_ArtNrChange


(******************************************************************************)
(***   EDT_ArtNr: OnEnter                                                   ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_ArtNrEnter(Sender: TObject);
begin

inherited;
if Erfassen then
   NeuEingabeAktiv := false;

if not SelectionFeuert then
   if (MNI_EnableBIOSSearch.Checked) then
      begin
           EDT_ArtNr.BIOSZusatzWhere := 'ARTNR <> ''ZZZZZZZZZZ'' AND STATUS <> 9 ';
           EDT_ArtNr.BIOSInitSearch;
      end; //** if (MNI_EnableBIOSSearch.Checked) then

end; //** procedure EDT_ArtNrEnter


(******************************************************************************)
(***   EDT_ArtNr: OnExit  (bei ArtNr Änderung Suchen)                       ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_ArtNrExit(Sender: TObject);
var
   ANr : string;

begin

if not WindowReady then
   Exit;

inherited;
if not GetLinkagePointer^.HasUnicodeModule then
   EDT_ArtNr.Text := AnsiString(EDT_ArtNr.Text);

EDT_ArtNr.Text := TrimRight(EDT_ArtNr.Text);
CurrArtNr := EDT_ArtNr.Text;

//** neu 26.11.2014
//** Pipe in ArtNr verbieten da sonst Verknüpfungen u.A. nicht mehr funktionieren
if ArtNrEntryZwang then
   if Pos('|', EDT_ArtNr.Text) > 0 then
      begin
           ShowMessage(rs_LV_PipeForbidden);
           EDT_ArtNr.Text := '';
           Exit;
      end; //** if not isSpace(EDT_ArtNr.Text)

//** neu 30.01.2018
//** ' in ArtNr verbieten da Ado nicht damit umgehen kann *DB
if ArtNrEntryZwang then
   if Pos('''', EDT_ArtNr.Text) > 0 then
      begin
           ShowMessage(rs_LV_PipeForbidden);
           EDT_ArtNr.Text := '';
           Exit;
      end; //** if Pos('''', EDT_ArtNr.Text) > 0 then

if ArtNrEntryZwang then
   if not isSpace(EDT_ArtNr.Text) then
      begin
           ArtNrEntryZwang := false;
           Exit;
      end; //** if not isSpace(EDT_ArtNr.Text)

if ((KB_Suche)  or
    (AQY_ArtikelStamm.State = dsInsert) or
    (ArtNrEntryZwang)) then
   Exit;

if (((AQY_ArtikelStamm.State <> dsInsert) and (not DTS_Open)) or
    ((AQY_ArtikelStamm.Active) and (TrimRight(EDT_ArtNr.Text) <> TrimRight(AQY_ArtikelStammARTNR.AsString)))) then
   begin
        ANr := EDT_ArtNr.Text;
        if isSpace(ANr) then
           begin
                CurrArtNr := '';
                CloseDataSources;
                InitQuersprungleiste;
                UpdateButtons;
                Exit;
           end;

        OpenDataSources;
        AQY_ArtikelStamm.Cancel;
        try
           //** Timing-Problem, wenn sofort ArtNr eingegeben wird!
           if not Active then
              WaitNTicks(500);
           if not Active then
              begin
                   if EDT_ArtNr.CanFocus then
                      EDT_ArtNr.SetFocus;
                   Exit;
              end; //** if not Active

           if not PosMain(ANr, '', mpExact, false) then
              begin
                   CloseDataSources;
                   CurrArtNr := '';
                   EDT_ArtNr.Text := '';
                   EDT_KB.Text := '';
                   EDT_ZN.Text := '';
                   EDT_BN.Text := '';
                   EDT_Bez_1.Text := '';
                   InitQuersprungleiste;
              end //** if not PosMain(ANr, '', mpExact, false)
           else
              begin
                   GetLinkagePointer^.LinkLastArtNr := ANr;
                   UpdateRecentList;
              end;
        finally
           SortOrder := asArtNr;
           SetzeKey;
           UpdateButtons;
           if EDT_ArtNr.CanFocus then
              EDT_ArtNr.SetFocus;
        end; //** try..finally

   end; //** if

end; //** procedure EDT_ArtNrExit


(******************************************************************************)
(***  EDT_RasterVK: OnExit                                                  ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_RasterVKExit(Sender: TObject);
begin

inherited;
UpdateRaster(true);

end; //** procedure EDT_RasterVKExit


(******************************************************************************)
(***  Rasterdaten updaten                                                   ***)
(******************************************************************************)

procedure TFRM_DobosLV.UpdateRaster(AVK: boolean);
begin

if ((Erfassen) or (Aendern)) then
   if AQY_ArtikelStammRASTER_VK.AsInteger <> LastRaster then
      begin
           ReadRaster(AQY_ArtikelStammRASTER_VK.AsInteger, AVK, false,false);
           LastRaster := AQY_ArtikelStammRASTER_VK.AsInteger;
      end; //** if AQY_ArtikelStammRASTER_VK.AsInteger <> LastRaster

if AVk then
   UpdateDavosBez;

end; //** procedure UpdateRaster


(******************************************************************************)
(***  ReadRaster                                                            ***)
(******************************************************************************)

function TFRM_DobosLV.ReadRaster (ARaster : integer; AUpdateVKScreen : boolean;
                                  AIsLieferant, AUpdateEKScreen : boolean) : boolean;
var
   j,
   i : integer;
   s : string;
   s1 : string;

begin

if (AIsLieferant) and (AQY_LieferantSTAFFEL_BP.AsString = 'F') then
   Exit;

if IsSpace(CurrArtnr) then
   Exit;

try
   LYC_Lagerverwaltung.BeginUpdate;

   s := '';
   if AIsLieferant then
      EDT_LiefRaster.Hint := rs_LV_MR;
   if ((AUpdateVKScreen) and (not (AIsLieferant))) then
      begin
           LYI_VK1.Caption := rs_LV_VK+' 1';
           LYI_VK2.Caption := rs_LV_VK+' 2';
           LYI_VK3.Caption := rs_LV_VK+' 3';
           LYI_VK4.Caption := rs_LV_VK+' 4';
           LYI_VK5.Caption := rs_LV_VK+' 5';
           LYI_VK6.Caption := rs_LV_VK+' 6';
           LYI_VK7.Caption := rs_LV_VK+' 7';
           LYI_VK8.Caption := rs_LV_VK+' 8';
           LYI_VK9.Caption := rs_LV_VK+' 9';
           LYI_VK10.Caption := rs_LV_VK+' 10';
      end; //** if AUpdateVKScreen

   if ((AUpdateEKScreen) and (AIsLieferant)) then
      begin
           LYI_LiefEK1.Caption := rs_LV_EK+' 1';
           LYI_LiefEK2.Caption := rs_LV_EK+' 2';
           LYI_LiefEK3.Caption := rs_LV_EK+' 3';
           LYI_LiefEK4.Caption := rs_LV_EK+' 4';
           LYI_LiefEK5.Caption := rs_LV_EK+' 5';
           LYI_LiefEK6.Caption := rs_LV_EK+' 6';
           LYI_LiefEK7.Caption := rs_LV_EK+' 7';
           LYI_LiefEK8.Caption := rs_LV_EK+' 8';
           LYI_LiefEK9.Caption := rs_LV_EK+' 9';
           LYI_LiefEK10.Caption := rs_LV_EK+' 10';
      end; //** if AUpdateVKScreen

   with AQY_Divers do
        try
           try
              for i := 2 to 10 do
                  MRaster[i] := 1;

              if Active then
                 Close;
           Connection := GetDOBOSADB;
           SQL.Clear;
           SQL.Add('SELECT R2, R3, R4, R5, R6, R7, R8, R9, R10 FROM ARTIKEL_RASTER (NOLOCK) WHERE NUMMER = '+IntToStr(ARaster));
           UCOpenSQL(AQY_Divers);
           if not EOF then
              begin
                   for i := 2 to 10 do
                       MRaster[i] := Fields[i-2].AsInteger;

                   if (AIsLieferant) then
                      begin
                           s := rs_MengenRaster+' '
                                +'1, '
                                +IntToStr(MRaster[2])+', '
                                +IntToStr(MRaster[3])+', '
                                +IntToStr(MRaster[4])+', '
                                +IntToStr(MRaster[5])+', '
                                +IntToStr(MRaster[6])+', '
                                +IntToStr(MRaster[7])+', '
                                +IntToStr(MRaster[8])+', '
                                +IntToStr(MRaster[9])+', '
                                +IntToStr(MRaster[10]);
                           EDT_LiefRaster.Hint := s;
                           if self.Width > 1050 then
                              begin
                                   LYI_LiefEK1.Caption := rs_LV_EK+' 1 ('+rs_LV_ab+' '+IntToStr(1)+')';
                                   LYI_LiefEK2.Caption := rs_LV_EK+' 2 ('+rs_LV_ab+' '+IntToStr(MRaster[2])+')';
                                   LYI_LiefEK3.Caption := rs_LV_EK+' 3 ('+rs_LV_ab+' '+IntToStr(MRaster[3])+')';
                                   LYI_LiefEK4.Caption := rs_LV_EK+' 4 ('+rs_LV_ab+' '+IntToStr(MRaster[4])+')';
                                   LYI_LiefEK5.Caption := rs_LV_EK+' 5 ('+rs_LV_ab+' '+IntToStr(MRaster[5])+')';
                                   LYI_LiefEK6.Caption := rs_LV_EK+' 6 ('+rs_LV_ab+' '+IntToStr(MRaster[6])+')';
                                   LYI_LiefEK7.Caption := rs_LV_EK+' 7 ('+rs_LV_ab+' '+IntToStr(MRaster[7])+')';
                                   LYI_LiefEK8.Caption := rs_LV_EK+' 8 ('+rs_LV_ab+' '+IntToStr(MRaster[8])+')';
                                   LYI_LiefEK9.Caption := rs_LV_EK+' 9 ('+rs_LV_ab+' '+IntToStr(MRaster[9])+')';
                                   LYI_LiefEK10.Caption := rs_LV_EK+' 10 ('+rs_LV_ab+' '+IntToStr(MRaster[10])+')';
                              end;
                      end
                   else
                      if (AUpdateVKScreen) then
                         begin
                              LYI_VK1.Caption := rs_LV_VK+' 1 ('+rs_LV_ab+' '+IntToStr(1)+')';
                              LYI_VK2.Caption := rs_LV_VK+' 2 ('+rs_LV_ab+' '+IntToStr(MRaster[2])+')';
                              LYI_VK3.Caption := rs_LV_VK+' 3 ('+rs_LV_ab+' '+IntToStr(MRaster[3])+')';
                              LYI_VK4.Caption := rs_LV_VK+' 4 ('+rs_LV_ab+' '+IntToStr(MRaster[4])+')';
                              LYI_VK5.Caption := rs_LV_VK+' 5 ('+rs_LV_ab+' '+IntToStr(MRaster[5])+')';
                              LYI_VK6.Caption := rs_LV_VK+' 6 ('+rs_LV_ab+' '+IntToStr(MRaster[6])+')';
                              LYI_VK7.Caption := rs_LV_VK+' 7 ('+rs_LV_ab+' '+IntToStr(MRaster[7])+')';
                              LYI_VK8.Caption := rs_LV_VK+' 8 ('+rs_LV_ab+' '+IntToStr(MRaster[8])+')';
                              LYI_VK9.Caption := rs_LV_VK+' 9 ('+rs_LV_ab+' '+IntToStr(MRaster[9])+')';
                              LYI_VK10.Caption := rs_LV_VK+' 10 ('+rs_LV_ab+' '+IntToStr(MRaster[10])+')';
                         end;

                   if EDT_LiefStaffelBP.Text = 'S' then
                      //if BigEKScreenActive then
                         LYI_LiefEK10.Caption := rs_LV_PosMin
                      //else
                      //   LYI_LiefEK10.Caption := rs_LV_PosMin_k;
              end; //** if not EOF then

           except
              on E:Exception do
                 ShowMessage(E.Message);
           end; //** try..except

        finally
           if Active then
              Close;
        end; //** try..finally

   if AUpdateVKScreen then
      UpdateDavosBez;

finally
   LYC_Lagerverwaltung.EndUpdate;
end; //** try..finally

end; //** function ReadRaster


(******************************************************************************)
(***     GetNextArtNrBrendle                                                ***)
(******************************************************************************)

function TFRM_DobosLV.GetNextArtNrBrendle (AArtNummer : string) : string;
var
   fmtString,
   fmaxArtNR,
   fminArtNR,
   fArtNr,
   s1          : string;
   fcount,
   dbmaxArtNr,
   dbminArtNR,
   NextNr      : integer;

begin

try
   with AQY_Divers do
        try
           fmaxArtNR  := '';
           fminArtNR  := '';
           fcount     := 0;
           dbmaxArtNr := 0;
           dbminArtNR := 0;
           if Active then
              Close;

           s1 := AArtNummer + '[0-9][0-9][0-9][0-9][0-9]';

           Connection := GetDobosADB;
           SQL.Clear;
           SQL.Add('SELECT '
                  +'min(ARTNR), '
                  +'max(ARTNR), '
                  +'count(*) FROM ARTIKEL_STAMM WHERE '
                  +'SUBSTRING(ARTNR, 1, 5) = '''+AnsiUpperCase(AArtNummer)+''' '
                  +' AND ISNUMERIC(SUBSTRING(ARTNR, 6, 1)) = 1');
           UCOpenSQL(AQY_Divers);

           fminArtNR := Fields[0].AsString;
           fmaxArtNR := Fields[1].AsString;
           fminArtNR := Copy(fminArtNR, 6, 5);
           fmaxArtNR := Copy(fmaxArtNR, 6, 5);
           try
              dbminArtNR := StrToInt(fminArtNR);
           except
              dbminArtNR := 0;
           end;
           try
              dbmaxArtNr := StrToInt(fmaxArtNR);
           except
              dbmaxArtNr := 0;
           end;
           fcount    := Fields[2].AsInteger;
           Close;

           if dbmaxArtNr > 98999 then
             begin
                  NextNr := 1;
                  SQL.Clear;

                  SQL.Add('SELECT ARTNR FROM ARTIKEL_STAMM '
                         +'WHERE RTRIM(ARTNR) LIKE '''+SQLTextString(Trim(s1))+''' '
                         +'AND SUBSTRING(ARTNR, 1, 5) = '''+AnsiUpperCase(AArtNummer)+''' ORDER BY ARTNR');
                  UCOpenSQL(AQY_Divers);
                  while not EOF do
                        begin
                             fminArtNR := Fields[0].AsString;
                             fminArtNR := Copy(fminArtNR, 6, 5);
                             try
                                dbminArtNR := StrToInt(fminArtNR);
                             except
                                dbminArtNR := 0;
                             end;
                             if dbminArtNR > NextNr then
                                Break;
                             NextNr := dbminArtNR+1;
                             Next;
                        end; //** while not EOF do
                  Close;
             end //** if ((dbmaxArtNr) > (dbCount+10))
           else
              NextNr := dbmaxArtNr+1;

        except
            raise;
        end; //** try..except

   fmtString := AArtNummer + '%5.5d';

   try
      fArtNr := Format(fmtString,[NextNr]);
      result := fArtNr;
   except
   end; //** try..except

finally
   with AQY_Divers do
        if Active then
           Close;
end; //** try.. finally

end; //** function GetNextArtNrBrendle


(******************************************************************************)
(***  EDT_ArtNr: Mit F2 auf KB-Suche                                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_ArtNrKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
var
   i                     : integer;
   s,
   mZN,
   mArtNr,
   mArtBez2,
   mArtBez,
   mBrendleArtNr : string;

begin

inherited;

case Key of
     VK_F2 : begin
                  KB_Suche := true;
                  EDT_KB.Text := '';
                  if EDT_KB.CanFocus then
                     EDT_KB.SetFocus;
             end; //** case VK_F2
     73,105: begin
                  if Shift <> [ssCtrl] then
                     Exit;
                  if ((not Erfassen) or (not ArtNrEntryZwang)) then
                     Exit;
                  if ExternArtNrNeuList.Count < 1 then
                     Exit;
                  mArtNr := '';
                  mArtBez := '';
                  mArtBez2 := '';
                  mZN := '';
                  s := ExternArtNrNeuList.Strings[0];
                  if GetArtNrUndBez(s, mArtNr, mArtBez, mArtBez2, mZN) then
                     begin
                          EDT_ArtNr.Text := mArtNr;
                          EDT_KB.Text := mArtBez;
                          EDT_Bez_1.Text := mArtBez;
                          AQY_ArtikelStammBEZ_2.AsString := mArtBez2;
                          mZN := AnsiUpperCase(Trim(mZN));
                          if (not (IsSpace(mZN))) then
                             begin
                                  EDT_ZN.Text := mZN;
                                  AQY_ArtikelStammZN.AsString := mZN;

                             end; //**
                          Strg_I_Flag := true;
                          if CopyFlag then
                             begin
                                  SaveKB := mArtBez;
                                  RCC_Artikel.FieldByName('KB').AsString := mArtBez;
                                  RCC_Artikel.FieldByName('BEZ_1').AsString := mArtBez;
                                  RCC_Artikel.FieldByName('BEZ_2').AsString := mArtBez2;
                                  if (not (IsSpace(mZN))) then
                                     RCC_Artikel.FieldByName('ZN').AsString := mZN;
                             end; //** if CopyFlag
                     end
                  else
                     EDT_ArtNr.Text := ExternArtNrNeuList.Strings[0];
                  ExternArtNrNeuList.Delete(0);
             end; //** case Strg+I

     78,110: begin
                  if (Shift <> [ssAlt]) then
                     Exit;
                  if ((not Erfassen) or (not ArtNrEntryZwang)) then
                     Exit;
                  CallNextArtNrMaske;
             end; //** case Alt+N

end; //** case Key of

end; //** procedure EDT_ArtNrKeyDown


(******************************************************************************)
(***  AQY_ArtikelStamm: OnAfterScroll                                       ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_ArtikelStammAfterScroll(DataSet: TDataSet);
begin

inherited;

{06.11.2019 SM
if ((GetLinkagePointer^.Serial = KSerial_Yamaichi) and
    ((GetLinkagePointer^.MRecord.Mandant = 1) or (GetLinkagePointer^.MRecord.Mandant = 2))) then
   if Trim(YamaichiArtNr) <> Trim(AQY_ArtikelStammARTNR.AsString) then
      begin
           YamaichiArtNr   := '';
           YamaichiAntwort := 0;
      end; //** if Trim(YamaichiArtNr) <> Trim(AQY_ArtikelStammARTNR.AsString)    }

//if ((GetLinkagePointer^.Serial = KSerial_Famec) and
if (((GetLinkagePointer^.Serial = KSerial_Famec) or (GetLinkagePointer^.Serial = KSerial_Plaschka)) and //** 22.02.2017 SM
     ((GetLinkagePointer^.MRecord.Mandant = 1) or (GetLinkagePointer^.MRecord.Mandant = 2))) then
   if Trim(FamecArtNr) <> Trim(AQY_ArtikelStammARTNR.AsString) then
      begin
           FamecArtNr   := '';
           FamecAntwort := 0;
      end; //** if Trim(FamecArtNr) <> Trim(AQY_ArtikelStammARTNR.AsString)

if ReadFWFlag then
   Exit;

//** Wegen unterschiedliecher EK/VK-Raster und VK-Davos-Bez kann hier nur noch immer gelesen werden...
//if AQY_ArtikelStammRASTER_VK.AsInteger <> LastRaster then begin ... end
ReadRaster(AQY_ArtikelStammRASTER_VK.AsInteger, true, false, false);
//ReadRaster(AQY_LieferantRASTER.AsInteger , false, true, true);
LastRaster := AQY_ArtikelStammRASTER_VK.AsInteger;

UpdateDavosBez;
UpdateButtons;

if IsHasCharge then
   if not Erfassen then
      MNI_ShowChargenlagerClick(nil);  //** ohne Umschalten der Checkbox

end; //** procedure AQY_ArtikelStammAfterScroll


(******************************************************************************)
(***  AQY_ArtikelStamm: OnAfterEdit                                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_ArtikelStammAfterEdit(DataSet: TDataSet);
begin

inherited;

{

if ReadFWFlag then
   Exit;
if SBT_LiefEdit.Enabled then
   SBT_LiefEditClick(SBT_LiefEdit);
if SBT_PreiseEdit.Enabled then
   SBT_PreiseEditClick(SBT_PreiseEdit);
}

end; //** procedure AQY_ArtikelStammAfterEdit


(******************************************************************************)
(***  UpdatePBTexte (Maßeinheiten-Anzeige)                                  ***)
(******************************************************************************)

procedure TFRM_DobosLV.UpdatePBTexte;
var
   i : SmallInt;

begin

i := EDT_B_Basis.AsInteger;
if (i in [SmallInt(Low(TBP_Basis))..SmallInt(high(TBP_Basis))]) then
   EDT_B_BasisText.Text := BP_BasisText(i)
else
   EDT_B_BasisText.Text := '';

i := EDT_P_Basis.AsInteger;
if (i in [SmallInt(Low(TBP_Basis))..SmallInt(high(TBP_Basis))]) then
   EDT_P_BasisText.Text := BP_BasisText(i)
else
   EDT_P_BasisText.Text := '';

end; //** procedure UpdatePBTexte


(******************************************************************************)
(***      AQY_Preise: OnFilterRecord                                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_PreiseFilterRecord(DataSet: TDataSet; var Accept: Boolean);
var
   s : string;

begin

inherited;
//** Seit ADO muß hier persönlich gefiltert werden, ignoriert upper/lower Case
if ((DTS_Open) and (AQY_Preise.Active)) then
   with AQY_Preise do
        begin
             if (State in [dsEdit, dsInsert]) then
                begin
                     Accept := true;
                     Exit;
                end; //** if (State in [dsEdit, dsInsert])
             s := 'A';
             if RBT_PreiseNeu.Checked then
                s := 'N';
             if RBT_PreiseBrutto.Checked then
                s := AnsiLowerCase(s);
             
             if s = AQY_PreiseART.AsString then
                Accept := true
             else
                Accept := false;

        end; //** with AQY_Preise do

end; //** procedure AQY_PreiseFilterRecord


(******************************************************************************)
(***  EDT_PreiseWS: OnChange                                                ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_PreiseWSChange(Sender: TObject);
var
   i : integer;

begin

inherited;
try
   i := EDT_PreiseWS.AsInteger;
except
   i := 0;
end; //** try..except

EDT_WaehrungsText.Text := GetLinkagePointer^.WS_Tabelle[i].Name;

end; //** procedure EDT_PreiseWSChange


(******************************************************************************)
(***    ReadSachMerkmal                                                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.ReadSachMerkmal;
var
   s : TUCString20;
   s1,
   s2,
   s3,
   s4,
   s5,
   s6,
   s7,
   s8,
   s9 : string;

begin

SMText := '';
MEM_SM.Text := '';
EDT_Sachmerkmal.Hint := rs_LV_smBaseHint+rs_LV_smHint;

s1 := AQY_ArtikelStammSACHMERKMAL.AsString;
if ((IsSpace(s1)) or (s1 = '00000000000000000000')) then
   Exit;

shbExpandString(s1, 20, '0', false);
s := s1;
s1 := Copy(s,1,2) +'000000000000000000';
s2 := Copy(s,1,4) +'0000000000000000';
s3 := Copy(s,1,6) +'00000000000000';
s4 := Copy(s,1,8) +'000000000000';
s5 := Copy(s,1,10)+'0000000000';
s6 := Copy(s,1,12)+'00000000';
s7 := Copy(s,1,14)+'000000';
s8 := Copy(s,1,16)+'0000';
s9 := Copy(s,1,18)+'00';


with AQY_Divers do
     try
        try
           if Active then
              Close;
           Connection := GetDobosADB;
           SQL.Clear;
           SQL.Add('SELECT TEXT FROM SACHMERKMAL WHERE '
                  +'(SCHLUESSEL = '''+s1+''' OR '
                  +'SCHLUESSEL = '''+s2+''' OR '
                  +'SCHLUESSEL = '''+s3+''' OR '
                  +'SCHLUESSEL = '''+s4+''' OR '
                  +'SCHLUESSEL = '''+s5+''' OR '
                  +'SCHLUESSEL = '''+s6+''' OR '
                  +'SCHLUESSEL = '''+s7+''' OR '
                  +'SCHLUESSEL = '''+s8+''' OR '
                  +'SCHLUESSEL = '''+s9+''' OR '
                  +'SCHLUESSEL = '''+s+''' ) '
                  +'ORDER BY SCHLUESSEL');
           UCOpenSQL(AQY_Divers);
           EDT_Sachmerkmal.Hint := '';
           SMText := '';
           while not EOF do
                 begin
                      if EDT_Sachmerkmal.Hint = '' then
                         begin
                              SMText := FieldByName('TEXT').AsString;
                              EDT_Sachmerkmal.Hint := SMText;
                         end
                      else
                         begin
                              SMText := SMText+' / '+ FieldByName('TEXT').AsString;
                              EDT_Sachmerkmal.Hint := EDT_Sachmerkmal.Hint+skReturn+
                                                      FieldByName('TEXT').AsString;
                         end;
                      Next;
                 end;
           MEM_SM.Text := EDT_Sachmerkmal.Hint;
           if EDT_Sachmerkmal.Hint = '' then
              EDT_Sachmerkmal.Hint := rs_LV_smBaseHint+rs_LV_smHint;
           Close;

        except
           on E:Exception do
              ShowMessage(E.Message);
        end; //** try..except

     finally
        if Active then
           Close;
        SetChildStatusText(SMText);
     end; //** try..finally

end; //** procedure ReadSachMerkmal


(******************************************************************************)
(***    Test, ob InfoBlatt da                                               ***)
(******************************************************************************)

procedure TFRM_DobosLV.CheckIB;
var
   SelCF,
   SelXRef,
   s : string;

begin

SelXRef := '"XREF" = 0 ';
if (GetLinkagePointer^.Module[imSL]) then
   SelXRef := '"XREF" = (CASE WHEN EXISTS (SELECT TOP 1 y.UNTER_ARTNR FROM SL_POSTEN y WHERE y.UNTER_ARTNR = s.ARTNR) THEN 1 ELSE 0 END) ';

//UIA_AdornerLVBadgeInfoblatt.Visible := false;
try
   with AQY_IBExist do
        begin
             Parameters.Items[0].Value := AQY_ArtikelStammARTNR.AsString;
             Open; //** Parametrisierte Query ohne Literale kein UCChange machen!
             if not EOF then
                begin
                     BTN_LoadIB.Enabled := true;
                     with GetLinkagePointer^ do
                          if ((Serial = KSerial_Biersack) and
                              (Privileg_Level < 7)) then
                             BTN_LoadIB.Enabled := false;
                     with GetLinkagePointer^ do
                          if ((Serial = KSerial_Schweizer) or (Serial = KSerial_Schweda))  then
                             if PRIV_VK <> Ja then
                                BTN_LoadIB.Enabled := false;
                     //** Icon - kein Text
                     if (BTN_LoadIB.Enabled) then
                        begin
                             //UIA_AdornerLVBadgeInfoblatt.Visible := true;
                             BTN_LoadIB.Down := true;
                        end;
                end //** if not EOF then
             else
                BTN_LoadIB.Down := false;

             SetInfoButtonGlyphs;
             Close;
        end;
except  //** nix, nur schaun
end; //** try..except

end; //** procedure CheckIB


(******************************************************************************)
(***  Durchsucht Keyliste nach der Artikelnummer                            ***)
(******************************************************************************)

function TFRM_DobosLV.SearchKeyList(const AArtNr: string) : integer;
var
   i : integer;
   x : PLagerMemKey;

begin

result := -1;
if KeyList.Count > 0 then
   for i := 0 to KeyList.Count -1 do
       begin
            x := KeyList.Items[i];
            if TrimRight(x.MArtNr) = TrimRight(AArtNr) then
               begin
                    result := i;
                    Break;
               end;
       end; //** for i := 0 to KeyList.Count -1

end; //** function SearchKeyList


(******************************************************************************)
(***  Navigator für Liste: Buttons updaten                                  ***)
(******************************************************************************)

procedure TFRM_DobosLV.UpdateNavi;
var
   x : PLagerMemKey;

begin

inherited;
BTN_SelNavFirst.Enabled := true;
BTN_SelNavPrior.Enabled := true;
BTN_SelNavNext.Enabled := true;
BTN_SelNavLast.Enabled := true;
BTN_SelNav10Back.Enabled := true;
BTN_SelNav10Forward.Enabled := true;

if KeyIndex > -1 then
   if KeyIndex = (SearchKeyList(AQY_ArtikelStammARTNR.AsString)) then
      BTN_SelNavLoeschen.Enabled := true;

if KeyIndex = 0 then
   begin
        BTN_SelNavFirst.Enabled := false;
        BTN_SelNavPrior.Enabled := false;
        BTN_SelNav10Back.Enabled := false;
   end; //** if KeyIndex = 0 then

if KeyIndex >= KeyList.Count -1 then
   begin
        BTN_SelNavNext.Enabled := false;
        BTN_SelNavLast.Enabled := false;
        BTN_SelNav10Forward.Enabled := false;
   end; //** if KeyIndex >= KeyList.Count -1

//EDT_SelNavSelektion.EditValue := Format(rs_LV_XvonY,[KeyIndex+1, KeyList.Count]);

EDT_SelNavDatensatzVon.EditValue := KeyIndex+1;
//TcxCurrencyEditProperties(EDT_SelNavDatensatzVon).MaxValue := KeyList.Count;

//TcxCurrencyEdit(EDT_SelNavDatensatzVon.Properties).Properties.MaxValue := KeyList.Count;

EDT_SelNavSelektion.EditValue := Format(rs_LV_XvonY,[KeyList.Count]);

if ((KeyIndex > -1) and (KeyList.Count > 0)) then
   begin
        x := KeyList.Items[KeyIndex];
        if ((not BTN_SelNavNext.Enabled) and
            (DTS_Open) and
            (TrimRight(AQY_ArtikelStammARTNR.AsString) <> TrimRight(x.MArtNr))) then
            BTN_SelNavNext.Enabled := true; //** damit man auf den Satz positionieren kann

   end; //** if KeyIndex > -1

end; //** procedure UpdateNavi;


(******************************************************************************)
(***   EDT_B_Basis: OnChange (auch EDT_P_Basis)                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_B_BasisChange(Sender: TObject);
begin

inherited;
UpdatePBTexte;
EDT_KBChange(Self);

end; //** procedure EDT_B_BasisChange


(******************************************************************************)
(***      EDT_B_Basis: OnLookupClick                                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_B_BasisLookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkBPBasis, Sender, Self);

end; //** procedure EDT_B_BasisLookupClick


(******************************************************************************)
(***   SBT_PflegeBlob: OnClick  (Pflege Zusatzdocs)                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_PflegeBlobClick(Sender: TObject);
var
   FPflegeBlobParams : TPflegeBlobParams;
   i : integer;

begin

inherited;
if ModalCallActive then
   Exit;

if ((Erfassen) and
    (IsSpace(LastErfassenSemaphore))) then
   Exit;

if IsSpace(AQY_ArtikelStammARTNR.AsString) then
   Exit;

with FPflegeBlobParams do
     begin
          AKuNu := 0;
          //** 11.2 3515a - verhindert das Datumsupdate, sonst "zwischenzeitlich Datensatz geändert..."
          if AQY_ArtikelStamm.State <> dsBrowse then
             AKuNu := -1;
          AArtNr := TrimRight(AQY_ArtikelStammARTNR.AsString);
          AKB := AQY_ArtikelStammBEZ_1.AsString;
          AFunction := 0;
          AForm := Self;
     end; //** with FPflegeBlobParams do

try
   ModalCallActive := true;
   i := Call (dnDobosCommon, 'inputartikelfile', @FPflegeBlobParams);
finally
   ModalCallActive := false;
   CheckIB;
end; //** try..finally

//** 11.2 rausgenommen weil evtl. editierte Daten verloren gingen
//PosMain(CurrArtNr, '', mpExact, false);

end; //** procedure SBT_PflegeBlobClick


(******************************************************************************)
(***   EDT_ArtNr: OnLookupClick (Suchen in Kurzform)                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_ArtNrLookupClick(Sender: TObject);
var
   FSuchLVParams : TSuchLVParams;
   ANr           : string;
   b             : boolean;

begin

inherited;
if Erfassen then
   Exit;

if not DTS_Open then
   begin
        ANr := EDT_ArtNr.Text;
        OpenDataSources;
        EDT_ArtNr.Text := ANr;
   end; //** if not DTS_Open

UpdateButtons;

with FSuchLVParams  do
     begin
          AAskMode := false;
          AArtNr := '';
          ASuchText := EDT_ArtNr.Text;
          AOrderBy  := 0;
          ASuchFeld := 0;
          AComponent:= EDT_ArtNr;
     end; //** with FSuchLVParams do

if Call (dnDobosSuchen, 'suchenlv', @FSuchLVParams) = 1 then
   begin
        if AQY_ArtikelStamm.State <> dsInsert then
           begin
                try
                   AQY_ArtikelStamm.Cancel;
                   try
                      if (TrimRight(LastArtNr) <> TrimRight(EDT_ArtNr.Text)) then
                         LastArtNr := '';
                      b := PosMain(FSuchLVParams.AArtNr, '', mpExact, false);
                      if b then
                         begin
                              UpdateRecentList;
                              GetLinkagePointer^.LinkLastArtNr := FSuchLVParams.AArtNr;
                         end;
                   except
                      on E:Exception do
                         ShowMessage(E.Message);
                   end; //** try..exccept
                   if not b then
                      begin
                           CloseDataSources;
                           EDT_ArtNr.Text := '';
                           EDT_KB.Text := '';
                           if EDT_KB.CanFocus then
                              EDT_KB.SetFocus;
                      end; //** if not b
                finally
                   if EDT_ArtNr.CanFocus then
                      EDT_ArtNr.SetFocus;
                   SortOrder := asArtNr;
                   SetzeKey;
                end; //** try..finally
           end; //** if AQY_ArtikelStamm.State <> dsInsert

   end //** if Call (dnDobosSuchen, 'suchenlv', @FSuchLVParams) = 1
else
   if AQY_ArtikelStamm.Active then
      EDT_ArtNr.Text := TrimRight(AQY_ArtikelStammARTNR.AsString)
   else
      EDT_ArtNr.Text := '';

UpdateButtons;

end; //** procedure EDT_ArtNrLookupClick


(******************************************************************************)
(***      EDT_AufschlagGruppe: OnLookupClick                                ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_AufschlagGruppeLookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkFaKalk, Sender, Self);

end; //** procedure EDT_AufschlagGruppeLookupClick


(******************************************************************************)
(***   EDT_KB: OnLookupClick (Suchen in Kurzform)                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_KBLookupClick(Sender: TObject);
var
   FSuchLVParams : TSuchLVParams;
   s             : string;

begin

inherited;
if (Erfassen) or (Aendern) then
   Exit;

s := EDT_KB.Text;
if not DTS_Open then
   begin
        OpenDataSources;
        EDT_KB.Text := s;
   end; //** if not DTS_Open

KB_Suche := true;
UpdateButtons;

with FSuchLVParams do
     begin
          AAskMode := false;
          AArtNr := '';
          ASuchText := EDT_KB.Text;
          AOrderBy  := 1;
          ASuchFeld := 1;
          AComponent:= EDT_KB;
     end; //** with FSuchLVParams do

if Call (dnDobosSuchen, 'suchenlv', @FSuchLVParams) = 1 then
   begin
        if AQY_ArtikelStamm.State <> dsInsert then
           begin
                try
                   AQY_ArtikelStamm.Cancel;
                   if not PosMain(FSuchLVParams.AArtNr, '', mpExact, false) then
                      begin
                           CloseDataSources;
                           EDT_ArtNr.Text := '';
                           EDT_KB.Text := '';
                           if EDT_KB.CanFocus then
                              EDT_KB.SetFocus;
                      end //** if not TBL_VArtikelStamm.FindKey([i])
                   else
                      begin
                           UpdateRecentList;
                           GetLinkagePointer^.LinkLastArtNr := FSuchLVParams.AArtNr;
                      end;
                finally
                   if EDT_ArtNr.CanFocus then
                      EDT_ArtNr.SetFocus;
                   SortOrder := asKB;
                   SetzeKey;
                end; //** try..finally
           end; //** if AQY_ArtikelStamm.State <> dsInsert
        KB_Suche := false;
   end //** if Call (dnDobosSuchen, 'suchenlv', @FSuchLVParams) = 1
else
   if AQY_ArtikelStamm.Active then
      EDT_KB.Text := AQY_ArtikelStammKB.AsString
   else
      EDT_KB.Text := '';

UpdateButtons;

end; //** procedure EDT_KBLookupClick


(******************************************************************************)
(***   EDT_BN: OnLookupClick (Suchen in Kurzform)                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_BNLookupClick(Sender: TObject);
var
   FSuchLVParams : TSuchLVParams;
   s             : string;

begin

inherited;
if (Erfassen) or (Aendern) then
   Exit;

s := EDT_BN.Text;
if not DTS_Open then
   begin
        OpenDataSources;
        EDT_BN.Text := s;
   end; //** if not DTS_Open

UpdateButtons;
with FSuchLVParams do
     begin
          AAskMode := false;
          AArtNr := '';
          ASuchText := EDT_BN.Text;
          AOrderBy  := 2;
          ASuchFeld := 2;
          AComponent:= EDT_BN;
     end; //** with FSuchLVParams do

if Call (dnDobosSuchen, 'suchenlv', @FSuchLVParams) = 1 then
   begin
        if AQY_ArtikelStamm.State <> dsInsert then
           begin
                try
                   AQY_ArtikelStamm.Cancel;
                   if not PosMain(FSuchLVParams.AArtNr, '', mpExact, false) then
                      begin
                           CloseDataSources;
                           EDT_ArtNr.Text := '';
                           EDT_KB.Text := '';
                           if EDT_KB.CanFocus then
                              EDT_KB.SetFocus;
                      end //** if not PosMain(FSuchLVParams.AArtNr, '', mpExact, false)
                   else
                      begin
                           UpdateRecentList;
                           GetLinkagePointer^.LinkLastArtNr := FSuchLVParams.AArtNr;
                      end;
                finally
                   if EDT_ArtNr.CanFocus then
                      EDT_ArtNr.SetFocus;
                   SortOrder := asBN;
                   SetzeKey;
                end; //** try..finally
           end; //** if AQY_ArtikelStamm.State <> dsInsert

   end //** if Call (dnDobosSuchen, 'suchenlv', @FSuchLVParams) = 1
else
   if AQY_ArtikelStamm.Active then
      EDT_BN.Text := AQY_ArtikelStammBN.AsString
   else
      EDT_BN.Text := '';


UpdateButtons;

end; //** procedure EDT_BNLookupClick


(******************************************************************************)
(***      EDT_LiefBestellNr: OnLookupClick                                  ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_LiefBestellNrLookupClick(Sender: TObject);
var
   FSuchLVParams : TSuchLVParams;
   s             : string;

begin

inherited;
if (Erfassen) or (Aendern) then
   Exit;

s := EDT_LiefBestellNr.Text;
if not DTS_Open then
   begin
        OpenDataSources;
        EDT_LiefBestellNr.Text := s;
   end; //** if not DTS_Open

UpdateButtons;
with FSuchLVParams do
     begin
          AAskMode := false;
          AArtNr := '';
          if Sender = BTN_SucheNachLiefBestellNr then
             ASuchText := ''
          else
             ASuchText := EDT_LiefBestellNr.Text;
          AOrderBy  := 6;
          ASuchFeld := 6;
          AComponent:= EDT_LiefBestellNr;
     end; //** with FSuchLVParams do

if Call (dnDobosSuchen, 'suchenlv', @FSuchLVParams) = 1 then
   begin
        if AQY_ArtikelStamm.State <> dsInsert then
           begin
                try
                   AQY_ArtikelStamm.Cancel;
                   if not PosMain(FSuchLVParams.AArtNr, '', mpExact, false) then
                      begin
                           CloseDataSources;
                           EDT_ArtNr.Text := '';
                           EDT_KB.Text := '';
                           if EDT_KB.CanFocus then
                              EDT_KB.SetFocus;
                      end //** if not PosMain(FSuchLVParams.AArtNr, '', mpExact, false)
                   else
                      begin
                           UpdateRecentList;
                           GetLinkagePointer^.LinkLastArtNr := FSuchLVParams.AArtNr;
                      end;
                finally
                   if EDT_ArtNr.CanFocus then
                      EDT_ArtNr.SetFocus;
                   SortOrder := asBN;
                   SetzeKey;
                end; //** try..finally
           end; //** if AQY_ArtikelStamm.State <> dsInsert

   end; //** if Call (dnDobosSuchen, 'suchenlv', @FSuchLVParams) = 1

UpdateButtons;

end; //** procedure EDT_LiefBestellNrLookupClick


(******************************************************************************)
(***   EDT_ZN: OnLookupClick (Suchen in Kurzform)                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_ZNLookupClick(Sender: TObject);
var
   FSuchLVParams : TSuchLVParams;
   s             : string;

begin

inherited;
if (Erfassen) or (Aendern) then
   Exit;

s := EDT_ZN.Text;
if not DTS_Open then
   begin
        OpenDataSources;
        EDT_ZN.Text := s;
   end; //** if not DTS_Open

with FSuchLVParams do
     begin
          AAskMode := false;
          AArtNr := '';
          ASuchText := EDT_ZN.Text;
          AOrderBy  := 3;
          ASuchFeld := 3;
          AComponent:= EDT_ZN;
     end; //** with FSuchLVParams do

if Call (dnDobosSuchen, 'suchenlv', @FSuchLVParams) = 1 then
   begin
        if AQY_ArtikelStamm.State <> dsInsert then
           begin
                try
                   AQY_ArtikelStamm.Cancel;
                   if not PosMain(FSuchLVParams.AArtNr, '', mpExact, false) then
                      begin
                           CloseDataSources;
                           EDT_ArtNr.Text := '';
                           EDT_KB.Text := '';
                           if EDT_KB.CanFocus then
                              EDT_KB.SetFocus;
                      end  //** if not PosMain(FSuchLVParams.AArtNr, '', mpExact, false)
                   else
                      begin
                           UpdateRecentList;
                           GetLinkagePointer^.LinkLastArtNr := FSuchLVParams.AArtNr;
                      end;
                finally
                   if EDT_ArtNr.CanFocus then
                      EDT_ArtNr.SetFocus;
                   SortOrder := asZN;
                   SetzeKey;
                end; //** try..finally
           end; //** if AQY_ArtikelStamm.State <> dsInsert

   end //** if Call (dnDobosSuchen, 'suchenlv', @FSuchLVParams) = 1
else
   if AQY_ArtikelStamm.Active then
      EDT_ZN.Text := AQY_ArtikelStammZN.AsString
   else
      EDT_ZN.Text := '';

UpdateButtons;

end; //** procedure EDT_ZNLookupClick


(******************************************************************************)
(***   EDT_BEZ_1: OnLookupClick (Suchen in Kurzform)                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_BEZ_1LookupClick(Sender: TObject);
var
   FSuchLVParams : TSuchLVParams;
   s             : string;

begin

inherited;
if (Erfassen) or (Aendern) then
   Exit;

s := EDT_Bez_1.Text;

if not DTS_Open then
   begin
        OpenDataSources;
        EDT_Bez_1.Text := s;
   end; //** if not DTS_Open

UpdateButtons;

with FSuchLVParams do
     begin
          AAskMode := false;
          AArtNr := '';
          ASuchText := EDT_BEZ_1.Text;
          AOrderBy  := 4;
          ASuchFeld := 4;
          AComponent:= EDT_Bez_1;
     end; //** with FSuchLVParams do

if Call (dnDobosSuchen, 'suchenlv', @FSuchLVParams) = 1 then
   begin
        if AQY_ArtikelStamm.State <> dsInsert then
           begin
                try
                   AQY_ArtikelStamm.Cancel;
                   if not PosMain(FSuchLVParams.AArtNr, '', mpExact, false) then
                      begin
                           CloseDataSources;
                           EDT_ArtNr.Text := '';
                           EDT_KB.Text := '';
                           if EDT_KB.CanFocus then
                              EDT_KB.SetFocus;
                      end //** if not PosMain(FSuchLVParams.AArtNr, '', mpExact, false)
                   else
                      begin
                           UpdateRecentList;
                           GetLinkagePointer^.LinkLastArtNr := FSuchLVParams.AArtNr;
                      end;
                finally
                   if EDT_ArtNr.CanFocus then
                      EDT_ArtNr.SetFocus;
                   SortOrder := asZN;
                   SetzeKey;

                end; //** try..finally
           end; //** if AQY_ArtikelStamm.State <> dsInsert

   end //** if Call (dnDobosSuchen, 'suchenlv', @FSuchLVParams) = 1
else
   if AQY_ArtikelStamm.Active then
      EDT_Bez_1.Text := AQY_ArtikelStammBEZ_1.AsString
   else
      EDT_Bez_1.Text := '';

UpdateButtons;

end; //** procedure EDT_Bez_1LookupClick


(******************************************************************************)
(***  EDT_KB: OnKeyDown                                                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_KBKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin

inherited;
if ((Key = VK_F2) or
   ((Key = VK_Return) and (KB_Suche)) or
   ((Key = VK_Return) and
    (AQY_ArtikelStamm.State = dsBrowse) and
    (EDT_KB.Text <> AQY_ArtikelStammKB.AsString))) then
   begin
        KB_Suche := false;
        if EDT_ArtNr.Text <> CurrArtNr then
           EDT_KBLookupClick(EDT_KB);
   end; //** if ((Key = VK_F2) or ..

end; //** procedure EDT_KBKeyDown


(******************************************************************************)
(***  AQY_Umsatz: OnCalcFields                                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_UmsatzCalcFields(DataSet: TDataSet);
var
   r : Currency;

begin

inherited;

if AQY_UmsatzSUMAJVK_WERT.AsCurrency <> 0 then
   r := ((AQY_UmsatzSUMAJDB_WERT.AsCurrency / AQY_UmsatzSUMAJVK_WERT.AsCurrency) * 100)
else
   r := 0;

Runde(r);
AQY_UmsatzAJ_DB_PROZ.AsCurrency := r;

if AQY_UmsatzSUMVJVK_WERT.AsCurrency <> 0 then
   r := ((AQY_UmsatzSUMVJDB_WERT.AsCurrency / AQY_UmsatzSUMVJVK_WERT.AsCurrency) * 100)
else
   r := 0;

Runde(r);
AQY_UmsatzVJ_DB_PROZ.AsCurrency := r;

if AQY_UmsatzSUMVVJVK_WERT.AsCurrency <> 0 then
   r := ((AQY_UmsatzSUMVVJDB_WERT.AsCurrency / AQY_UmsatzSUMVVJVK_WERT.AsCurrency) * 100)
else
   r := 0;

Runde(r);
AQY_UmsatzVVJ_DB_PROZ.AsCurrency := r;

if AQY_UmsatzSUMTOTVK_WERT.AsCurrency <> 0 then
   r := ((AQY_UmsatzSUMTOTDB_WERT.AsCurrency / AQY_UmsatzSUMTOTVK_WERT.AsCurrency) * 100)
else
   r := 0;

Runde(r);
AQY_UmsatzTOT_DB_PROZ.AsCurrency := r;

end; //** procedure AQY_UmsatzCalcFields


(******************************************************************************)
(***  !SCheckNebenTabellen                                                  ***)
(******************************************************************************)

procedure TFRM_DobosLV.CheckNebenTabellen(AAuchMaster: boolean);
begin

if not DTS_Open then
   Exit;

if AAuchMaster then
   if AQY_ArtikelStamm.Active then
      if (AQY_ArtikelStamm.Modified) then
      //!!if ((AQY_ArtikelStamm.Modified) or ((DauerAendern) and (BTN_DBNavPost.Enabled))) then
         begin
              with AQY_ArtikelStamm do
                   try
                      if (MessageDlg(rs_LV_QStoreChanges,
                         mtConfirmation,[mbYes,mbNo],0)) = mrYes then
                         if not NavClicked then
                            BTN_DBNavPostClick(BTN_DBNavPost)
                         else
                            if not NavClicked then
                               Cancel;
                   except
                      raise;
                   end; //** try..except
         end; //** if ((AQY_ArtikelStamm.Modified) or ((DauerAendern) and (BTN_Speichern.Enabled))) then

with AQY_Preise do
    begin
         try
            if (Modified) then
               if (MessageDlg(rs_LV_QStoreChangesPreisgruppe, mtConfirmation,[mbYes,mbNo],0)) = mrYes then
                  Post;
            if AQY_Preise.State in [dsEdit,dsInsert] then
               Cancel;
         except
            raise;
     end; //** try..except
end; //** with AQY_Preise do

with AQY_Lager do
    begin
         try
            ResetLagerColors;
            if (Modified) then
               if (MessageDlg(rs_LV_QStoreChangesLager, mtConfirmation,[mbYes,mbNo],0)) = mrYes then
                   Post;
            if AQY_Lager.State in [dsEdit,dsInsert] then
               Cancel;
         except
            raise;
         end; //** try..except
    end; //** with AQY_Lager do

with AQY_Lieferant do
    begin
         try
            if IsSchnellAnlage then
               begin
                    if AQY_Lieferant.State <> dsBrowse then
                       begin
                            if AQY_LieferantKUNU.AsInteger = 0 then
                               Cancel;
                       end; //** if AQY_Lieferant.State <> dsBrowse then
               end; //** if IsSchnellAnlage then

            if (Modified) then
               if (MessageDlg(rs_LV_QStoreChangesLieferant, mtConfirmation,[mbYes,mbNo],0)) = mrYes then
                  Post;
            if AQY_Lieferant.State in [dsEdit,dsInsert] then
               begin
                    Cancel;
                    EDT_LiefRasterExit(EDT_LiefRaster);
               end;
         except
            raise;
         end; //** try..except
    end; //** with AQY_Lieferant do

with AQY_FremdTexte do
    begin
         try
            if (Modified) then
               if (MessageDlg(rs_LV_QStoreChangesFremdTexte, mtConfirmation,[mbYes,mbNo],0)) = mrYes then
                  Post;
            if AQY_FremdTexte.State in [dsEdit,dsInsert] then
               Cancel;
         except
            raise;
         end; //** try..except
    end; //** with AQY_FremdTexte do

with AQY_DVKalk do
    begin
         try
            if (Modified) then
              if (MessageDlg(rs_LV_QStoreChangesDVKalk, mtConfirmation,[mbYes,mbNo],0)) = mrYes then
                  Post;
            if AQY_DVKalk.State in [dsEdit,dsInsert] then
               Cancel;
         except
            raise;
         end; //** try..except
    end; //** with AQY_DVKalk do

with AQY_MiniSet do
    begin
         try
            if (Modified) then
               if (MessageDlg(rs_LV_QStoreChangesMiniSet, mtConfirmation,[mbYes,mbNo],0)) = mrYes then
                  Post;
            if AQY_MiniSet.State in [dsEdit,dsInsert] then
               Cancel;
         except
            raise;
         end; //** try..except
   end; //** with AQY_MiniSet do

end; //** procedure CheckNebenTabellen


(******************************************************************************)
(***  PostStammAenderung                                                    ***)
(******************************************************************************)

procedure TFRM_DobosLV.PostStammAenderung(AMiniSetFlag : boolean);


         (*********************************************************************)
         (***      lokale function GetMiniSetJN                             ***)
         (*********************************************************************)
          function GetMiniSetJN : string;
          var
             AValues : array [0..0] of Variant;

          begin

          result := 'N';
          if ReadAnyFields (GetDobosADB,
                            'ARTIKEL_MINISET',
                            'WHERE ARTNR = '''+Trim(EDT_ArtNr.Text)+''' ',
                            ['COUNT(*)'],
                            AValues) then
             try
                if AValues[0] > 0 then
                   result := 'J';
             except
             end; //** try..except

          end; //** lokale function GetMiniSetJN

(******************************************************************************)
(***  Start der procedure PostStammAenderung                                ***)
(******************************************************************************)
begin

with AQY_ArtikelStamm do
     if State = dsBrowse then
        try
           ReadFWFlag := true;
           Edit;   //** No StateChange, No AfterScroll
           EDT_ArtNr.Text := TrimRight(AQY_ArtikelStammARTNR.AsString);
           EDT_KB.Text := TrimRight(AQY_ArtikelStammKB.AsString);
           EDT_BN.Text := TrimRight(AQY_ArtikelStammBN.AsString);
           EDT_ZN.Text := TrimRight(AQY_ArtikelStammZN.AsString);
           EDT_BEZ_1.Text := TrimRight(AQY_ArtikelStammBEZ_1.AsString);
           if AMiniSetFlag then
              AQY_ArtikelStammMS_JN.AsString := GetMiniSetJN;
           Post; //** Setzt Änderungsdatum
           ReadFWFlag := false;
        except
           on E:Exception do
              begin
                   ReadFWFlag := false;
                   ShowMessage(E.Message);
              end; //** on E:Exception do
        end //** try..except
     else
        if AMiniSetFlag then
           begin
                ReadFWFlag := true;
                AQY_ArtikelStammMS_JN.AsString := GetMiniSetJN;
                ReadFWFlag := false;
           end; //** if AMiniSetFlag

end; //** procedure PostStammAenderung


(******************************************************************************)
(***  EDT_KB: OnExit                                                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_KBExit(Sender: TObject);
begin

inherited;
KB_Suche := false;  //** auf jeden Fall die KB-Suche abschalten
if ArtNrEntryZwang then
   Exit;

if AQY_ArtikelStamm.State in [dsInsert, dsEdit] then
   if isSpace(EDT_KB.Text) then
      begin
           if EDT_KB.CanFocus then
              EDT_KB.SetFocus;
      end
   else
      if (AQY_ArtikelStammKB.AsString <> EDT_KB.Text) then
          AQY_ArtikelStammKB.AsString := EDT_KB.Text;

if ((Erfassen) and not (DauerAendern)) then
   begin
        BTN_DBNavPost.Enabled := true;
        SetAbbButtonVisible(true);
   end; //** if ((Erfassen) and not (DauerAendern))

end; //** procedure EDT_KBExit


(******************************************************************************)
(***  EDT_KB: OnEnter                                                       ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_KBEnter(Sender: TObject);
begin

inherited;
if KB_Suche then
   begin
        EDT_KB.Text := '';
   end; //** if KB_Suche

if ((Erfassen) and (not ArtNrEntryZwang)) then
   EDT_ArtNr.Enabled := false;

if (GetLinkagePointer.Serial = KSerial_Mentec) then
   if (Erfassen) and (not ArtNrEntryZwang) then
       VorbelegungBezMentec;

if not SelectionFeuert then
   if (MNI_EnableBIOSSearch.Checked) then
      begin
           EDT_KB.BIOSZusatzWhere := 'ARTNR <> ''ZZZZZZZZZZ'' AND STATUS <> 9 ';
           EDT_KB.BIOSInitSearch;
      end; //** if (MNI_EnableBIOSSearch.Checked) then

end; //** procedure EDT_KBEnter


(******************************************************************************)
(***  EDT_KB: OnChange  ACHTUNG! alle Edit-Felder zeigen auf diese Routine  ***)
(***          schalten bei Dauer-Änderung Save-Button ein                   ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_KBChange(Sender: TObject);
begin

inherited;
if DTS_Open then
   if ((DauerAendern)) then
      begin
           BTN_DBNavPost.Enabled := true;
           SetAbbButtonVisible(true);
           if not (DTS_ArtikelStamm.State in [dsEdit]) then
              begin
                   PushKBFlag := true;   //** damit FieldChange nicht KB neu versorgt!!
                   DTS_ArtikelStamm.Edit;
                   PushKBFlag := false;
              end; //** if not (DTS_ArtikelStamm.State in [dsEdit])
      end //** if ((DauerAendern))..
   else
      if Erfassen then
         begin
              if (((Self.ActiveControl = EDT_KB) and (not IsSpace(EDT_KB.Text))) or
                   ((Self.ActiveControl <> EDT_ArtNr) and
                    (Self.ActiveControl <> EDT_KB) and
                    (Self.ActiveControl <> EDT_BN) and
                    (Self.ActiveControl <> EDT_ZN) and
                    (Self.ActiveControl <> EDT_BEZ_1))) then
                 begin
                      NeuEingabeAktiv := true;
                      BTN_DBNavPost.Enabled := true;
                      SetAbbButtonVisible(true);
                 end;

              if (AQY_ArtikelStamm.State in [dsEdit, dsInsert]) then
                 begin
                      if (Self.ActiveControl = EDT_KB) then
                         AQY_ArtikelStammKB.AsString := EDT_KB.Text;  //** weil bei SBT kein Focuswechsel, KB -> TBL_Feld
                      if (Self.ActiveControl = EDT_BN) then
                         AQY_ArtikelStammBN.AsString := EDT_BN.Text;
                      if (Self.ActiveControl = EDT_ZN) then
                         AQY_ArtikelStammZN.AsString := EDT_ZN.Text;
                      if (Self.ActiveControl = EDT_BEZ_1) then
                         AQY_ArtikelStammBEZ_1.AsString := EDT_BEZ_1.Text;
                 end; //** if (AQY_ArtikelStamm.State in [dsEdit, dsInsert])
         end; //** if Erfassen

end; //** procedure EDT_KBChange


(******************************************************************************)
(***  EDT_BN: OnEnter                                                       ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_BNEnter(Sender: TObject);
begin

inherited;
if not SelectionFeuert then
   if (MNI_EnableBIOSSearch.Checked) then
      begin
           EDT_BN.BIOSZusatzWhere := 'ARTNR <> ''ZZZZZZZZZZ'' AND STATUS <> 9 ';
           EDT_BN.BIOSInitSearch;
      end; //** if (MNI_EnableBIOSSearch.Checked) then

end; //** procedure EDT_BNEnter


(******************************************************************************)
(***  EDT_BN: OnExit                                                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_BNExit(Sender: TObject);
begin

inherited;
if AQY_ArtikelStamm.State in [dsInsert, dsEdit] then
   if (AQY_ArtikelStammBN.AsString <> EDT_BN.Text) then
      AQY_ArtikelStammBN.AsString := EDT_BN.Text;

if ((Erfassen) and not (DauerAendern)) then
   begin
        BTN_DBNavPost.Enabled := true;
        SetAbbButtonVisible(true);
   end;

end; //** procedure EDT_BNExit


(******************************************************************************)
(***  EDT_ZN: OnEnter                                                       ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_ZNEnter(Sender: TObject);
begin

inherited;
if not SelectionFeuert then
   if (MNI_EnableBIOSSearch.Checked) then
      begin
           EDT_ZN.BIOSZusatzWhere := 'ARTNR <> ''ZZZZZZZZZZ'' AND STATUS <> 9 ';
           EDT_ZN.BIOSInitSearch;
      end; //** if (MNI_EnableBIOSSearch.Checked) then

end; //** procedure EDT_ZNEnter


(******************************************************************************)
(***  EDT_ZN: OnExit                                                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_ZNExit(Sender: TObject);
begin

inherited;
if AQY_ArtikelStamm.State in [dsInsert, dsEdit] then
   if (AQY_ArtikelStammZN.AsString <> EDT_ZN.Text) then
       AQY_ArtikelStammZN.AsString := EDT_ZN.Text;

if ((Erfassen) and not (DauerAendern)) then
   begin
        BTN_DBNavPost.Enabled := true;
        SetAbbButtonVisible(true);
   end;

end; //** procedure EDT_ZNExit


(******************************************************************************)
(***      EDT_BEZ_1: OnEnter                                                ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_BEZ_1Enter(Sender: TObject);
begin

inherited;
if not SelectionFeuert then
   if (MNI_EnableBIOSSearch.Checked) then
      begin
           EDT_BEZ_1.BIOSZusatzWhere := 'ARTNR <> ''ZZZZZZZZZZ'' AND STATUS <> 9 ';
           EDT_BEZ_1.BIOSInitSearch;
      end; //** if (MNI_EnableBIOSSearch.Checked) then

end; //** procedure EDT_BEZ_1Enter


(******************************************************************************)
(***  EDT_BEZ_1: OnExit                                                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_BEZ_1Exit(Sender: TObject);
begin

inherited;
if AQY_ArtikelStamm.State in [dsInsert, dsEdit] then
   if (AQY_ArtikelStammBEZ_1.AsString <> EDT_BEZ_1.Text) then
      AQY_ArtikelStammBEZ_1.AsString := EDT_BEZ_1.Text;

if ((Erfassen) and not (DauerAendern)) then
   begin
        BTN_DBNavPost.Enabled := true;
        SetAbbButtonVisible(true);
   end;

end; //** procedure EDT_BEZ_1Exit


(******************************************************************************)
(***  AQY_ArtikelStamm: AfterInsert                                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_ArtikelStammAfterInsert(DataSet: TDataSet);
var
   ArtNrSet : boolean;
   SemOpen  : integer;
   AValues : array [0..0] of Variant;

           (*******************************************************************)
           (***  lokale function AcceptNewArtNr                             ***)
           (*******************************************************************)
            function AcceptNewArtNr : boolean;
            begin

            result := true;
            ArtNrEntryZwang := true;
            EDT_ArtNr.Enabled := true;
            while ArtNrEntryZwang do
                  begin
                       Application.ProcessMessages;
                       if ((Self.ActiveControl <> EDT_ArtNr) and (ArtNrEntryZwang)) then
                          begin
                               if EDT_Artnr.CanFocus then                               
                                  EDT_ArtNr.SetFocus;
                          end;
                       Application.ProcessMessages;
                       if AQY_ArtikelStamm.State <> dsInsert then
                          begin
                               result := false;
                               Exit;  //** Insert ausgeschaltet oder Cancel des Navi´s
                          end;

                end; //** while ArtNrEntryZwang do

            end; //** lokale function AcceptNewArtNr

           (*******************************************************************)
           (***  lokale function CheckNewArtNr                              ***)
           (*******************************************************************)
            function CheckNewArtNr : boolean;
            var
               b : boolean;
            begin

            result := true;
            b := ReadAnyFields (GetDobosADB,
                                'ARTIKEL_STAMM',
                                'WHERE ARTNR = '''+SQLTextString(TrimRight(EDT_ArtNr.Text))+''' ',
                                ['ARTNR'],
                                 AValues);
            if b then
               begin
                    result := false;
                    ShowMessage(rs_LV_ArtikelnummerExistsChange);
               end; //** if ((b) or (AValues = EDT_ArtNr.Text))

            end; //** lokale function CheckNewArtNr


begin

inherited;


//PCT_TexteBestand.ActivePage := TAB_Texte;
//PCT_Bewegung.ActivePage := TAB_Lieferant;

EDT_ArtNr.Text := '';
EDT_KB.Text := '';
EDT_BN.Text := '';
EDT_ZN.Text := '';
EDT_BEZ_1.Text := '';

ArtNrSet := false;
while not ArtNrSet do
      begin
           if ErfassenMaske then
              CallNextArtNrMaske;

           //** Warten auf Eingabe...
           if not AcceptNewArtNr then
              Exit;

           //** Sicherheitshalber schließen
           if LastErfassenSemaphore <> '' then
              begin
                   CloseSemaphore(LastErfassenSemaphore);
                   LastErfassenSemaphore := '';
              end; //** if LastErfassenSemaphore <> ''

           //** Bereits in Eingabe an anderer Station?
           LastErfassenSemaphore := semERFASSENARTIKEL + SQLTextString(TrimRight(EDT_ArtNr.Text));
           SemOpen := OpenSemaphore(LastErfassenSemaphore);
           if SemOpen <> 1 then
              begin
                   CloseSemaphore(LastErfassenSemaphore);
                   LastErfassenSemaphore := '';
                   ShowMessage(rs_LV_ArtikelnummerIsInserted);
                   Application.ProcessMessages;
                   Continue;
              end;

           if not CheckNewArtNr then
              begin
                   CloseSemaphore(LastErfassenSemaphore);
                   LastErfassenSemaphore := '';
                   Continue;
              end;

           ArtNrSet := true;

      end; //** while not ArtNrSet do

try
   InitStammFelder;
   if not CopyFlag then
      begin
           //auskommentiert, macht keinen Sinn wegen ReadAllData weiter unten //** 08.11.2022 PI
           //SBT_PreiseInsertClick(SBT_PreiseInsert);  //** 08.11.2022 PI
           //SBT_LiefInsertClick(SBT_LiefInsert);      //** 08.11.2022 PI
           RBT_PreiseAktuell.Checked := true;
           EDT_PreiseWS.AsInteger := 0;
      end; //** if not CopyFlag

   if CopyFlag then
      begin
           AQY_Preise.Cancel;
           AQY_Lieferant.Cancel;
           AQY_MiniSet.Cancel;
           AQY_FremdTexte.Cancel;
           AQY_DVKalk.Cancel;
           CopyPreiseLiefMiniSet;

           if CopySL then
              CopyStueckliste;
           if CopyAP then
              if (GetLinkagePointer^.Module[imDAVOS]) then
                 CopyArbeitsplan;
      end; //** if CopyFlag then

except
   on E:Exception do
      ShowMessage(E.Message);
end; //** try..except

ReadAllData;

if (ErfassenMaske) and (AktuellLieferant >= FirstKreditor) then //** 08.11.2022 PI
   SBT_LiefInsertClick(SBT_LiefInsert);                         //** 08.11.2022 PI

UpdateButtons;
if EDT_KB.CanFocus then
   EDT_KB.SetFocus;
Application.ProcessMessages;
NeuEingabeAktiv := false;
Strg_I_Flag := false;

end; //** procedure AQY_ArtikelStammAfterInsert


(******************************************************************************)
(***   !SCopyPreiseLiefMiniSet                                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.CopyPreiseLiefMiniSet;
var
   NeueArtNr : string;

begin

NeueArtNr := SQLTextString(TrimRight(AQY_ArtikelStammARTNR.AsString));

with AQY_Divers do
     try
        if Active then
           Close;
        Connection := GetDobosADB;

        //** Kopieren Fremdtexte
        SQL.Clear;
        SQL.Add('INSERT INTO ARTIKEL_TEXTE SELECT '''+NeueArtNr+''', '
               +'SPRACHE, BEZ_1, BEZ_2, BEZ_3, BEZ_4, BEZ_5, BEZ_6, BEZ_7, BEZ_8 '
               +'FROM ARTIKEL_TEXTE WHERE ARTNR = '''
               +SQLTextString(CopyFromArtNr)+''' ');
        UCExecSQL(AQY_Divers);

        if CopyVK then
           begin
                SQL.Clear;
                SQL.Add('INSERT INTO ARTIKEL_PREISE SELECT '''+NeueArtNr+''', '
                       +'ART, WS, VK_1, VK_2, VK_3, VK_4, VK_5, VK_6, '
                       +'VK_7, VK_8, VK_9, VK_10, ''01.01.1950'' FROM ARTIKEL_PREISE WHERE ARTNR = '''
                       +SQLTextString(CopyFromArtNr)+''' ');
                UCExecSQL(AQY_Divers);
           end; //** if CopyVK

        if CopyEK then
           begin
                SQL.Clear;
                //!!EditMark!!:ArtikelLieferantÄnderungen
                SQL.Add('INSERT INTO ARTIKEL_LIEFERANT SELECT '''+NeueArtNr+''', '
                       +'NUMMER, KUNU, BESTELL_NR, WS, RABATT, WBZ, '
                       +'PE, RASTER, STAFFEL_BP, ZOLL_BP, FRACHT_BP, '
                       //** 10.2 GESPERRT ist neu
                       +'EK_1, EK_2, EK_3, EK_4, EK_5, '
                       //** 11.1
                       +'EK_6, EK_7, EK_8, EK_9, EK_10, '
                       +'ZOLL, FRACHT, ''01.01.1950'', MIAB, BEM, 0, '
                       //** 11.1
                       +'0, ' //** Hyperlink
                       //** 12.1
                       +'ZUSCHLAGSART1, ZUSCHLAG1, '
                       +'ZUSCHLAGSART2, ZUSCHLAG2, '
                       +'ZUSCHLAGSART3, ZUSCHLAG3, '
                       +'RABATTIERT '
                       +'FROM ARTIKEL_LIEFERANT WHERE ARTNR = '''
                       +SQLTextString(CopyFromArtNr)+''' ');
                UCExecSQL(AQY_Divers);
           end; //** if CopyEK

        //** DVKalk - //**IB 02.06.2014 die archivierten Kalk-Daten sollten nicht kopiert werden
        if CopyEK then
           begin
                SQL.Clear;
                SQL.Add('INSERT INTO ARTIKEL_KALKULATION SELECT '''+NeueArtNr+''', '
                       +'NUMMER, EK_EINMALKOSTEN, EK_FERTIGUNG, EK_MATERIAL, EK_FREMDARBEIT_FIX, EK_FREMDARBEIT_VAR, EK_FREMDARBEIT_MINDEST, EK_RUESTKOSTEN, EK_ZUSCHLAG, '
                       +'EK_WERKZEUGKOSTEN, VK_EINMALKOSTEN, VK_FERTIGUNG, VK_MATERIAL, VK_FREMDARBEIT_FIX, VK_FREMDARBEIT_VAR, VK_FREMDARBEIT_MINDEST, VK_RUESTKOSTEN, '
                       +'VK_ZUSCHLAG, VK_WERKZEUGKOSTEN, BEM, ''01.01.1950'', 0, 0 '
                       +'FROM ARTIKEL_KALKULATION WHERE NUMMER < 100 AND ARTNR = '''
                       +SQLTextString(CopyFromArtNr)+''' ');
                UCExecSQL(AQY_Divers);
           end; //** if CopyEK

        if CopyMiniset then
           begin
                SQL.Clear;
                SQL.Add('INSERT INTO ARTIKEL_MINISET SELECT '''+NeueArtNr+''', '
                       +'NUMMER, UNTER_ARTNR, MENGE '
                       +'FROM ARTIKEL_MINISET WHERE ARTNR = '''+SQLTextString(CopyFromArtNr)+''' ');
                UCExecSQL(AQY_Divers);
           end; //** if CopyMiniset

        if CopyZusatzTexte then
           begin
                SQL.Clear;
                SQL.Add('INSERT INTO ARTIKEL_ZUSATZTEXT SELECT '''+NeueArtNr+''', '
                       +'SPRACHE, AG, AB, WA, LS, RE, GU, BE, LM, WR, INHALT '
                       +'FROM ARTIKEL_ZUSATZTEXT WHERE ARTNR = '''+SQLTextString(CopyFromArtNr)+''' ');
                UCExecSQL(AQY_Divers);
           end; //** if CopyZusatzTexte

        if CopyIB then
           begin
                SQL.Clear;
                SQL.Add('INSERT INTO INFOBLATT SELECT ''L'', '''+NeueArtNr+''', '
                       +'SCHLAGWORT_1, SCHLAGWORT_2, SCHLAGWORT_3, INHALT '
                       +'FROM INFOBLATT WHERE ART = ''L'' AND SCHLUESSEL = '''+SQLTextString(CopyFromArtNr)+''' ');
                UCExecSQL(AQY_Divers);
           end; //** if CopyIB

        if CopyWH then
           begin
                SQL.Clear;
                SQL.Add('INSERT INTO INFOBLATT SELECT ''w'', '''+NeueArtNr+''', '
                       +'SCHLAGWORT_1, SCHLAGWORT_2, SCHLAGWORT_3, INHALT '
                       +'FROM INFOBLATT WHERE ART = ''w'' AND SCHLUESSEL = '''+SQLTextString(CopyFromArtNr)+''' ');
                UCExecSQL(AQY_Divers);
           end; //** if CopyWH

        if CopyZusatz then
           begin
                ShowSQLWait;
                SQL.Clear;
                SQL.Add('INSERT INTO ARTIKEL_FILE SELECT '''+NeueArtNr+''', '
                       +'FILE_NAME, BEMERKUNG, FILE_INHALT '
                       +'FROM ARTIKEL_FILE WHERE ARTNR = '''+SQLTextString(CopyFromArtNr)+''' ');
                UCExecSQL(AQY_Divers);
                UnShowSQLWait;
           end; //** if CopyZusatz


        if Active then
           Close;
     except
        on E:Exception do
           ShowMessage(E.Message);

     end; //** try..except

end; //** procedure CopyPreiseLiefMiniSet


(******************************************************************************)
(***            InitStammFelder                                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.InitStammFelder;
begin


if CopyFlag then
   with RCC_Artikel do
        begin
             RCC_Artikel.InsertCopy;
             EDT_KB.Text := SaveKB;
             EDT_BN.Text := AQY_ArtikelStammBN.AsString;
             EDT_ZN.Text := AQY_ArtikelStammZN.AsString;
             EDT_BEZ_1.Text := AQY_ArtikelStammBEZ_1.AsString;
             //** 15.06.2011: Auftrag vom 15.06.2011
             if (GetlinkagePointer^.Serial = KSerial_Knauer) then
                AQY_ArtikelStammSTATUS.AsInteger := 3; //**17.07.2017 vorher 6; //** 25.04.2013 vorher = 8;
             if (GetLinkagePointer.Serial = KSerial_Mentec) then
                VorbelegungBezMentec;
             if (GetlinkagePointer^.Serial = KSerial_Yamaichi) then
                AQY_ArtikelStammSTATUS.AsInteger := 7;
             //** 31.08.2010: lt AW vom 03.08.2010
             //**if GetLinkagePointer^.Serial = KSerial_Knauer then
             //**   EDT_C2.TEXT := 'R';

             AQY_ArtikelStammDISPO_STOP.AsString := 'N';    //** 12.03.2024 PI (Mail UM)
        end //** with RCC_Artikel do
else
   begin
        AQY_ArtikelStammKB.AsString := '';
        AQY_ArtikelStammZN.AsString := '';
        AQY_ArtikelStammBN.AsString := '';
        AQY_ArtikelStammBEZ_1.AsString := '';
        if not Strg_I_Flag then
           AQY_ArtikelStammBEZ_2.AsString := '';
        Strg_I_Flag := false;
        AQY_ArtikelStammBEZ_3.AsString := '';
        AQY_ArtikelStammBEZ_4.AsString := '';
        AQY_ArtikelStammBEZ_5.AsString := '';
        AQY_ArtikelStammBEZ_6.AsString := '';
        AQY_ArtikelStammBEZ_7.AsString := '';
        AQY_ArtikelStammBEZ_8.AsString := '';
        AQY_ArtikelStammSACHMERKMAL.AsString := '00000000000000000000';
        AQY_ArtikelStammEAN_NUMMER.AsCurrency := 0.0;
        AQY_ArtikelStammINFO.AsString := '';
        AQY_ArtikelStammPRL_POS.AsInteger := 0;
        AQY_ArtikelStammGEWICHT.AsCurrency := 0.0;
        AQY_ArtikelStammV_EINHEIT.AsCurrency := 1.0;
        AQY_ArtikelStammARBEITSPREIS.AsCurrency := 0.0;
        AQY_ArtikelStammGUE_BEME.AsCurrency := 0.0;
        AQY_ArtikelStammEK.AsCurrency := 0.0;
        AQY_ArtikelStammMIN_DB.AsCurrency := 0.0;
        AQY_ArtikelStammDURCH_EK.AsCurrency := 0.0;
        AQY_ArtikelStammWG.AsInteger := 0;
        AQY_ArtikelStammRG.AsInteger := 0;
        AQY_ArtikelStammGARANTIE_ZEIT.AsInteger := 0;
        AQY_ArtikelStammRASTER_VK.AsInteger := STD_Raster;
        AQY_ArtikelStammPE_VK.AsInteger := 1;
        //** 15.06.2011: Auftrag vom 15.06.2011
        if (GetlinkagePointer^.Serial = KSerial_Knauer) then
           AQY_ArtikelStammSTATUS.AsInteger := 3 //**17.07.2017 vorher 6;  //** 25.04.2013 vorher = 8;
        else
           if (GetlinkagePointer^.Serial = KSerial_Yamaichi) then
              AQY_ArtikelStammSTATUS.AsInteger := 7
           else
              AQY_ArtikelStammSTATUS.AsInteger := 0;

        AQY_ArtikelStammUS.AsInteger := STD_US;
        AQY_ArtikelStammSL_JN.AsString := '';
        AQY_ArtikelStammMS_JN.AsString := '';
        AQY_ArtikelStammEM_JN.AsString := '';
        AQY_ArtikelStammME.AsString := STD_ME;
        AQY_ArtikelStammDK_1.AsCurrency := STD_DK1;
        AQY_ArtikelStammDK_2.AsCurrency := STD_DK2;
        AQY_ArtikelStammDK_3.AsCurrency := STD_DK3;
        AQY_ArtikelStammDK_4.AsCurrency := STD_DK4;
        AQY_ArtikelStammDK_5.AsCurrency := STD_DK5;
        AQY_ArtikelStammC1.AsString := '';
        AQY_ArtikelStammC2.AsString := '';
        //** 31.08.2010: lt AW vom 03.08.2010
        //**if GetLinkagePointer^.Serial = KSerial_Knauer then
        //**    AQY_ArtikelStammC2.AsString := 'R';
        AQY_ArtikelStammC3.AsString := '';
        AQY_ArtikelStammC4.AsString := '';
        AQY_ArtikelStammC5.AsString := '';
        AQY_ArtikelStammC6.AsString := '';
        AQY_ArtikelStammC7.AsString := '';
        AQY_ArtikelStammC8.AsString := '';
        AQY_ArtikelStammC9.AsString := '';
        AQY_ArtikelStammC10.AsString := '';
        AQY_ArtikelStammVIEWER_PFAD.AsString := '';
        AQY_ArtikelStammWARENNUMMER.AsInteger := 0;
        AQY_ArtikelStammURSPRUNG_LAND.AsInteger := 0;

        //** IB 15.03.2016: Auftrag vom 04.03.2016
        if (GetlinkagePointer^.Serial = KSerial_Knauer) then
           AQY_ArtikelStammURSPRUNG_LAND.AsInteger := 999;

        AQY_ArtikelStammURSPRUNG_REGION.AsInteger := 0;
        AQY_ArtikelStammMASSEINHEIT.AsCurrency := 0.0;
        AQY_ArtikelStammEM1_NUMMER.AsInteger := 0;
        AQY_ArtikelStammEM2_NUMMER.AsInteger := 0;
        AQY_ArtikelStammEM3_NUMMER.AsInteger := 0;
        AQY_ArtikelStammEM1_METHODE.AsString := '';
        AQY_ArtikelStammEM2_METHODE.AsString := '';
        AQY_ArtikelStammEM3_METHODE.AsString := '';
        AQY_ArtikelStammEM1_ANTEIL.AsCurrency := 0.0;
        AQY_ArtikelStammEM2_ANTEIL.AsCurrency := 0.0;
        AQY_ArtikelStammEM3_ANTEIL.AsCurrency := 0.0;
        AQY_ArtikelStammDURCHMESSER.AsCurrency := 0.0;
        AQY_ArtikelStammLAENGE.AsCurrency := 0.0;
        AQY_ArtikelStammBREITE.AsCurrency := 0.0;
        AQY_ArtikelStammHOEHE.AsCurrency := 0.0;
        AQY_ArtikelStammSPEZ_GEWICHT.AsCurrency := 0.0;
        AQY_ArtikelStammB_BASIS.AsInteger := 0;
        AQY_ArtikelStammP_BASIS.AsInteger := 0;
        AQY_ArtikelStammAENDERUNG_USER_NR.AsInteger := 0;
        AQY_ArtikelStammKALK_KZ.AsString := STD_KALK_KZ;
        AQY_ArtikelStammDISPO_STOP.AsString := 'N';
        //** 9.5
        AQY_ArtikelStammKALK_KZ_VK.AsString := STD_KALK_KZVK;
        AQY_ArtikelStammZN_REV.AsString := '   ';

        //** 10.0 - STD_MASSE... = 11.2
        AQY_ArtikelStammMASSE_SIND_MM.AsString := STD_MASSE_SIND_MM;
        AQY_ArtikelStammMASSE_FUER_FA.AsString := STD_MASSE_FUER_FA;
        AQY_ArtikelStammAMM_PRINT.AsString := 'N';
        AQY_ArtikelStammAMM_ART_KEY1.AsInteger := 0;
        AQY_ArtikelStammAMM_ART_KEY2.AsInteger := 0;
        AQY_ArtikelStammAMM_ART_KEY3.AsInteger := 0;
        AQY_ArtikelStammAMM_ART_KEY4.AsInteger := 0;
        AQY_ArtikelStammAMM_ART_KEY5.AsInteger := 0;
        AQY_ArtikelStammBV_PLAN_NUMMER.AsInteger := 0;
        AQY_ArtikelStammBV_SI_TAGE.AsInteger := 0;

        AQY_ArtikelStammAMM_INHALT_KEY1.AsInteger := 0;
        AQY_ArtikelStammAMM_INHALT_KEY2.AsInteger := 0;
        AQY_ArtikelStammAMM_INHALT_KEY3.AsInteger := 0;
        AQY_ArtikelStammAMM_INHALT_FREI4.AsString := '';
        AQY_ArtikelStammAMM_INHALT_FREI5.AsString := '';

        //** 10.1
        AQY_ArtikelStammPRUEF_PFLICHTIG.AsString := 'N';
        AQY_ArtikelStammMASSE_FREITEXT.AsString := '';
        AQY_ArtikelStammPDM_GEPFLEGT.AsString := 'N';
        AQY_ArtikelStammAL_NUMMER.AsString := '';
        AQY_ArtikelStammPACKMITTEL.AsString := '';
        AQY_ArtikelStammPACKMITTEL_VERSION.AsInteger := 0;
        AQY_ArtikelStammPACKMITTEL_STUECK_IN_PM.AsCurrency := 0.0;
        AQY_ArtikelStammPACKMITTEL_IST_PM.AsString := 'N';
        AQY_ArtikelStammECCN_NUMMER.AsString := '';
        AQY_ArtikelStammZOLLTARIF_NUMMER.AsString := '';
        AQY_ArtikelStammPRAEFERENZ.AsString := 'N';
        AQY_ArtikelStammFEINPLANUNG.AsString := 'N';    //** ??? in der DB ist Default ''

        //** 10.2
        AQY_ArtikelStammVORGABELAGER_ZU.AsInteger := -1;
        AQY_ArtikelStammVORGABELAGER_ZU_DV.AsInteger := -1;
        AQY_ArtikelStammVORGABELAGER_AB.AsInteger := -1;
        AQY_ArtikelStammVORGABELAGER_AB_DV.AsInteger := -1;
        AQY_ArtikelStammALTERNATE_ARTNR_1.AsString := '';
        AQY_ArtikelStammALTERNATE_ARTNR_2.AsString := '';
        AQY_ArtikelStammALTERNATE_ARTNR_3.AsString := '';
        AQY_ArtikelStammCHARGENPFLICHTIG.AsString := 'N';
        AQY_ArtikelStammPREISAENDERUNG_BEMERKUNG.AsString := '';

        //** 11.1
        AQY_ArtikelStammPRAEFERENZ_ARTIKEL.AsString := 'N';
        AQY_ArtikelStammPRAEFERENZ_ANTEIL.AsCurrency := 0.0;
        AQY_ArtikelStammPRAEFERENZ_UE_DATUM.AsDateTime := shbStrToDate(NullDatum);
        AQY_ArtikelStammVERPACKUNGSKOSTEN.AsCurrency := 0.0;
        AQY_ArtikelStammKALK_AUFSCHLAG_GRUPPE.AsInteger := 9;
        AQY_ArtikelStammHYPERLINK.AsInteger := 0;

        //** 12.1
        AQY_ArtikelStammHIDE_BESTAND.AsString := 'N';

        //!!EditMark!!:ArtikelStammänderungen
   end; //** if CopyFlag

AQY_ArtikelStammArtNr.AsString := TrimRight(EDT_ArtNr.Text);
AQY_ArtikelStammLEAB.AsDateTime := shbStrToDate(NullDatum);
AQY_ArtikelStammLEZU.AsDateTime := shbStrToDate(NullDatum);
AQY_ArtikelStammAENDERUNG_DATUM.AsDateTime := shbStrToDate(NullDatum);
AQY_ArtikelStammANLAGE_DATUM.AsDateTime := Trunc(now);
AQY_ArtikelStammSL_JN.AsString := Nein;
AQY_ArtikelStammANLAGE_USER_NR.AsInteger := GetLinkagePointer^.UserNummer;
AQY_ArtikelStammPREISAENDERUNG_BEMERKUNG.AsString := '';

if (not CopyFlag) then
   begin
        AQY_ArtikelStammEM_JN.AsString := Nein;
        AQY_ArtikelStammMS_JN.AsString := Nein;
        AQY_ArtikelStammDK_1.AsInteger := STD_DK1;
        AQY_ArtikelStammDK_2.AsInteger := STD_DK2;
        AQY_ArtikelStammDK_3.AsInteger := STD_DK3;
        AQY_ArtikelStammDK_4.AsInteger := STD_DK4;
        AQY_ArtikelStammDK_5.AsInteger := STD_DK5;
        AQY_ArtikelStammKALK_KZ.AsString := STD_KALK_KZ;
        AQY_ArtikelStammKALK_KZ_VK.AsString := STD_KALK_KZVK;

        if GetLinkagePointer^.Serial = KSerial_GTD then
           begin
                AQY_ArtikelStammDK_1.MinValue := 0;
                AQY_ArtikelStammDK_2.MinValue := 0;

                AQY_ArtikelStammDK_1.AsInteger := 0;
                AQY_ArtikelStammDK_2.AsInteger := 0;
                AQY_ArtikelStammDK_3.AsInteger := 1;
                AQY_ArtikelStammDK_4.AsInteger := 3;
                AQY_ArtikelStammDK_5.AsInteger := 2;
           end; //**  if GetLinkagePointer^.Serial = KSerial_GTD then
   end; //** if not CopyFlag then

end; //** procedure InitStammFelder


(******************************************************************************)
(***   CloseInsertSemaphore (Beim Erfassen gesetzt)                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.CloseInsertSemaphore;
begin

if LastErfassenSemaphore <> '' then
   begin
        CloseSemaphore(LastErfassenSemaphore);
        LastErfassenSemaphore := '';
   end; //** if LastErfassenSemaphore <> ''

end; //** procedure CloseInsertSemaphore


(******************************************************************************)
(***   AQY_ArtikelStamm: BeforePost                                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_ArtikelStammBeforePost(DataSet: TDataSet);
var
   s0,                //** 03.2014
   s1      : string;  //** 03.2014
   k1,                //** 03.2014
   ik1     : integer; //** 03.2014
   aDSRecord : TDSStapelParams;
   aDSAction : TUCString1;
   Stunde,
   Minute,
   Sekunde,
   MS : word;
begin
inherited;

AQY_ArtikelStammARTNR.AsString := TrimRight(EDT_ArtNr.Text);
AQY_ArtikelStammKB.AsString := TrimRight(EDT_KB.Text);
AQY_ArtikelStammBN.AsString := TrimRight(EDT_BN.Text);
AQY_ArtikelStammZN.AsString := TrimRight(EDT_ZN.Text);
AQY_ArtikelStammBEZ_1.AsString := TrimRight(EDT_BEZ_1.Text);
if AQY_ArtikelStammPE_VK.AsInteger <= 0 then
   AQY_ArtikelStammPE_VK.AsInteger := 1;
if AQY_ArtikelStammV_EINHEIT.AsCurrency <= 0.0 then
   AQY_ArtikelStammV_EINHEIT.AsCurrency := 1;

if AQY_ArtikelStamm.State = dsEdit then
   begin
        AQY_ArtikelStammAENDERUNG_USER_NR.AsInteger := GetLinkagePointer^.UserNummer;
        AQY_ArtikelStammAENDERUNG_DATUM.AsDateTime := Trunc(Now);
   end; //** if AQY_ArtikelStamm.State = dsEdit

if IsHasCharge then
   if AQY_ArtikelStammCHARGENPFLICHTIG.AsString = Ja then
      begin
           AQY_ArtikelStammVORGABELAGER_AB.AsInteger := -1;
           if not (IsBiogartenOnly) then  //** 09.11.2017 SM
              AQY_ArtikelStammVORGABELAGER_AB_DV.AsInteger := -1;
           AQY_ArtikelStammVORGABELAGER_ZU.AsInteger := -1;
           if (not (IsBiogartenOnly)) then  //** 22.09.2017 SM
              AQY_ArtikelStammVORGABELAGER_ZU_DV.AsInteger := -1;
      end; //** if AQY_ArtikelStammCHARGENPFLICHTIG.AsString = Ja

if not GetLinkagePointer^.HasUnicodeModule then
   begin
        AQY_ArtikelStammARTNR.AsString := AnsiString(AQY_ArtikelStammARTNR.AsString);
        AQY_ArtikelStammKB.AsString := AnsiString(AQY_ArtikelStammKB.AsString);
        AQY_ArtikelStammBEZ_1.AsString := AnsiString(AQY_ArtikelStammBEZ_1.AsString);
        AQY_ArtikelStammBEZ_2.AsString := AnsiString(AQY_ArtikelStammBEZ_2.AsString);
        AQY_ArtikelStammBEZ_3.AsString := AnsiString(AQY_ArtikelStammBEZ_3.AsString);
        AQY_ArtikelStammBEZ_4.AsString := AnsiString(AQY_ArtikelStammBEZ_4.AsString);
        AQY_ArtikelStammBEZ_5.AsString := AnsiString(AQY_ArtikelStammBEZ_5.AsString);
        AQY_ArtikelStammBEZ_6.AsString := AnsiString(AQY_ArtikelStammBEZ_6.AsString);
        AQY_ArtikelStammBEZ_7.AsString := AnsiString(AQY_ArtikelStammBEZ_7.AsString);
        AQY_ArtikelStammBEZ_8.AsString := AnsiString(AQY_ArtikelStammBEZ_8.AsString);
        AQY_ArtikelStammBN.AsString := AnsiString(AQY_ArtikelStammBN.AsString);
        AQY_ArtikelStammC1.AsString := AnsiString(AQY_ArtikelStammC1.AsString);
        AQY_ArtikelStammC2.AsString := AnsiString(AQY_ArtikelStammC2.AsString);
        AQY_ArtikelStammC3.AsString := AnsiString(AQY_ArtikelStammC3.AsString);
        AQY_ArtikelStammC4.AsString := AnsiString(AQY_ArtikelStammC4.AsString);
        AQY_ArtikelStammC5.AsString := AnsiString(AQY_ArtikelStammC5.AsString);
        AQY_ArtikelStammC6.AsString := AnsiString(AQY_ArtikelStammC6.AsString);
        AQY_ArtikelStammC7.AsString := AnsiString(AQY_ArtikelStammC7.AsString);
        AQY_ArtikelStammC8.AsString := AnsiString(AQY_ArtikelStammC8.AsString);
        AQY_ArtikelStammC9.AsString := AnsiString(AQY_ArtikelStammC9.AsString);
        AQY_ArtikelStammC10.AsString := AnsiString(AQY_ArtikelStammC10.AsString);

        AQY_ArtikelStammDISPO_STOP.AsString := AnsiString(AQY_ArtikelStammDISPO_STOP.AsString);
        AQY_ArtikelStammEM_JN.AsString := AnsiString(AQY_ArtikelStammEM_JN.AsString);
        AQY_ArtikelStammEM1_METHODE.AsString := AnsiString(AQY_ArtikelStammEM1_METHODE.AsString);
        AQY_ArtikelStammEM2_METHODE.AsString := AnsiString(AQY_ArtikelStammEM2_METHODE.AsString);
        AQY_ArtikelStammEM3_METHODE.AsString := AnsiString(AQY_ArtikelStammEM3_METHODE.AsString);
        AQY_ArtikelStammINFO.AsString := AnsiString(AQY_ArtikelStammINFO.AsString);
        AQY_ArtikelStammKALK_KZ.AsString := AnsiString(AQY_ArtikelStammKALK_KZ.AsString);
        AQY_ArtikelStammKALK_KZ_VK.AsString := AnsiString(AQY_ArtikelStammKALK_KZ_VK.AsString);
        AQY_ArtikelStammMASSE_FUER_FA.AsString := AnsiString(AQY_ArtikelStammMASSE_FUER_FA.AsString);
        AQY_ArtikelStammMASSE_SIND_MM.AsString := AnsiString(AQY_ArtikelStammMASSE_SIND_MM.AsString);
        AQY_ArtikelStammME.AsString := AnsiString(AQY_ArtikelStammME.AsString);
        AQY_ArtikelStammMS_JN.AsString := AnsiString(AQY_ArtikelStammMS_JN.AsString);
        AQY_ArtikelStammSACHMERKMAL.AsString := AnsiString(AQY_ArtikelStammSACHMERKMAL.AsString);
        AQY_ArtikelStammSL_JN.AsString := AnsiString(AQY_ArtikelStammSL_JN.AsString);
        AQY_ArtikelStammVIEWER_PFAD.AsString := AnsiString(AQY_ArtikelStammVIEWER_PFAD.AsString);
        AQY_ArtikelStammZN.AsString := AnsiString(AQY_ArtikelStammZN.AsString);
        AQY_ArtikelStammZN_REV.AsString := AnsiString(AQY_ArtikelStammZN_REV.AsString);
        AQY_ArtikelStammAMM_PRINT.AsString := AnsiString(AQY_ArtikelStammAMM_PRINT.AsString);
        AQY_ArtikelStammAMM_INHALT_FREI4.AsString := AnsiString(AQY_ArtikelStammAMM_INHALT_FREI4.AsString);
        AQY_ArtikelStammAMM_INHALT_FREI5.AsString := AnsiString(AQY_ArtikelStammAMM_INHALT_FREI5.AsString);
   end; //** if not GetLinkagePointer^.HasUnicodeModule then

//** 11.0
if PreisChangedFlag then
   begin
        AQY_ArtikelStammPREISAENDERUNG_BEMERKUNG.AsString := Copy(PreisChangedReason, 1, 80);
        PreisChangedFlag := false;
   end; //** if PreisChangedFlag

if GetLinkagePointer^.Module[imArtikelarchiv] then
   if AQY_Artikelstamm.State = dsEdit then
      begin
           if (not (ArchiviereOldRecord(AQY_ArtikelStamm,
                                        AQY_Divers,
                                        GetDOBOSADB,
                                        'A_ARCHIV_ARTIKEL_STAMM',
                                        Format('M%2.2d',[GetLinkagePointer^.MRecord.Mandant])+'.dbo.ARTIKEL_STAMM',
                                        'ARTNR',
                                        ''''+SQLTextString(AQY_ArtikelStammARTNR.AsString)+'''',
                                        'ARTNR = '''+SQLTextString(AQY_ArtikelStammARTNR.AsString)+''''
                                        ))) then
              ShowMessage(rs_LV_ArchivFailed);
      end; //** if AQY_Artikelstamm.State = dsEdit then

//** 03.2014 - Reussänderung: wenn mindestens 1 Feld des 1. Merkmales belegt ist,
//**           wird die Katekorie und das Merkmal in die Bestellnummer übernommen
if (GetLinkagePointer^.Serial = KSerial_Reuss) then
   if ((AQY_ArtikelStammAMM_ART_KEY1.AsInteger <> 0) or
       (AQY_ArtikelStammAMM_INHALT_KEY1.AsInteger <> 0)) then
      begin
           with AQY_Divers do
                try
                   try
                      k1 := StrToInt(Format('1%4.4d0000',[AQY_ArtikelStammAMM_ART_KEY1.AsInteger]));
                      ik1 := StrToInt(Format('1%4.4d%4.4d',[AQY_ArtikelStammAMM_ART_KEY1.AsInteger,AQY_ArtikelStammAMM_INHALT_KEY1.AsInteger]));
                      if Active then
                         Close;
                      Connection := GetDobosADB;
                      SQL.Clear;
                      SQL.Add('SELECT '
                             +'"AMM1K" = (SELECT TEXT FROM SCHLUESSEL WHERE ART = ''AM'' AND NUMMER = '+IntToStr(k1)+'), '
                             +'"AMM1I" = (SELECT TEXT FROM SCHLUESSEL WHERE ART = ''AM'' AND NUMMER = '+IntToStr(ik1)+') ');
                      UCOpenSQL(AQY_Divers);
                      s0 := Fields[0].AsString;
                      s1 := Fields[1].AsString;

                      if not IsSpace(s0) then
                         s0 := s0 + ' ' + s1
                      else
                         s0 := s1;

                      if not IsSpace(s0) then
                         begin
                              s1 := copy(s0,1,25);
                              AQY_ArtikelStammBN.AsString := AnsiString(s1);
                         end; //** if not IsSpace(s0) then

                   except
                   end; //** try..except

                finally
                   if Active then
                      Close;
                end; //** try..finally

      end; //** if ((AQY_ArtikelStammAMM_ART_KEY1.AsInteger <> 0) or

PostStammAenderung(true);

end; //** procedure AQY_ArtikelStammBeforePost


(******************************************************************************)
(***  Prüfen, ob Stammsatz gelöscht werden kann                             ***)
(******************************************************************************)

function TFRM_DobosLV.CheckStammLoeschenOK(AArtNr : string): boolean;
var
   b : boolean;

begin

Result := false;

with AQY_Divers do
     try
        try
           if Active then
              Close;
           Connection := GetDobosADB;

           //** Minisets
           SQL.Clear;
           SQL.Add ('SELECT COUNT(*) FROM ARTIKEL_MINISET WHERE (UNTER_ARTNR = '''+SQLTextString(AArtNr)+''') ');
           UCOpenSQL(AQY_Divers);
           if Fields[0].AsInteger <> 0 then
              raise EAbort.Create(rs_LV_NoDeleteWeilMiniset);

           if Active then
              Close;
           //** Umsätze
           SQL.Clear;
           SQL.Add ('SELECT COUNT(*) FROM ARTIKEL_UMSATZ WHERE (ARTNR = '''+SQLTextString(AArtNr)+''') ');
           UCOpenSQL(AQY_Divers);
           if Fields[0].AsInteger <> 0 then
              raise EAbort.Create(rs_LV_NoDeleteWeilBewegungen);

           if Active then
              Close;

           if GetLinkagePointer^.Module[imSL] then
              begin
                   //** Stücklisten
                   SQL.Clear;
                   SQL.Add ('SELECT COUNT(*) FROM SL_KOPF WHERE (ARTNR = '''+SQLTextString(AArtNr)+''') ');
                   UCOpenSQL(AQY_Divers);
                   if Fields[0].AsInteger <> 0 then
                      raise EAbort.Create(rs_LV_NoDeleteWeilStueckliste);

                   if Active then
                      Close;
                   SQL.Clear;
                   SQL.Add ('SELECT COUNT(*) FROM SL_POSTEN WHERE (ARTNR = '''+SQLTextString(AArtNr)+''' OR UNTER_ARTNR = '''+SQLTextString(AArtNr)+''') ');
                   UCOpenSQL(AQY_Divers);
                   if Fields[0].AsInteger <> 0 then
                      raise EAbort.Create(rs_LV_NoDeleteWeilInStueckliste);
              end;

           //** Packmittel
           if GetLinkagePointer^.Module[imPV] then
              begin
                   if Active then
                      Close;
                   SQL.Clear;
                   SQL.Add ('SELECT COUNT(*) FROM PACKMITTEL WHERE (ARTNR = '''+SQLTextString(AArtNr)+''') ');
                   UCOpenSQL(AQY_Divers);
                   if Fields[0].AsInteger <> 0 then
                      raise EAbort.Create(rs_LV_NoDeleteWeilInPackmittel);
              end; //** if GetLinkagePointer^.Module[imPV] then

           //** Artikelkarteikarte
           if Active then
              Close;
           SQL.Clear;
           SQL.Add ('SELECT COUNT(*) FROM ARTIKEL_KARTEI WHERE (ARTNR = '''+SQLTextString(AArtNr)+''') ');
           UCOpenSQL(AQY_Divers);
           if Fields[0].AsInteger <> 0 then
              raise EAbort.Create(rs_LV_NoDeleteWeilAKExists);

           //** Aufträge/Angebote
           if Active then
              Close;
           SQL.Clear;
           SQL.Add ('SELECT COUNT(*) FROM AUFTRAG_POSTEN WHERE (ZEILEN_ART = ''L'') AND (ARTNR = '''+SQLTextString(AArtNr)+''') ');
           UCOpenSQL(AQY_Divers);
           if Fields[0].AsInteger <> 0 then
              raise EAbort.Create(rs_LV_NoDeleteWeilInAGAU);

           //** Anfragen / Bestellungen
           if Active then
              Close;
           SQL.Clear;
           SQL.Add ('SELECT COUNT(*) FROM BESTELL_POSTEN WHERE (ZEILEN_ART = ''L'') AND (ARTNR = '''+SQLTextString(AArtNr)+''') ');
           UCOpenSQL(AQY_Divers);
           if Fields[0].AsInteger <> 0 then
              raise EAbort.Create(rs_LV_NoDeleteWeilInAFBE);

           //** DAVOS
           if Active then
              Close;
           if GetLinkagePointer^.Module[imDAVOS] then
              begin
                   SQL.Clear;
                   SQL.Add ('SELECT COUNT(*) FROM DV_AUFTRAG_SL WHERE (ARTNR = '''+SQLTextString(AArtNr)+''') ');
                   UCOpenSQL(AQY_Divers);
                   if Fields[0].AsInteger <> 0 then
                      raise EAbort.Create(rs_LV_NoDeleteWeilABSLVorhanden);

                   if Active then
                      Close;
                   SQL.Clear;
                   SQL.Add ('SELECT COUNT(*) FROM DV_FE_KOPF WHERE (ARTNR = '''+SQLTextString(AArtNr)+''') ');
                   UCOpenSQL(AQY_Divers);
                   if Fields[0].AsInteger <> 0 then
                      raise EAbort.Create(rs_LV_NoDeleteWeilFEKopf);

                   if Active then
                      Close;
                   SQL.Clear;
                   SQL.Add ('SELECT COUNT(*) FROM DV_FE_POSTEN WHERE (ART = ''L'') AND (ARTNR = '''+SQLTextString(AArtNr)+''') ');
                   UCOpenSQL(AQY_Divers);
                   if Fields[0].AsInteger <> 0 then
                      raise EAbort.Create(rs_LV_NoDeleteWeilInFAPosten);

                   if Active then
                      Close;
                   SQL.Clear;
                   SQL.Add ('SELECT COUNT(*) FROM DV_STD_KOPF WHERE (HAUPT_ARTNR = '''+SQLTextString(AArtNr)+''') ');
                   UCOpenSQL(AQY_Divers);
                   if Fields[0].AsInteger <> 0 then
                      raise EAbort.Create(rs_LV_NoDeleteWeilInAPKopf);

                   if Active then
                      Close;
                   SQL.Clear;
                   SQL.Add ('SELECT COUNT(*) FROM DV_STD_POSTEN WHERE (ART = ''L'') AND (ARTNR = '''+SQLTextString(AArtNr)+''') ');
                   UCOpenSQL(AQY_Divers);
                   if Fields[0].AsInteger <> 0 then
                      raise EAbort.Create(rs_LV_NoDeleteWeilInAPPosten);
              end; //** if GetLinkagePointer^.Module[imDAVOS]

           //** Läger
           if Active then
              Close;
           SQL.Clear;
           SQL.Add ('SELECT * FROM ARTIKEL_LAGER WHERE (ARTNR = '''+SQLTextString(AArtNr)+''') ');
           UCOpenSQL(AQY_Divers);

           b := true;
           while not EOF do
                 begin
                      if ((FieldByName('BESTAND').AsInteger <> 0) or
                          (FieldByName('BESTELLT').AsInteger <> 0) or
                          (FieldByName('RUECKSTAND').AsInteger <> 0) or
                          (FieldByName('INV_BESTAND').AsInteger <> 0) or
                          (FieldByName('INV_GEZAEHLT').AsInteger <> 0)) then
                          begin
                               b := false;
                               Break;
                          end;
                      Next;
                 end; //** while not EOF do

           if not b then
              raise EAbort.Create(rs_LV_NoDeleteWeilBestand);

           //** Löschen OK melden
           result := true;

        except
           on E:Exception do
              ShowMessage(rs_LV_NoDeleteWeil+' '+E.Message);
        end; //** try..except


     finally
        if Active then
           Close;

     end; //** try..finally

end; //** function CheckStammLoeschenOK


(******************************************************************************)
(***                CheckZusatzInfosZusatzDokumente                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.CheckZusatzInfosZusatzDokumente(const ArtNr : string; ARefresh: boolean);
var
   i : integer;
begin

with AQY_GetLamps do
     try
        if Active then
           Close;
        for i := 0 to Parameters.Count -1 do
            Parameters.Items[i].Value := ArtNr;
        if not IsSpace(ArtNr) then
           begin
                Open; //** Parametrisierte Query ohne Literale kein UCChange machen!
                //** CodeFelder Hints & Zusattextexte und Zusatzdokumente Down-Status Button
                EDT_C1.Hint := Fields[0].AsString;
                EDT_C2.Hint := Fields[1].AsString;
                EDT_C3.Hint := Fields[2].AsString;
                EDT_C4.Hint := Fields[3].AsString;
                EDT_C5.Hint := Fields[4].AsString;
                EDT_C6.Hint := Fields[5].AsString;
                EDT_C7.Hint := Fields[6].AsString;
                EDT_C8.Hint := Fields[7].AsString;
                EDT_C9.Hint := Fields[8].AsString;
                EDT_C10.Hint := Fields[9].AsString;

                if Fields[10].AsInteger > 0 then
                   begin
                        BTN_LoadZusatzTexte.Down := true;
                        if ARefresh then
                           begin
                                if AQY_Zusatztexte.Active then
                                    AQY_Zusatztexte.Close;
                                AQY_Zusatztexte.Open;
                           end; //** if ARefresh then
                   end
                else
                   BTN_LoadZusatzTexte.Down := false;

                if Fields[11].AsInteger > 0 then
                   BTN_LoadZusatzDokumente.Down := true
                else
                   BTN_LoadZusatzDokumente.Down := false;

                SetDokumenteButtonGlyphs;
           end;

         if Active then
            Close;
     except
        on E:Exception do
           ShowMessage(E.Message);
     end; //** try..except

end; //** procedure CheckZusatzInfosZusatzDokumente


(******************************************************************************)
(***  Alle verbundenen Daten eines Stammsatzes löschen                      ***)
(******************************************************************************)

function TFRM_DobosLV.DeleteAllArtikelData(AArtNr : string): boolean;
var
   aDSRecord : TDSStapelParams;
begin

result := false;

try
   //** verbundene Tabellen ausklinken
   with AQY_ArtikelStamm do
        try
           if (State in [dsEdit, dsInsert]) then
              Cancel;
           if Active then
              Close;
        except
        end;

   with AQY_Lager do
        try
           if (State in [dsEdit, dsInsert]) then
              Cancel;
           if Active then
              Close;
        except
        end;

   with AQY_CHLager do    //** 14.09.2018 SM
        try
           if Active then
              Close;
        except
        end;

   with AQY_Lieferant do
        try
           if (State in [dsEdit, dsInsert]) then
              Cancel;
           if Active then
              Close;
        except
        end;

   with AQY_FremdTexte do
        try
           if (State in [dsEdit, dsInsert]) then
              Cancel;
           if Active then
              Close;
        except
        end;

   with AQY_DVKalk do
        try
           if (State in [dsEdit, dsInsert]) then
              Cancel;
           if Active then
              Close;
        except
        end;

   with AQY_MiniSet do
        try
           if (State in [dsEdit, dsInsert]) then
              Cancel;
           if Active then
              Close;
        except
        end;

   with AQY_Preise do
        try
           if (State in [dsEdit, dsInsert]) then
              Cancel;
           if Active then
              Close;
        except
        end;

   with AQY_SumBestand do
        try
           if Active then
              Close;
        except
        end;

   with AQY_Umsatz do
        try
           if Active then
              Close;
        except
        end;

   with AQY_Bild do
        try
           if Active then
              Close;
        except
        end;

   with AQY_GetLamps do
        try
           if Active then
              Close;
        except
        end;

   with AQY_GetXRef do
        try
           if Active then
              Close;
        except
        end;

   with AQY_Badges do
        try
           if Active then
              Close;
        except
        end;

   with AQY_Zusatztexte do
        try
           if Active then
              Close;
        except
        end;

   with AQY_Sopreise do
        try
           if Active then
              Close;
        except
        end;

   IMC_Bilder.Items.Clear;

   try
      with AQY_Divers do
           begin
                try
                   if Active then
                      Close;
                   Connection := GetDobosADB;
                   SQL.Clear;

                   //** Start Transaction
                   AQY_Divers.Connection.BeginTrans;
                   SQL.Clear;
                   SQL.Add ('DELETE FROM ARTIKEL_TEXTE WHERE (ARTNR = '''+AArtNr+''') ');
                   UCExecSQL(AQY_Divers);

                   SQL.Clear;
                   SQL.Add ('DELETE FROM ARTIKEL_PREISE WHERE (ARTNR = '''+AArtNr+''') ');
                   UCExecSQL(AQY_Divers);

                   SQL.Clear;
                   SQL.Add ('DELETE FROM ARTIKEL_LAGER WHERE (ARTNR = '''+AArtNr+''') ');
                   UCExecSQL(AQY_Divers);

                   SQL.Clear;
                   SQL.Add ('DELETE FROM ARTIKEL_LIEFERANT WHERE (ARTNR = '''+AArtNr+''') ');
                   UCExecSQL(AQY_Divers);

                   SQL.Clear;
                   SQL.Add ('DELETE FROM ARTIKEL_KALKULATION WHERE (ARTNR = '''+AArtNr+''') ');
                   UCExecSQL(AQY_Divers);

                   SQL.Clear;
                   SQL.Add ('DELETE FROM ARTIKEL_UMSATZ WHERE (ARTNR = '''+AArtNr+''') ');
                   UCExecSQL(AQY_Divers);


                   SQL.Clear;
                   SQL.Add ('DELETE FROM ARTIKEL_MINISET WHERE (ARTNR = '''+AArtNr+''') ');
                   UCExecSQL(AQY_Divers);

                   SQL.Clear;
                   SQL.Add ('DELETE FROM ARTIKEL_ZUSATZTEXT WHERE (ARTNR = '''+AArtNr+''') ');
                   UCExecSQL(AQY_Divers);

                   SQL.Clear;
                   SQL.Add ('DELETE FROM ARTIKEL_FILE WHERE (ARTNR = '''+AArtNr+''') ');
                   UCExecSQL(AQY_Divers);

                   SQL.Clear;
                   SQL.Add ('DELETE FROM ARTIKEL_KARTEI WHERE (ARTNR = '''+AArtNr+''') ');
                   UCExecSQL(AQY_Divers);

                   SQL.Clear;
                   SQL.Add ('DELETE FROM SONDER_PREISE WHERE (ARTNR = '''+AArtNr+''') ');
                   UCExecSQL(AQY_Divers);

                   SQL.Clear;
                   SQL.Add ('DELETE FROM INFOBLATT WHERE (ART = ''L'' AND SCHLUESSEL = '''+AArtNr+''') ');
                   UCExecSQL(AQY_Divers);

                   SQL.Clear;
                   SQL.Add ('DELETE FROM INFOBLATT WHERE (ART = ''w'' AND SCHLUESSEL = '''+AArtNr+''') ');
                   UCExecSQL(AQY_Divers);

                   SQL.Clear;
                   SQL.Add ('DELETE FROM SL_KOPF WHERE (ARTNR = '''+AArtNr+''') ');
                   UCExecSQL(AQY_Divers);

                   SQL.Clear;
                   SQL.Add ('DELETE FROM SL_POSTEN WHERE (ARTNR = '''+AArtNr+''') ');
                   UCExecSQL(AQY_Divers);

                   SQL.Clear;
                   SQL.Add ('DELETE FROM DV_SL_FEHLMENGEN WHERE (ARTNR = '''+AArtNr+''') ');
                   UCExecSQL(AQY_Divers);

                   SQL.Clear;
                   SQL.Add ('DELETE FROM ARTIKEL_STAMM WHERE (ARTNR = '''+AArtNr+''') ');
                   UCExecSQL(AQY_Divers);

                   SQL.Clear;
                   SQL.Add ('DELETE FROM DV_STD_KOPF WHERE (HAUPT_ARTNR = '''+AArtNr+''') ');
                   UCExecSQL(AQY_Divers);

                   SQL.Clear;
                   SQL.Add ('DELETE FROM DV_STD_POSTEN WHERE (HAUPT_ARTNR = '''+AArtNr+''') ');
                   UCExecSQL(AQY_Divers);

                   //** Commit
                   AQY_Divers.Connection.CommitTrans;
                   if Active then
                      Close;

                   result := true;

                except
                   on E:Exception do
                      begin
                           ShowMessage(E.Message);
                           raise;     //** reRaise -> RollBack
                      end;
                end; //** try..except

           end; //** with AQY_Divers do

   except
      AQY_Divers.Connection.RollbackTrans;
   end;

finally
   if not result then
      MessageDlg(rs_LV_CouldntDelete,mtError,[mbOK],0)
   else
      begin
           BTN_NavFirstClick(BTN_NavNext);
      end; //** Else-Zweig von if not result

end; //** try..finally

end; //** function DeleteAllArtikelData


(******************************************************************************)
(***  P R E I S E                                                           ***)
(******************************************************************************)
(******************************************************************************)
(***     ErmittlePreisArtKey                                                ***)
(******************************************************************************)

function TFRM_DobosLV.ErmittlePreisArtKey: string;
begin

result := '';
if RBT_PreiseNeu.Checked then
   result := 'N'
else
   result := 'A';
if RBT_PreiseBrutto.Checked then
   result := AnsiLowerCase(result);

end; //** function ErmittlePreisArtKey


(******************************************************************************)
(***  AQY_Preise: OnBeforeDelete                                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_PreiseBeforeDelete(DataSet: TDataSet);
begin

inherited;
PostStammAenderung(false);

end;  //** procedure AQY_PreiseBeforeDelete


(******************************************************************************)
(***  AQY_Preise: OnBeforePost                                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_PreiseBeforePost(DataSet: TDataSet);
var
   s : string;
   SCCVK: currency;
   HelpStrSCC: string;
   US_Satz : single;
begin

inherited;

with AQY_Preise do
     try
        AQY_PreiseARTNR.AsString := TrimRight(AQY_ArtikelStammARTNR.AsString);
        AQY_PreiseART.AsString := ErmittlePreisArtKey;
        AQY_PreiseWS.AsInteger := EDT_PreiseWS.AsInteger;
     except
        on E:Exception do
           ShowMessage(E.Message);
     end; //** try..except

if AQY_Preise.State = dsInsert then
   if AQY_PreiseLE_PREIS_UPDATE.IsNull then
      AQY_PreiseLE_PREIS_UPDATE.AsString := '01.01.1950';

//** Preisänderung VK1- bis 10, nur wenn User nicht das Datum selbst geändert hat, aut. ändern
if AQY_Preise.State = dsEdit then
   if OldLePreisUpdateVK = AQY_PreiseLE_PREIS_UPDATE.AsDateTime then
      if ((OldVK1 <> AQY_PreiseVK_1.AsCurrency) or
          (OldVK2 <> AQY_PreiseVK_2.AsCurrency) or
          (OldVK3 <> AQY_PreiseVK_3.AsCurrency) or
          (OldVK4 <> AQY_PreiseVK_4.AsCurrency) or
          (OldVK5 <> AQY_PreiseVK_5.AsCurrency) or
          (OldVK6 <> AQY_PreiseVK_6.AsCurrency) or
          (OldVK7 <> AQY_PreiseVK_7.AsCurrency) or
          (OldVK8 <> AQY_PreiseVK_8.AsCurrency) or
          (OldVK9 <> AQY_PreiseVK_9.AsCurrency) or
          (OldVK10 <> AQY_PreiseVK_10.AsCurrency)) then
          begin
               PreisChangedReason := '';
               AQY_PreiseLE_PREIS_UPDATE.AsDateTime := GetLinkagePointer^.TagesDatum;
               if AQY_ArtikelStamm.State <> dsInsert then
                  if SHBInputQuery(rs_LV_PreisBemEingeben,
                                rs_LV_PreisBemMax80, PreisChangedReason) then
                                begin
                                     PreisChangedFlag := true;
                                     if AQY_ArtikelStamm.State = dsBrowse then
                                        begin
                                             //** AfterPost aushängen
                                             AQY_ArtikelStamm.AfterPost := nil;
                                             AQY_ArtikelStamm.Edit;
                                             AQY_ArtikelStamm.Post;
                                             AQY_ArtikelStamm.AfterPost := AQY_ArtikelStammAfterPost;
                                        end; //** if AQY_ArtikelStamm.State = dsBrowse then

                             end; //** if SHBInputQuery
          end; //** if ((OldVK1 <> AQY_PreiseVK_1.AsCurrency) or...

if GetLinkagePointer^.Serial = KSerial_SCC then
   begin
        if ((GetLinkagePointer^.MRecord.Mandant = 1) or
            (GetLinkagePointer^.MRecord.Mandant = 5)) then
            begin
                 try
                    if Pos('Y',CurrArtNr) = 1 then
                       Exit;
                    if ((AQY_PreiseART.AsString = 'a') or (AQY_PreiseART.AsString = 'n')) then
                       Exit;

                    SCCVK := 0.0;
                    HelpStrSCC := '';
                    SCCVK := AQY_PreiseVK_1.AsCurrency;
                    US_Satz := GetLinkagePointer^.Steuer_Tab[GetLinkagePointer^.MRecord.Std_US_2].Satz;
                    SCCVK := SCCVK * (1+(US_SATZ/100));
                    if ((AQY_ArtikelStammWG.AsInteger > 99) and (AQY_ArtikelStammWG.AsInteger < 300)) then
                       //** Aufrunden auf die nächste ganze Zahl
                       SCCVK := Ceil(SCCVK)
                    else
                       //** Aufrunden auf die erste Nachkommastelle
                       begin
                            HelpStrSCC := CurrToStrF(SCCVK,ffFixed,2);
                            HelpStrSCC := Copy(HelpStrSCC,5,1);
                            if HelpStrSCC <> '0' then
                               SCCVK := Round((SCCVK+0.05) * 10)/10;
                       end;

                    with AQY_Divers do
                         begin
                              if Active then
                                 Close;
                              SQl.Clear;
                              SQL.Add(' IF NOT EXISTS (SELECT VK_1 FROM ARTIKEL_PREISE WHERE ARTNR = '''+SQLTextString(CurrArtnr)+''' AND ART = ''a'' AND WS = 0) '
                                      +' INSERT INTO ARTIKEL_PREISE (ARTNR, ART, WS, VK_1, VK_2, VK_3, VK_4, VK_5, VK_6, VK_7, VK_8, VK_9, VK_10, LE_PREIS_UPDATE) '
                                      +' VALUES ('''+SQLTextString(CurrArtnr)+''',''a'',0,'+SQLZahlStr(SCCVK)+',0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0, GETDATE()) '
                                      +' ELSE UPDATE ARTIKEL_PREISE SET VK_1 = '+SQLZahlStr(SCCVK)
                                      +' WHERE ARTNR = '''+SQLTextString(CurrArtnr)+''' AND ART = ''a'' AND WS = 0 ');
                              ExecSQL;
                              Close;
                         end; //** with AQY_Divers do
                 except
                    on E:Exception do
                       ShowMessage(E.Message);
                 end; //** try..except with AQY_SumBestand do

                 AQY_PreiseVK_1.AsCurrency := SCCVK / (1+(US_SATZ/100));
            end; //** if Mandant 1 / 5

   end; //** if GetLinkagePointer^.Serial = KSerial_SCC then

if GetLinkagePointer^.Module[imArtikelarchiv] then
   if AQY_Preise.State = dsEdit then
      begin
           if (not (ArchiviereOldRecord(AQY_Preise,
                                        AQY_Divers,
                                        GetDOBOSADB,
                                        'A_ARCHIV_ARTIKEL_PREISE',
                                        Format('M%2.2d',[GetLinkagePointer^.MRecord.Mandant])+'.dbo.ARTIKEL_PREISE',
                                        'ARTNR, ART, WS',
                                        ''''+SQLTextString(AQY_PreiseARTNR.AsString)+''', '
                                           +''''+SQLTextString(AQY_PreiseART.AsString)+''', '
                                           +IntToStr(AQY_PreiseWS.AsInteger),
                                        'ARTNR = '''+SQLTextString(AQY_PreiseARTNR.AsString)+''' '
                                        +'AND ART = '''+SQLTextString(AQY_PreiseART.AsString)+''' '
                                        +'AND WS = '+IntToStr(AQY_PreiseWS.AsInteger)+' '
                                        ))) then
              ShowMessage(rs_LV_ArchivFailed);
      end; //** if AQY_Artikelstamm.State = dsEdit then

end; //** procedure AQY_PreiseBeforePost


(******************************************************************************)
(***   AQY_Preise: OnAfterPost (UpdateDatum / User eintragen)               ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_PreiseAfterPost(DataSet: TDataSet);
begin

inherited;
PostStammAenderung(false);

end; //** procedure AQY_PreiseAfterPost


(******************************************************************************)
(***  DataSource Preise: OnStateChange (Buttons Preise updaten)             ***)
(******************************************************************************)

procedure TFRM_DobosLV.DTS_PreiseStateChange(Sender: TObject);
begin

inherited;
UpdatePreiseButtons;

end; //** procedure DTS_PreiseStateChange


(******************************************************************************)
(***  UpdatePreiseButtons                                                   ***)
(******************************************************************************)

procedure TFRM_DobosLV.UpdatePreiseButtons;
begin

inherited;
with GetLinkagePointer^ do
     begin
          if not DTS_Open then
             begin
                  SBT_PreiseDelete.Enabled := false;
                  SBT_PreiseSave.Enabled := false;
                  SBT_PreiseInsert.Enabled := false;
                  SBT_PreiseEdit.Enabled := false;
                  SBT_PreiseCancel.Enabled := false;
                  MNI_KalkVK.Enabled := false;
                  MNI_Kalk1VK.Enabled := false;
                  MNI_VKStaffelEingeben.Enabled := false;
                  MNI_VKVariablesRasterErfassen.Enabled := false;
                  MNI_EKStaffelEingeben.Enabled := false;
                  MNI_EKVariablesRasterErfassen.Enabled := false;
             end
          else
             begin
                  MNI_KalkVK.Enabled := ((AQY_Preise.Active) and
                                         (AQY_Preise.State = dsBrowse) and
                                         (not IsSpace(CurrArtNr)));
                  MNI_Kalk1VK.Enabled := MNI_KalkVK.Enabled;
                  SBT_PreiseDelete.Enabled := (((PRIV_LOESCHEN = ja) or (PRIV_LOESCHEN = 'L')) and
                                               (PRIV_VK = ja) and
                                               (AQY_Preise.Active) and
                                               (AQY_Preise.State = dsBrowse) and
                                               (AQY_Preise.RecordCount > 0));
                  SBT_PreiseSave.Enabled := ((AQY_Preise.Active) and
                                             (AQY_Preise.State <> dsBrowse));
                  SBT_PreiseInsert.Enabled := (((PRIV_ERFASSEN = ja) or
                                                (PRIV_ERFASSEN = 'L') or
                                                (PRIV_ERFASSEN = 'l') or
                                                (PRIV_ERFASSEN = 'b') or
                                                (PRIV_ERFASSEN = 'x') or
                                                (PRIV_ERFASSEN = 'y'))
                                              and
                                              (PRIV_VK = ja) and
                                              (AQY_Preise.Active) and
                                              (not (isSpace(EDT_ArtNr.Text))) and
                                              (AQY_Preise.State = dsBrowse));
                  SBT_PreiseEdit.Enabled := (((PRIV_AENDERN = ja) or
                                            (PRIV_AENDERN = 'L')) and
                                            (PRIV_VK = ja) and
                                            (AQY_Preise.Active) and
                                            (AQY_Preise.State = dsBrowse) and
                                            (AQY_Preise.RecordCount > 0));
                  SBT_PreiseCancel.Enabled := ((AQY_Preise.Active) and
                                               (AQY_Preise.State <> dsBrowse));

                  MNI_VKStaffelEingeben.Enabled := ((AQY_ArtikelStamm.Active) and
                                                   (not IsSpace(CurrArtNr))and
                                                    ((PRIV_AENDERN = ja) or
                                                    (PRIV_AENDERN = 'L')));

                                                    {((AQY_Preise.Active) and
                                                    (AQY_ArtikelStamm.State in [dsEdit, dsInsert]) and
                                                    (not IsSpace(CurrArtNr))and
                                                    ((PRIV_AENDERN = ja) or
                                                    (PRIV_AENDERN = 'L')));}

                  MNI_VKVariablesRasterErfassen.Enabled := MNI_VKStaffelEingeben.Enabled;

                  MNI_EKStaffelEingeben.Enabled :=  ((AQY_Lieferant.Active) and
                                                    (not IsSpace(CurrArtNr))and
                                                    ((PRIV_AENDERN = ja) or
                                                    (PRIV_AENDERN = 'L')));
                                                    {((AQY_Lieferant.Active) and
                                                    (AQY_Lieferant.State in [dsEdit, dsInsert]) and
                                                    (not IsSpace(CurrArtNr))and
                                                    ((PRIV_AENDERN = ja) or
                                                    (PRIV_AENDERN = 'L'))); }

                  MNI_EKVariablesRasterErfassen.Enabled := MNI_EKStaffelEingeben.Enabled;

             end; //** if not DTS_Open then
     end; //** with GetLinkagePointer^ do

if GetLinkagePointer.Priv_Nur_Sichten = ja then
   begin
        SBT_PreiseEdit.Enabled := false;
        SBT_PreiseDelete.Enabled := false;
        SBT_PreiseInsert.Enabled := false;
        SBT_PreiseCancel.Enabled := false;
        SBT_PreiseSave.Enabled := false;
        MNI_KalkVK.Enabled := false;
        MNI_Kalk1VK.Enabled := false;
        MNI_VKStaffelEingeben.Enabled := false;
        MNI_VKVariablesRasterErfassen.Enabled := false;
   end; //** if GetLinkagePoiner.Priv_Nur_Sichten = ja

MNI_PreiseEdit.Enabled := SBT_PreiseEdit.Enabled;
MNI_PreiseInsert.Enabled := SBT_PreiseInsert.Enabled;
MNI_PreiseDelete.Enabled := SBT_PreiseDelete.Enabled;
MNI_PreiseCancel.Enabled := SBT_PreiseCancel.Enabled;
MNI_PreiseSave.Enabled := SBT_PreiseSave.Enabled;

RBT_PreiseNetto.Enabled := ((AQY_Preise.Active) and
                            (AQY_Preise.State <> dsEdit));
RBT_PreiseBrutto.Enabled := RBT_PreiseNetto.Enabled;
RBT_PreiseAktuell.Enabled := RBT_PreiseNetto.Enabled;
RBT_PreiseNeu.Enabled     := RBT_PreiseNetto.Enabled;

SBT_PreiseFirst.Enabled := RBT_PreiseNetto.Enabled;
SBT_PreisePrior.Enabled := RBT_PreiseNetto.Enabled;
SBT_PreiseNext.Enabled := RBT_PreiseNetto.Enabled;
SBT_PreiseLast.Enabled := RBT_PreiseNetto.Enabled;

EDT_PreiseWS.Enabled := RBT_PreiseNetto.Enabled;

end; //** procedure UpdatePreiseButtons


(******************************************************************************)
(***  SBT_Preise: OnClick (Ändern Preise)                                   ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_PreiseEditClick(Sender: TObject);
begin

inherited;
with AQY_Preise do
     try
        Edit;
        //** Änderung 7) siehe SBT_LiefEditClick *OB
        //UpdatePreiseButtons;
        //** Änderung 7)
     except
        raise;
     end //** try..except

end; //** procedure SBT_PreiseEditClick


(******************************************************************************)
(***  SBT_PreiseCancel: OnClick (Verwerfen Änderungen Preise)               ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_PreiseCancelClick(Sender: TObject);
begin

inherited;

with AQY_Preise do
     if Modified then
        begin
             if (MessageDlg(rs_LV_QDiscardChangesPreise, mtConfirmation,[mbYes, mbNo],0)) = mrYes then
                 try
                    Cancel;
                    UpdatePreiseButtons;
                 except
                    raise;
                 end //** try..except
        end
     else
        begin
             try
                Cancel;
                UpdatePreiseButtons;
             except
                raise;
             end //** try..except
        end;
end; //** procedure SBT_PreiseCancelClick


(******************************************************************************)
(***  SBT_PreiseSave: OnClick (Speichern Preise)                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_PreiseSaveClick(Sender: TObject);
var
   Art   : string;
   ws    : integer;

begin

inherited;
with AQY_Preise do
     try
        if RBT_PreiseNeu.Checked then
           AQY_PreiseART.AsString := 'N'
        else
           AQY_PreiseART.AsString := 'A';

        if RBT_PreiseBrutto.Checked then
           AQY_PreiseART.AsString := AnsiLowerCase(AQY_PreiseART.AsString);

        Art := FieldByName('ART').AsString;
        ws := FieldByName('WS').AsInteger;

        Post;
        Close;
        Open; //** Einfaches ReOpen, kein UCChange machen!
        //** Locate funktioniert hier mit ADO nicht, Upper/Lowercase wird ignoriert!!
        First;
        try
           DTS_Preise.Enabled := false;
           while not EOF do
                 begin
                      if ((AQY_PreiseART.AsString = Art) and
                          (AQY_PreiseWS.AsInteger = ws)) then
                          Break;
                      Next;
                 end; //** while not EOF do
        finally
           DTS_Preise.Enabled := true;
        end; //** try..finally

        UpdatePreiseButtons;

     except
        raise;
     end //** try..except

end; //** procedure SBT_PreiseSaveClick


(******************************************************************************)
(***  SBT_PreiseInsert: OnClick (Erfassen Preise)                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_PreiseInsertClick(Sender: TObject);
var
   AValues : array [0..0] of Variant;


begin

inherited;
if not Erfassen then
   if EDT_VK_1.Enabled then
      if EDT_VK_1.CanFocus then
         EDT_VK_1.SetFocus;

if ReadAnyFields (GetDobosADB,
                  'ARTIKEL_PREISE',
                  'WHERE ARTNR = '''+Trim(EDT_ArtNr.Text)+''' AND ART = '''+ErmittlePreisArtKey+''' AND WS = '+IntToStr(EDT_PreiseWS.AsInteger)+' ',
                  ['COUNT(*)'],
                  AValues) then
   try
      if AValues[0] > 0 then
         begin
              //ShowMessage('Preisgruppe bereits vorhanden. Bitte wählen Sie zunächst eine andere Gruppe (Brutto/Netto, Akt/neu oder andere Währung.');
              if EDT_PreiseWS.CanFocus then
                 EDT_PreiseWS.SetFocus;
         end; //**
   except
   end; //** try..except

if Erfassen then
   NeuEingabeAktiv := true;

with AQY_Preise do
     try
        Insert;
        AQY_PreiseARTNR.AsString := AQY_ArtikelStammARTNR.AsString;
        AQY_PreiseART.AsString := ErmittlePreisArtKey;
        AQY_PreiseLE_PREIS_UPDATE.AsDateTime := GetLinkagePointer^.TagesDatum;
     except
        on E:Exception do
           ShowMessage(E.Message);
     end; //** try..except

UpdatePreiseButtons;

end; //** procedure SBT_PreiseInsertClick


(******************************************************************************)
(***                SBT_PreisePrior: OnClick                                ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_PreisePriorClick(Sender: TObject);
begin

inherited;

if Sender = SBT_PreiseFirst then
   AQY_Preise.First;
if Sender = SBT_PreisePrior then
   AQY_Preise.Prior;
if Sender = SBT_PreiseNext then
   AQY_Preise.Next;
if Sender = SBT_PreiseLast then
   AQY_Preise.Last;

end; //** procedure SBT_PreisePriorClick


(******************************************************************************)
(***                   SBT_LieferantFirst: OnClick                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_LieferantFirstClick(Sender: TObject);
begin

inherited;

if Sender = SBT_LieferantFirst then
   AQY_Lieferant.First;
if Sender = SBT_LieferantPrior then
   AQY_Lieferant.Prior;
if Sender = SBT_LieferantNext then
   AQY_Lieferant.Next;
if Sender = SBT_LieferantLast then
   AQY_Lieferant.Last;

end; //** procedure SBT_LieferantFirstClick


(******************************************************************************)
(***                SBT_FremdTexteFirst: OnClick                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_FremdTexteFirstClick(Sender: TObject);
begin

inherited;

if Sender = SBT_FremdTexteFirst then
   AQY_FremdTexte.First;
if Sender = SBT_FremdTextePrior then
   AQY_FremdTexte.Prior;
if Sender = SBT_FremdTexteNext then
   AQY_FremdTexte.Next;
if Sender = SBT_FremdTexteLast then
   AQY_FremdTexte.Last;

end; //** procedure SBT_FremdTexteFirstClick


(******************************************************************************)
(***               SBT_KalkFirst: OnClick                                   ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_KalkFirstClick(Sender: TObject);
begin

inherited;

if Sender = SBT_KalkFirst then
   AQY_DVKalk.First;
if Sender = SBT_KalkPrior then
   AQY_DVKalk.Prior;
if Sender = SBT_KalkNext then
   AQY_DVKalk.Next;
if Sender = SBT_KalkLast then
   AQY_DVKalk.Last;

end; //** procedure SBT_KalkFirstClick


(******************************************************************************)
(***              SBT_ZusatztextSpracheFirst: OnClick                       ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_ZusatztextSpracheFirstClick(Sender: TObject);
begin

inherited;

if Sender = SBT_ZusatztextSpracheFirst then
   AQY_Zusatztexte.First;
if Sender = SBT_ZusatztextSprachePrior then
   AQY_Zusatztexte.Prior;
if Sender = SBT_ZusatztextSpracheNext then
   AQY_Zusatztexte.Next;
if Sender = SBT_ZusatztextSpracheLast then
   AQY_Zusatztexte.Last;

end; //** procedure SBT_ZusatztextSpracheFirstClick


(******************************************************************************)
(***  SBT_PreiseDelete: OnClick  (Preisgruppe)                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_PreiseDeleteClick(Sender: TObject);
var
   s : string;

begin

inherited;
if RBT_PreiseAktuell.Checked then
   if RBT_PreiseNetto.Checked then
      s := s + rs_LV_QDeleteANP
   else
      s := s + rs_LV_QDeleteABP
else
   if RBT_PreiseNetto.Checked then
      s := s + rs_LV_QDeleteNNP
   else
      s := s + rs_LV_QDeleteNBP;

s := Format(s,[EDT_PreiseWS.AsInteger, EDT_WaehrungsText.Text]);
with AQY_Preise do
     try
        if (MessageDlg(s, mtConfirmation,[mbYes,mbNo],0)) = mrYes then
           Delete;
     except
        raise;
     end; //** try..except

ReadAllData;
UpdatepreiseButtons;

end; //** procedure SBT_PreiseDeleteClick


(******************************************************************************)
(***  AQY_Preise: OnAfterScroll                                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_PreiseAfterScroll(DataSet: TDataSet);
var
   s : string;

               (***************************************************************)
               (***      lokale function CompVK                             ***)
               (***************************************************************)
                function CompVK(const AVK : Currency) : Currency;
                var
                   r : Currency;

                begin

                with GetLinkagePointer^ do
                     begin
                          r := AVK;
                          if (AQY_PreiseWS.AsInteger in [1..99]) then
                             r := r * (WS_Tabelle[AQY_PreiseWS.AsInteger].KURS);
                          Runde(r);
                          result := r;
                     end; //** with GetLinkagePointer^ do

                end; //** lokale function CompVK

(******************************************************************************)
(***    Start der procedure AQY_PreiseAfterScroll                           ***)
(******************************************************************************)
begin

inherited;

UpdatePreiseButtons;
OldLePreisUpdateVK := AQY_PreiseLE_PREIS_UPDATE.AsDateTime;
OldVK1 := AQY_PreiseVK_1.AsCurrency;
OldVK2 := AQY_PreiseVK_2.AsCurrency;
OldVK3 := AQY_PreiseVK_3.AsCurrency;
OldVK4 := AQY_PreiseVK_4.AsCurrency;
OldVK5 := AQY_PreiseVK_5.AsCurrency;
OldVK6 := AQY_PreiseVK_6.AsCurrency;
OldVK7 := AQY_PreiseVK_7.AsCurrency;
OldVK8 := AQY_PreiseVK_8.AsCurrency;
OldVK9 := AQY_PreiseVK_9.AsCurrency;
OldVK10 := AQY_PreiseVK_10.AsCurrency;

EDT_VK_1.Hint := '';
EDT_VK_2.Hint := '';
EDT_VK_3.Hint := '';
EDT_VK_4.Hint := '';
EDT_VK_5.Hint := '';
EDT_VK_6.Hint := '';
EDT_VK_7.Hint := '';
EDT_VK_8.Hint := '';
EDT_VK_9.Hint := '';
EDT_VK_10.Hint := '';

if AQY_PreiseWS.AsInteger <> 0 then
   begin
        s := rs_LV_VK+' %d '+rs_LV_in+' '+Trim(GetLinkagePointer^.WS_Tabelle[0].NAME)+': ';
        EDT_VK_1.Hint := Format(s,[1])+Trim(Format('%13.2n'+skreturn+rs_LV_Kurs+': %4.9f',
                         [CompVK(AQY_PreiseVK_1.AsCurrency),GetLinkagePointer^.WS_Tabelle[AQY_PreiseWS.AsInteger].KURS]));

        EDT_VK_2.Hint := Format(s,[2])+Trim(Format('%13.2n'+skreturn+rs_LV_Kurs+': %4.9f',
                         [CompVK(AQY_PreiseVK_2.AsCurrency),GetLinkagePointer^.WS_Tabelle[AQY_PreiseWS.AsInteger].KURS]));

        EDT_VK_3.Hint := Format(s,[3])+Trim(Format('%13.2n'+skreturn+rs_LV_Kurs+': %4.9f',
                         [CompVK(AQY_PreiseVK_3.AsCurrency),GetLinkagePointer^.WS_Tabelle[AQY_PreiseWS.AsInteger].KURS]));

        EDT_VK_4.Hint := Format(s,[4])+Trim(Format('%13.2n'+skreturn+rs_LV_Kurs+': %4.9f',
                         [CompVK(AQY_PreiseVK_4.AsCurrency),GetLinkagePointer^.WS_Tabelle[AQY_PreiseWS.AsInteger].KURS]));

        EDT_VK_5.Hint := Format(s,[5])+Trim(Format('%13.2n'+skreturn+rs_LV_Kurs+': %4.9f',
                         [CompVK(AQY_PreiseVK_5.AsCurrency),GetLinkagePointer^.WS_Tabelle[AQY_PreiseWS.AsInteger].KURS]));

        EDT_VK_6.Hint := Format(s,[6])+Trim(Format('%13.2n'+skreturn+rs_LV_Kurs+': %4.9f',
                         [CompVK(AQY_PreiseVK_6.AsCurrency),GetLinkagePointer^.WS_Tabelle[AQY_PreiseWS.AsInteger].KURS]));

        EDT_VK_7.Hint := Format(s,[7])+Trim(Format('%13.2n'+skreturn+rs_LV_Kurs+': %4.9f',
                         [CompVK(AQY_PreiseVK_7.AsCurrency),GetLinkagePointer^.WS_Tabelle[AQY_PreiseWS.AsInteger].KURS]));

        EDT_VK_8.Hint := Format(s,[8])+Trim(Format('%13.2n'+skreturn+rs_LV_Kurs+': %4.9f',
                         [CompVK(AQY_PreiseVK_8.AsCurrency),GetLinkagePointer^.WS_Tabelle[AQY_PreiseWS.AsInteger].KURS]));

        EDT_VK_9.Hint := Format(s,[9])+Trim(Format('%13.2n'+skreturn+rs_LV_Kurs+': %4.9f',
                         [CompVK(AQY_PreiseVK_9.AsCurrency),GetLinkagePointer^.WS_Tabelle[AQY_PreiseWS.AsInteger].KURS]));

        EDT_VK_10.Hint := Format(s,[10])+Trim(Format('%13.2n'+skreturn+rs_LV_Kurs+': %4.9f',
                         [CompVK(AQY_PreiseVK_10.AsCurrency),GetLinkagePointer^.WS_Tabelle[AQY_PreiseWS.AsInteger].KURS]));
   end; //** if AQY_PreiseWS.AsInteger <> 0

end; //** procedure AQY_PreiseAfterScroll


(******************************************************************************)
(***  AQY_Preise:  OnPostError                                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_PreisePostError(DataSet: TDataSet; E: EDatabaseError; var Action: TDataAction);

begin

inherited;
if IsMSSQLPrimaryKeyViolation (E.Message, AQY_Preise.Connection) then
   begin
        if (MessageDlg(rs_LV_PreisgruppeVorhanden, mtConfirmation,[mbOK,mbAbort],0)) = mrOK then
           begin
                Action := daAbort;
                Exit;
           end; //** if (MessageDlg ..
   end; //** if IsMSSQLPrimaryKeyViolation (E.Message, AQY_Preise.Connection)

if IsMSSQLRecordHasChanged(E.Message, TADOQuery(DataSet).Connection) then
   begin
        ShowMessage(GetStdRes(frs_STDErrMsgRecChanged));
        BTN_NavRefreshClick(BTN_NavRefresh);
        Action := daAbort;
        Exit;
   end; //** if IsMSSQLRecordHasChanged(E.Message, TADOQuery(DataSet).Connection)

Application.MessageBox(PChar(rs_LV_FehlerMeldung+' '+E.Message), PChar(rs_LV_DatenbankFehler),mb_Iconstop or mb_ApplModal);
AQY_Preise.Cancel;
Action := daAbort;

end; //** procedure AQY_PreisePostError


(******************************************************************************)
(***  DVKalk                                                                ***)
(******************************************************************************)
(******************************************************************************)
(***      SBT_DVKalkEdit: OnClick                                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_DVKalkEditClick(Sender: TObject);
begin

inherited;
with AQY_DVKalk do
     try
        Edit;
        UpdateDVKalkButtons;
     except
        raise;
     end //** try..except

end; //** procedure SBT_DVKalkEditClick


(******************************************************************************)
(***      SBT_DVKalkInsert: OnClick                                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_DVKalkInsertClick(Sender: TObject);
var
   n,
   i : integer;
   dummy1,
   dummy2,
   b : boolean;
   AValues : array [0..0] of Variant;

begin

inherited;

n := GetVarRDGDlg (rs_LV_Kalkmethode, [TxtKalkMethode(0,false),
                                       TxtKalkMethode(1,false),
                                       TxtKalkMethode(2,false),
                                       TxtKalkMethode(3,false),
                                       TxtKalkMethode(4,false)
                                       ],
                                       0, false, dummy1, dummy2);
if n < 0 then
   Exit;

b := ReadAnyFields (GetDobosADB,
                            'ARTIKEL_KALKULATION',
                            'WHERE ARTNR = '''+Trim(AQY_ArtikelStammARTNR.AsString)+''' '
                            +'AND NUMMER = '+IntToStr(n),
                            ['NUMMER'],
                             AValues);
try

   if ((b) and ((n = AValues[0]))) then
      begin
           ShowMessage(rs_LV_DVKalkExists);
           AQY_DVKalk.Cancel;
           UpdateDVKalkButtons;
           Exit;
      end; //** if ((b) and ((n = AValues[0])))
except
end; //** try..except

if Erfassen then
   NeuEingabeAktiv := true;


with AQY_DVKalk do
     try
        if not (AQY_ArtikelStamm.State in [dsEdit, dsInsert]) then
           BTN_AllgEditDauerEditClick(BTN_AllgEditDauerEdit);

        Insert;
        AQY_DVKalkARTNR.AsString := AQY_ArtikelStammARTNR.AsString;
        AQY_DVKalkNUMMER.AsInteger := n;
        AQY_DVKalkEK_EINMALKOSTEN.AsCurrency := 0.0;
        AQY_DVKalkEK_FERTIGUNG.AsCurrency := 0.0;
        AQY_DVKalkEK_MATERIAL.AsCurrency := 0.0;
        //** 10.2
        AQY_DVKalkEK_FREMDARBEIT_FIX.AsCurrency := 0.0;
        AQY_DVKalkEK_FREMDARBEIT_VAR.AsCurrency := 0.0;
        AQY_DVKalkEK_FREMDARBEIT_MINDEST.AsCurrency := 0.0;
        AQY_DVKalkEK_RUESTKOSTEN.AsCurrency := 0.0;
        AQY_DVKalkEK_ZUSCHLAG.AsCurrency := 0.0;
        AQY_DVKalkEK_WERKZEUGKOSTEN.AsCurrency := 0.0;
        AQY_DVKalkVK_EINMALKOSTEN.AsCurrency := 0.0;
        AQY_DVKalkVK_FERTIGUNG.AsCurrency := 0.0;
        AQY_DVKalkVK_MATERIAL.AsCurrency := 0.0;
        //** 10.2
        AQY_DVKalkVK_FREMDARBEIT_FIX.AsCurrency := 0.0;
        AQY_DVKalkVK_FREMDARBEIT_VAR.AsCurrency := 0.0;
        AQY_DVKalkVK_FREMDARBEIT_MINDEST.AsCurrency := 0.0;
        AQY_DVKalkVK_RUESTKOSTEN.AsCurrency := 0.0;
        AQY_DVKalkVK_ZUSCHLAG.AsCurrency := 0.0;
        AQY_DVKalkVK_WERKZEUGKOSTEN.AsCurrency := 0.0;
        AQY_DVKalkBEM.AsString := '';
        AQY_DVKalkLE_KALK_DATUM.AsDateTime := GetLinkagePointer^.TagesDatum;
        AQY_DVKalkLE_KALK_USER.AsInteger := GetLinkagePointer^.UserNummer;
        AQY_DVKalkLE_KALK_MENGE.AsInteger := 0;

     except
        raise;
     end; //** try..except

UpdateDVKalkButtons;

end; //** procedure SBT_DVKalkInsertClick


(******************************************************************************)
(***      SBT_DVKalkSave: OnClick                                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_DVKalkSaveClick(Sender: TObject);
begin

inherited;

with AQY_DVKalk do
     try
        Post;
        UpdateDVKalkButtons;
     except
        raise;
     end //** try..except

end; //** procedure SBT_DVKalkSaveClick


(******************************************************************************)
(***      SBT_DVKalkDelete: OnClick                                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_DVKalkDeleteClick(Sender: TObject);
begin

inherited;
with AQY_DVKalk do
     try
        if (MessageDlg(rs_LV_QDeleteDVKalk,
           mtConfirmation,[mbYes,mbNo],0)) = mrYes then
           Delete;
     except
        raise;
     end; //** try..except

ReadAllData;
UpdateDVKalkButtons;

end; //** procedure SBT_DVKalkDeleteClick


(******************************************************************************)
(***      SBT_DVKalkCancel: OnClick                                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_DVKalkCancelClick(Sender: TObject);
begin

inherited;
if (MessageDlg(rs_LV_QDiscardChangesKalkulation, mtConfirmation,[mbYes, mbNo],0)) = mrYes then
    with AQY_DVKalk do
         try
            Cancel;
            UpdateDVKalkButtons;
         except
            raise;
         end //** try..except

end; //** procedure SBT_DVKalkCancelClick


(******************************************************************************)
(***  UpdateDVKalkButtons                                                   ***)
(******************************************************************************)

procedure TFRM_DobosLV.UpdateDVKalkButtons;
begin

inherited;

with GetLinkagePointer^ do
     begin
          if not DTS_Open then
             begin
                  SBT_DVKalkDelete.Enabled := false;
                  SBT_DVKalkSave.Enabled := false;
                  SBT_DVKalkInsert.Enabled := false;
                  SBT_DVKalkEdit.Enabled := false;
                  SBT_DVKalkCancel.Enabled := false;
                  SBT_DVKalkMaske.Enabled := false;
                  SBT_DVKalkSchemaVgl.Enabled := false;
             end
          else
             begin
                  //** IB 29.01.2014: privEK und privVk getrennt integriert
                  SBT_DVKalkDelete.Enabled := (((PRIV_LOESCHEN = ja) or (PRIV_LOESCHEN = 'L')) and
                                                   (PRIV_EK = 'J') and
                                                   (PRIV_VK = 'J') and
                                                   (AQY_DVKalk.Active) and
                                                   (AQY_DVKalk.State = dsBrowse) and
                                                   (AQY_DVKalk.RecordCount > 0));
                  SBT_DVKalkSave.Enabled := ((AQY_DVKalk.Active) and
                                                   (AQY_DVKalk.State <> dsBrowse));
                  SBT_DVKalkInsert.Enabled := (((PRIV_ERFASSEN = ja) or
                                                (PRIV_ERFASSEN = 'L') or
                                                (PRIV_ERFASSEN = 'l') or
                                                (PRIV_ERFASSEN = 'b') or
                                                (PRIV_ERFASSEN = 'x') or
                                                (PRIV_ERFASSEN = 'y'))
                                                and
                                                 (not (isSpace(EDT_ArtNr.Text))) and
                                                ((PRIV_EK = 'J') or (PRIV_VK = 'J')) and
                                                (AQY_DVKalk.Active) and
                                                (AQY_DVKalk.State = dsBrowse));
                  SBT_DVKalkEdit.Enabled := (((PRIV_AENDERN = ja) or
                                              (PRIV_AENDERN = 'L')) and
                                             ((PRIV_EK = 'J') or (PRIV_VK = 'J')) and
                                              (AQY_DVKalk.Active) and
                                              (AQY_DVKalk.State = dsBrowse) and
                                              (AQY_DVKalk.RecordCount > 0));

                  SBT_DVKalkCancel.Enabled := ((AQY_DVKalk.Active) and
                                               (AQY_DVKalk.State <> dsBrowse));

                  SBT_DVKalkMaske.Enabled := (((PRIV_AENDERN = ja) or
                                              (PRIV_AENDERN = 'L')) and
                                              (PRIV_EK = 'J') and
                                              (PRIV_VK = 'J') and
                                              (AQY_DVKalk.Active) and
                                              (AQY_DVKalk.State = dsBrowse) and
                                              (AQY_DVKalk.RecordCount > 0));

                  SBT_DVKalkSchemaVgl.Enabled := (((PRIV_AENDERN = ja) or
                                              (PRIV_AENDERN = 'L')) and
                                              (PRIV_EK = 'J') and
                                              (PRIV_VK = 'J') and
                                              (AQY_DVKalk.Active) and
                                              (AQY_DVKalk.State = dsBrowse) and
                                              (AQY_DVKalk.RecordCount > 0));

             end; //** if not DTS_Open then
     end; //** with GetLinkagePointer^ do

if GetLinkagePointer.Priv_Nur_Sichten = ja then
   begin
        SBT_DVKalkEdit.Enabled := false;
        SBT_DVKalkDelete.Enabled := false;
        SBT_DVKalkInsert.Enabled := false;
        SBT_DVKalkCancel.Enabled := false;
        SBT_DVKalkSave.Enabled := false;
        SBT_DVKalkSchemaVgl.Enabled  := false;
        SBT_DVKalkMaske.Enabled  := false;
   end; //** if GetLinkagePoiner.Priv_Nur_Sichten = ja

//**
//** IB 29.01.2014, PrivEk und PrivVK jetzt getrennt,
//** deshalb nicht mehr mit SBT_DVKalkEdit konform
//**
//** SBT_DVKalkMaske.Enabled := SBT_DVKalkEdit.Enabled;
//** SBT_DVKalkSchemaVgl.Enabled := SBT_DVKalkEdit.Enabled;

SBT_KalkFirst.Enabled := (AQY_DVKalk.Active);
SBT_KalkPrior.Enabled := (AQY_DVKalk.Active);
SBT_KalkNext.Enabled := (AQY_DVKalk.Active);
SBT_KalkLast.Enabled := (AQY_DVKalk.Active);

end; //** procedure UpdateDVKalkButtons


(******************************************************************************)
(***  Fremdsprachentexte                                                    ***)
(******************************************************************************)
(******************************************************************************)
(***  UpdateFremdTexteButtons                                               ***)
(******************************************************************************)

procedure TFRM_DobosLV.UpdateFremdTexteButtons;
begin

inherited;
with GetLinkagePointer^ do
     begin
          if not DTS_Open then
             begin
                  SBT_FremdTextDelete.Enabled := false;
                  SBT_FremdTextSave.Enabled := false;
                  SBT_FremdTextInsert.Enabled := false;
                  SBT_FremdTextEdit.Enabled := false;
                  SBT_FremdTextCancel.Enabled := false;
                  MNI_FremdFliessText.Enabled := false;
             end
          else
             begin
                  SBT_FremdTextDelete.Enabled := (((PRIV_LOESCHEN = ja) or (PRIV_LOESCHEN = 'L')) and
                                                   (AQY_FremdTexte.Active) and
                                                   (AQY_FremdTexte.State = dsBrowse) and
                                                   (AQY_FremdTexte.RecordCount > 0));
                  SBT_FremdTextSave.Enabled := ((AQY_FremdTexte.Active) and
                                                (AQY_FremdTexte.State <> dsBrowse));
                  SBT_FremdTextInsert.Enabled := (((PRIV_ERFASSEN = ja) or
                                                   (PRIV_ERFASSEN = 'L') or
                                                   (PRIV_ERFASSEN = 'l') or
                                                   (PRIV_ERFASSEN = 'b') or
                                                   (PRIV_ERFASSEN = 'x') or
                                                   (PRIV_ERFASSEN = 'y'))
                                                   and
                                                    (not (isSpace(EDT_ArtNr.Text))) and
                                              (AQY_FremdTexte.Active) and
                                              (AQY_FremdTexte.State = dsBrowse));
                  SBT_FremdTextEdit.Enabled := (((PRIV_AENDERN = ja) or
                                                 (PRIV_AENDERN = 'L')) and
                                                 (AQY_FremdTexte.Active) and
                                                 (AQY_FremdTexte.State = dsBrowse) and
                                                 (AQY_FremdTexte.RecordCount > 0));

                  SBT_FremdTextCancel.Enabled := ((AQY_FremdTexte.Active) and
                                                  (AQY_FremdTexte.State <> dsBrowse));
                  MNI_FremdFliessText.Enabled := SBT_FremdTextSave.Enabled;

             end; //** if not DTS_Open then
     end; //** with GetLinkagePointer^ do

if GetLinkagePointer.Priv_Nur_Sichten = ja then
   begin
        SBT_FremdTextEdit.Enabled := false;
        SBT_FremdTextDelete.Enabled := false;
        SBT_FremdTextInsert.Enabled := false;
        SBT_FremdTextCancel.Enabled := false;
        SBT_FremdTextSave.Enabled := false;
   end; //** if GetLinkagePoiner.Priv_Nur_Sichten = ja

   {
MNI_FremdTextEdit.Enabled := SBT_FremdTextEdit.Enabled;
MNI_FremdTextInsert.Enabled := SBT_FremdTextInsert.Enabled;
MNI_FremdTextDelete.Enabled := SBT_FremdTextDelete.Enabled;
MNI_FremdTextCancel.Enabled := SBT_FremdTextCancel.Enabled;
MNI_FremdTextSave.Enabled := SBT_FremdTextSave.Enabled;
    }



end; //** procedure UpdateFremdTexteButtons


(******************************************************************************)
(***      SBT_FremtTextEdit: OnClick                                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_FremdTextEditClick(Sender: TObject);
begin

inherited;
with AQY_FremdTexte do
     try
        Edit;
        UpdateFremdTexteButtons;
     except
        raise;
     end //** try..except

end; //** procedure SBT_FremtTextEditClick


(******************************************************************************)
(***      SBT_FremdTextCancel: OnClick (Verwefen Änderungen Texte)          ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_FremdTextCancelClick(Sender: TObject);
begin

inherited;
if (MessageDlg(rs_LV_QDiscardChangesFremdTexte, mtConfirmation,[mbYes, mbNo],0)) = mrYes then
    with AQY_FremdTexte do
         try
            Cancel;
            UpdateFremdTexteButtons;
         except
            raise;
         end //** try..except

end; //** procedure SBT_FremdTextCancelClick


(******************************************************************************)
(***      SBT_FremdTextDelete: OnClick  (Fremdtexte löschen)                ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_FremdTextDeleteClick(Sender: TObject);
begin

inherited;
with AQY_FremdTexte do
     try
        if (MessageDlg(Format(rs_LV_QDeleteTexte,[EDT_Sprache.AsInteger]),
           mtConfirmation,[mbYes,mbNo],0)) = mrYes then
           Delete;
     except
        raise;
     end; //** try..except

ReadAllData;
UpdateFremdTexteButtons;

end; //** procedure SBT_FremdTextDeleteClick


(******************************************************************************)
(***      SBT_FremdText: OnClick (Erfassen FremdTexte)                      ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_FremdTextInsertClick(Sender: TObject);
var
   i : integer;
   b : boolean;
   AValues : array [0..0] of Variant;

begin

inherited;
if Erfassen then
   NeuEingabeAktiv := true;

with AQY_FremdTexte do
     try
        if not (AQY_ArtikelStamm.State in [dsEdit, dsInsert]) then
           BTN_AllgEditDauerEditClick(BTN_AllgEditDauerEdit);

        Insert;
        AQY_FremdTexteSPRACHE.AsInteger := 1;
        EDT_SpracheLookupClick(EDT_Sprache);
        i := EDT_Sprache.AsInteger;
        b := ReadAnyFields (GetDobosADB,
                            'ARTIKEL_TEXTE',
                            'WHERE ARTNR = '''+Trim(AQY_ArtikelStammARTNR.AsString)+''' '
                            +'AND SPRACHE = '+IntToStr(i),
                            ['SPRACHE'],
                             AValues);
        try
           if ((i = 0) or (AValues[0] = i)) then
              begin
                   ShowMessage(rs_LV_FremdTextExists);
                   AQY_FremdTexte.Cancel;
                   UpdateFremdTexteButtons;
                   Exit;
              end; //** if ((i = 0) or (AValues[0] = i))
        except
        end; //** try..except

        AQY_FremdTexteARTNR.AsString := TrimRight(AQY_ArtikelStammARTNR.AsString);
        AQY_FremdTexteSPRACHE.AsInteger := i;
        AQY_FremdTexteBEZ_1.AsString := '';
        AQY_FremdTexteBEZ_2.AsString := '';
        AQY_FremdTexteBEZ_3.AsString := '';
        AQY_FremdTexteBEZ_4.AsString := '';
        AQY_FremdTexteBEZ_5.AsString := '';
        AQY_FremdTexteBEZ_6.AsString := '';
        AQY_FremdTexteBEZ_7.AsString := '';
        AQY_FremdTexteBEZ_8.AsString := '';
        Self.ActiveControl := EDT_FBez_1;

     except
        raise;
     end; //** try..except

UpdateFremdTexteButtons;

end; //** procedure SBT_FremdTextInsertClick


(******************************************************************************)
(***      SBT_FremdText: OnClick (Speichern Lieferantendaten)               ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_FremdTextSaveClick(Sender: TObject);
var
   ArtNr : string;
   sp     : integer;

begin

inherited;
with AQY_FremdTexte do
     try
        ArtNr := FieldByName('ARTNR').AsString;
        sp := FieldByName('SPRACHE').AsInteger;
        Post;
        Close;
        Open; //** Einfaches ReOpen, kein UCChange machen!
        Locate('ARTNR; SPRACHE', VarArrayOf([ArtNr, sp]),[]);
        UpdateFremdTexteButtons;
     except
        raise;
     end //** try..except

end; //** procedure SBT_FremdTextSaveClick


(******************************************************************************)
(***  DataSource Lieferant: DataChange (Buttons Lieferanten updaten)        ***)
(******************************************************************************)
procedure TFRM_DobosLV.DTS_FremdTexteDataChange(Sender: TObject; Field: TField);

begin

inherited;
UpdateFremdTexteButtons;

end; //** procedure DTS_FremdTexteDataChange


(******************************************************************************)
(***  DataSource Lieferant: OnStateChange (Buttons Lieferanten updaten)     ***)
(******************************************************************************)
procedure TFRM_DobosLV.DTS_FremdTexteStateChange(Sender: TObject);
begin

inherited;
UpdateFremdTexteButtons;

end; //** procedure DTS_FremdTexteStateChange


(******************************************************************************)
(***   AQY_FremdTexte: OnAfterPost (UpdateDatum / User eintragen)           ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_FremdTexteAfterPost(DataSet: TDataSet);
begin

inherited;
PostStammAenderung(false);

end; //** procedure AQY_FremdTexteAfterPost


(******************************************************************************)
(***      AQY_DVKalk: OnAfterPost                                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_DVKalkAfterPost(DataSet: TDataSet);
begin

inherited;
PostStammAenderung(false);

end; //** procedure AQY_DVKalkAfterPost


(******************************************************************************)
(***                     AQY_DVKalk: OnAfterOpen                            ***)
(******************************************************************************)


procedure TFRM_DobosLV.AQY_DVKalkAfterOpen(DataSet: TDataSet);
begin

inherited;

EDT_DVKalkNummer.Hint := rs_LV_unbekannt;
LAB_DVKalkGrundkosten.Caption := '';

if AQY_DVKalk.Active then
   if ((EDT_DVKalkNummer.AsInteger >= Integer(Low(TKalkMethodeK))) and
       (EDT_DVKalkNummer.AsInteger <= Integer(High(TKalkMethodeK)))) then
      begin
           LAB_DVKalkGrundkosten.Caption := TxtKalkMethode(EDT_DVKalkNummer.AsInteger,true);
           EDT_DVKalkNummer.Hint := TxtKalkMethode(AQY_DVKalkNUMMER.AsInteger,false);
      end; //** if ...

end; //** procedure AQY_DVKalkAfterOpen


(******************************************************************************)
(***                    EDT_DVKalkNummer: OnChange                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_DVKalkNummerChange(Sender: TObject);
begin

inherited;

LYC_Lagerverwaltung.BeginUpdate;
EDT_DVKalkNummer.Hint := rs_LV_unbekannt;
LAB_DVKalkGrundkosten.Caption := '';

if AQY_DVKalk.Active then
   if ((EDT_DVKalkNummer.AsInteger >= Integer(Low(TKalkMethodeK))) and
       (EDT_DVKalkNummer.AsInteger <= Integer(High(TKalkMethodeK)))) then
      begin
           LAB_DVKalkGrundkosten.Caption := TxtKalkMethode(EDT_DVKalkNummer.AsInteger,true);
           EDT_DVKalkNummer.Hint := TxtKalkMethode(AQY_DVKalkNUMMER.AsInteger,false);
      end; //** if ...

LYC_Lagerverwaltung.EndUpdate;

end; //** procedure EDT_DVKalkNummerChange


(******************************************************************************)
(***      AQY_DVKalk: OnBeforeDelete                                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_DVKalkBeforeDelete(DataSet: TDataSet);
begin

inherited;
PostStammAenderung(false);

end; //** procedure AQY_DVKalkBeforeDelete


(******************************************************************************)
(***      AQY_DVKalk: OnBeforePost                                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_DVKalkBeforePost(DataSet: TDataSet);
begin

inherited;
if GetLinkagePointer^.Module[imArtikelarchiv] then
   if AQY_DVKalk.State = dsEdit then
      begin
           if (not (ArchiviereOldRecord(AQY_DVKalk,
                                        AQY_Divers,
                                        GetDOBOSADB,
                                        'A_ARCHIV_ARTIKEL_KALKULATION',
                                        Format('M%2.2d',[GetLinkagePointer^.MRecord.Mandant])+'.dbo.ARTIKEL_KALKULATION',
                                        'ARTNR, NUMMER',
                                        ''''+SQLTextString(AQY_DVKalkARTNR.AsString)+''', '
                                           +IntToStr(AQY_DVKalkNUMMER.AsInteger),
                                        'ARTNR = '''+SQLTextString(AQY_DVKalkARTNR.AsString)+''' '
                                        +'AND NUMMER = '+IntToStr(AQY_DVKalkNUMMER.AsInteger)+' '
                                        ))) then
              ShowMessage(rs_LV_ArchivFailed);
      end; //** if DVKalk.State = dsEdit then

if (AQY_DVKalkNUMMER.AsInteger = 0) then
   if (AQY_DVKalk.State = dsEdit) then
      begin
           ArchivKalkDataStandard(AQY_DVKalkARTNR.AsString, 'E');
           ArchivKalkDataStandard(AQY_DVKalkARTNR.AsString, 'V');
      end; //**    if AQY_DVKalk.State = dsEdit then

end; //** procedure AQY_DVKalkBeforePost


(******************************************************************************)
(***      AQY_DVKalk: OnCalcFields                                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_DVKalkCalcFields(DataSet: TDataSet);
begin

inherited;

AQY_DVKAlkBEM_Kurz.AsString := copy(AQY_DVKalkBEM.AsString,1,34);

end; //** procedure AQY_DVKalkCalcFields(DataSet: TDataSet);


(******************************************************************************)
(***      AQY_FremdTexteBeforeDelete                                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_FremdTexteBeforeDelete(DataSet: TDataSet);
begin

inherited;
PostStammAenderung(false);

end; //** procedure AQY_FremdTexteBeforeDelete


(******************************************************************************)
(***      AQY_FremdTexteOnBeforePost                                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_FremdTexteBeforePost(DataSet: TDataSet);
begin

inherited;
if not GetLinkagePointer^.HasUnicodeModule then
   begin
        //AQY_ArtikelStammARTNR.AsString := AnsiString(AQY_FremdTexteARTNR.AsString);
        AQY_FremdTexteBEZ_1.AsString := AnsiString(AQY_FremdTexteBEZ_1.AsString);
        AQY_FremdTexteBEZ_2.AsString := AnsiString(AQY_FremdTexteBEZ_2.AsString);
        AQY_FremdTexteBEZ_3.AsString := AnsiString(AQY_FremdTexteBEZ_3.AsString);
        AQY_FremdTexteBEZ_4.AsString := AnsiString(AQY_FremdTexteBEZ_4.AsString);
        AQY_FremdTexteBEZ_5.AsString := AnsiString(AQY_FremdTexteBEZ_5.AsString);
        AQY_FremdTexteBEZ_6.AsString := AnsiString(AQY_FremdTexteBEZ_6.AsString);
        AQY_FremdTexteBEZ_7.AsString := AnsiString(AQY_FremdTexteBEZ_7.AsString);
        AQY_FremdTexteBEZ_8.AsString := AnsiString(AQY_FremdTexteBEZ_8.AsString);
   end; //** if not GetLinkagePointer^.HasUnicodeModule then


if GetLinkagePointer^.Module[imArtikelarchiv] then
   if AQY_FremdTexte.State = dsEdit then
      begin
           if (not (ArchiviereOldRecord(AQY_FremdTexte,
                                        AQY_Divers,
                                        GetDOBOSADB,
                                        'A_ARCHIV_ARTIKEL_TEXTE',
                                        Format('M%2.2d',[GetLinkagePointer^.MRecord.Mandant])+'.dbo.ARTIKEL_TEXTE',
                                        'ARTNR, SPRACHE',
                                        ''''+SQLTextString(AQY_FremdTexteARTNR.AsString)+''', '+IntToStr(AQY_FremdTexteSPRACHE.AsInteger),
                                        'ARTNR = '''+SQLTextString(AQY_FremdTexteARTNR.AsString)+''' '
                                        +'AND SPRACHE = '+IntToStr(AQY_FremdTexteSPRACHE.AsInteger)
                                        ))) then
              ShowMessage(rs_LV_ArchivFailed);
      end; //** if AQY_Artikelstamm.State = dsEdit then

end; //** procedure AQY_FremdTexteBeforePost


(******************************************************************************)
(***  L I E F E R A N T E N                                                 ***)
(******************************************************************************)
(******************************************************************************)
(***  UpdateLiefButtons                                                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.UpdateLiefButtons;
var
   LinkNr : integer;
   s      : string;
   b      : boolean;
begin

inherited;
with GetLinkagePointer^ do
     begin
          if not DTS_Open then
             begin
                  SBT_LiefDelete.Enabled := false;
                  SBT_LiefSave.Enabled := false;
                  SBT_LiefInsert.Enabled := false;
                  SBT_LiefEdit.Enabled := false;
                  SBT_LiefCancel.Enabled := false;
                  MNI_KalkEK.Enabled := false;
                  MNI_Kalk1EK.Enabled := false;
                  SBT_LiefInternetLink.Enabled := false;
             end
          else
             begin
                  SBT_LiefDelete.Enabled := (((PRIV_LOESCHEN = ja) or (PRIV_LOESCHEN = 'L')) and
                                             (AQY_Lieferant.Active) and
                                             (AQY_Lieferant.State = dsBrowse) and
                                             (AQY_Lieferant.RecordCount > 0));
                  MNI_KalkEK.Enabled := ((AQY_Lieferant.Active) and
                                         (AQY_Lieferant.State = dsBrowse) and
                                         (not IsSpace(CurrArtNr)));

                  MNI_Kalk1EK.Enabled := MNI_KalkEK.Enabled;

                  SBT_LiefSave.Enabled := ((AQY_Lieferant.Active) and
                                           (AQY_Lieferant.State <> dsBrowse));
                  SBT_LiefInsert.Enabled := (((PRIV_ERFASSEN = ja) or
                                              (PRIV_ERFASSEN = 'L') or
                                              (PRIV_ERFASSEN = 'l') or
                                              (PRIV_ERFASSEN = 'b') or
                                              (PRIV_ERFASSEN = 'x') or
                                              (PRIV_ERFASSEN = 'y'))
                                              and
                                              (not (isSpace(EDT_ArtNr.Text))) and
                                              (AQY_Lieferant.Active) and
                                              (AQY_Lieferant.State = dsBrowse));
                  SBT_LiefEdit.Enabled := (((PRIV_AENDERN = ja) or
                                            (PRIV_AENDERN = 'L')) and
                                            (AQY_Lieferant.Active) and
                                            (AQY_Lieferant.State = dsBrowse) and
                                            (AQY_Lieferant.RecordCount > 0));

                  SBT_LiefCancel.Enabled := ((AQY_Lieferant.Active) and
                                             (AQY_Lieferant.State <> dsBrowse));

                  //** Änderung 5)
                  //** der button wurde immer hinundher geswitchet
                  {
                  SBT_LiefInternetLink.Enabled := false;
                  LinkNr := -1;
                  if AQY_Lieferant.Active then
                     LinkNr := AQY_LieferantHYPERLINK.AsInteger;
                  if GetWriteInternetLinkData(false,LinkNr, s) then
                     begin
                          SBT_LiefInternetLink.Hint := s;
                          SBT_LiefInternetLink.Enabled := true;
                     end
                  else
                     begin
                          SBT_LiefInternetLink.Hint := rs_LV_LinkHint;
                          if ((Erfassen) or (Aendern)) then
                             SBT_LiefInternetLink.Enabled := true;
                     end; //** if GetWriteInternetLinkData(false,LinkNr, s) then

                  SBT_LiefInternetLink.Enabled := ((SBT_LiefSave.Enabled) or
                                                   ((AQY_Lieferant.Active) and
                                                    (AQY_LieferantHYPERLINK.AsInteger > 0)));
                   }
                  SBT_LiefInternetLink.Enabled := ((SBT_LiefSave.Enabled) or
                                                   ((AQY_Lieferant.Active) and
                                                    (AQY_LieferantHYPERLINK.AsInteger > 0)));

                  //** Änderung 5)


             end; //** if not DTS_Open then
     end; //** with GetLinkagePointer^ do

MNI_ChangeToLief1.Enabled := ((SBT_LiefEdit.Enabled) and
                              (AQY_Lieferant.Active) and
                              (AQY_Lieferant.RecordCount > 1) and
                              (AQY_LieferantNUMMER.AsInteger <> 1));

if GetLinkagePointer.Priv_Nur_Sichten = ja then
   begin
        SBT_LiefEdit.Enabled := false;
        SBT_LiefDelete.Enabled := false;
        SBT_LiefInsert.Enabled := false;
        SBT_LiefCancel.Enabled := false;
        SBT_LiefSave.Enabled := false;
        MNI_KalkEK.Enabled := false;
        MNI_Kalk1EK.Enabled := false;
        MNI_EKStaffelEingeben.Enabled := false;
        MNI_EKVariablesRasterErfassen.Enabled := false;
   end; //** if GetLinkagePoiner.Priv_Nur_Sichten = ja

MNI_LiefEdit.Enabled := SBT_LiefEdit.Enabled;
MNI_LiefInsert.Enabled := SBT_LiefInsert.Enabled;
MNI_LiefDelete.Enabled := SBT_LiefDelete.Enabled;
MNI_LiefCancel.Enabled := SBT_LiefCancel.Enabled;
MNI_LiefSave.Enabled := SBT_LiefSave.Enabled;

SBT_LieferantFirst.Enabled := RBT_PreiseNetto.Enabled;
SBT_LieferantPrior.Enabled := RBT_PreiseNetto.Enabled;
SBT_LieferantNext.Enabled := RBT_PreiseNetto.Enabled;
SBT_LieferantLast.Enabled := RBT_PreiseNetto.Enabled;

if GetLinkagePointer^.Serial = KSerial_Hoehne then
   UebersteuerungHoehne;

end; //** procedure UpdateLiefButtons


(******************************************************************************)
(***                       UpdateLieferantenCount                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.UpdateLieferantenCount;
var
   c : integer;
begin

c := 0;
with AQY_Lieferant do
     if Active then
        c := RecordCount;
if c > 0 then
   LAB_LieferantenAnzahl.Caption := Format('%d / %d',[AQY_Lieferant.RecNo, c])
else
   LAB_LieferantenAnzahl.Caption := '';

end; //** procedure UpdateLieferantenCount


(******************************************************************************)
(***  DataSource Lieferant: OnStateChange (Buttons Lieferanten updaten)     ***)
(******************************************************************************)

procedure TFRM_DobosLV.DTS_LieferantStateChange(Sender: TObject);
begin

inherited;
UpdateLiefButtons;

end; //** procedure DTS_LieferantStateChange


(******************************************************************************)
(***  AQY_Lieferant: OnAfterScroll                                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_LieferantAfterScroll(DataSet: TDataSet);
var
   s,s1 : string;
   AValues : array [0..0] of Variant;
   AVKPreis,
   ADB     : currency;
   aLinkNr : integer;

               (***************************************************************)
               (***      lokale function CompEK                             ***)
               (***************************************************************)
                function CompEK(const AEK : Currency) : Currency;
                var
                   r : Currency;

                begin

                with GetLinkagePointer^ do
                     begin
                          r := AEK;
                          r := (r - ((r / 100) * AQY_LieferantRABATT.AsCurrency));
                          if (AQY_LieferantWS.AsInteger in [1..99]) then
                             r := r * (WS_Tabelle[AQY_LieferantWS.AsInteger].KURS);
                          Runde(r);
                          result := r;
                     end; //** with GetLinkagePointer^ do

                end; //** lokale function CompEK

(******************************************************************************)
(***     Start der procedure AQY_LieferantAfterScroll                       ***)
(******************************************************************************)
begin

inherited;

if DataSet.ControlsDisabled then
   Exit;

if IsSpace(CurrArtNr) then
   Exit;

if IsSpace(AQY_LieferantLIEF_NAME.AsString) then
   PAN_LiefName.Caption := rs_LV_undefiniert
else
   PAN_LiefName.Caption := AQY_LieferantLIEF_NAME.AsString;

if AQY_LieferantGESPERRT.IsNull then
   CBX_LiefGesperrt.Caption := rs_LV_notGesperrt
else
   if AQY_LieferantGESPERRT.AsInteger = 2 then
      CBX_LiefGesperrt.Caption := rs_LV_BedingtGesperrt
   else
      if AQY_LieferantGESPERRT.AsInteger = 0 then
         CBX_LiefGesperrt.Caption := rs_LV_notGesperrt
      else
         CBX_LiefGesperrt.Caption := rs_LV_Gesperrt;

if Get1stChar(AQY_LieferantStaffel_BP.Value) in ['F','S'] then
   ReadBezForFremdKalk(true,AQY_LieferantStaffel_BP.Value);


if AQY_LieferantStaffel_BP.Value <> 'P' then
   begin
        s := rs_LV_EK+' %d '+rs_LV_in+' '+Trim(GetLinkagePointer^.WS_Tabelle[0].NAME)+': ';

        EDT_LiefEK_1.Hint := Format(s,[1])+Trim(Format('%13.2n'+skreturn+rs_LV_Kurs+': %4.9f',
                             [CompEK(AQY_LieferantEK_1.AsCurrency),GetLinkagePointer^.WS_Tabelle[AQY_LieferantWS.AsInteger].KURS]));

        EDT_LiefEK_2.Hint := Format(s,[2])+Trim(Format('%13.2n'+skreturn+rs_LV_Kurs+': %4.9f',
                             [CompEK(AQY_LieferantEK_2.AsCurrency),GetLinkagePointer^.WS_Tabelle[AQY_LieferantWS.AsInteger].KURS]));

        EDT_LiefEK_3.Hint := Format(s,[3])+Trim(Format('%13.2n'+skreturn+rs_LV_Kurs+': %4.9f',
                             [CompEK(AQY_LieferantEK_3.AsCurrency),GetLinkagePointer^.WS_Tabelle[AQY_LieferantWS.AsInteger].KURS]));

        EDT_LiefEK_4.Hint := Format(s,[4])+Trim(Format('%13.2n'+skreturn+rs_LV_Kurs+': %4.9f',
                             [CompEK(AQY_LieferantEK_4.AsCurrency),GetLinkagePointer^.WS_Tabelle[AQY_LieferantWS.AsInteger].KURS]));

        EDT_LiefEK_5.Hint := Format(s,[5])+Trim(Format('%13.2n'+skreturn+rs_LV_Kurs+': %4.9f',
                             [CompEK(AQY_LieferantEK_5.AsCurrency),GetLinkagePointer^.WS_Tabelle[AQY_LieferantWS.AsInteger].KURS]));

        EDT_LiefEK_6.Hint := Format(s,[6])+Trim(Format('%13.2n'+skreturn+rs_LV_Kurs+': %4.9f',
                             [CompEK(AQY_LieferantEK_6.AsCurrency),GetLinkagePointer^.WS_Tabelle[AQY_LieferantWS.AsInteger].KURS]));

        EDT_LiefEK_7.Hint := Format(s,[7])+Trim(Format('%13.2n'+skreturn+rs_LV_Kurs+': %4.9f',
                             [CompEK(AQY_LieferantEK_7.AsCurrency),GetLinkagePointer^.WS_Tabelle[AQY_LieferantWS.AsInteger].KURS]));

        EDT_LiefEK_8.Hint := Format(s,[8])+Trim(Format('%13.2n'+skreturn+rs_LV_Kurs+': %4.9f',
                             [CompEK(AQY_LieferantEK_8.AsCurrency),GetLinkagePointer^.WS_Tabelle[AQY_LieferantWS.AsInteger].KURS]));

        EDT_LiefEK_9.Hint := Format(s,[9])+Trim(Format('%13.2n'+skreturn+rs_LV_Kurs+': %4.9f',
                             [CompEK(AQY_LieferantEK_9.AsCurrency),GetLinkagePointer^.WS_Tabelle[AQY_LieferantWS.AsInteger].KURS]));

        EDT_LiefEK_10.Hint := Format(s,[10])+Trim(Format('%13.2n'+skreturn+rs_LV_Kurs+': %4.9f',
                             [CompEK(AQY_LieferantEK_10.AsCurrency),GetLinkagePointer^.WS_Tabelle[AQY_LieferantWS.AsInteger].KURS]));

   end
else
   begin
        s := rs_LV_EK+' %d '+rs_LV_in+' '+Trim(GetLinkagePointer^.WS_Tabelle[0].NAME)+': ';

        EDT_LiefEK_1.Hint := Format(s,[1])+Trim(Format('%13.2n'+skreturn+rs_LV_Kurs+': %4.9f',
                             [CompEK(AQY_LieferantEK_1.AsCurrency),GetLinkagePointer^.WS_Tabelle[AQY_LieferantWS.AsInteger].KURS]));

        EDT_LiefEK_2.Hint := '-'+Trim(Format('%13.2n',[AQY_LieferantEK_2.AsCurrency]))+'% := '
                           + Format(s,[2])
                           + Trim(Format('%13.2n',[CompEK(AQY_LieferantEK_1.AsCurrency
                                                         - ((AQY_LieferantEK_1.AsCurrency)*(AQY_LieferantEK_2.AsCurrency) / 100))]))
                           + skReturn
                           + Format(rs_LV_Kurs+': %4.9f',[GetLinkagePointer^.WS_Tabelle[AQY_LieferantWS.AsInteger].KURS]);

        EDT_LiefEK_3.Hint := '-'+Trim(Format('%13.2n',[AQY_LieferantEK_3.AsCurrency]))+'% := '
                           + Format(s,[3])
                           + Trim(Format('%13.2n',[CompEK(AQY_LieferantEK_1.AsCurrency
                                                         - ((AQY_LieferantEK_1.AsCurrency)*(AQY_LieferantEK_3.AsCurrency) / 100))]))
                           + skReturn
                           + Format(rs_LV_Kurs+': %4.9f',[GetLinkagePointer^.WS_Tabelle[AQY_LieferantWS.AsInteger].KURS]);

        EDT_LiefEK_4.Hint := '-'+Trim(Format('%13.2n',[AQY_LieferantEK_4.AsCurrency]))+'% := '
                           + Format(s,[4])
                           + Trim(Format('%13.2n',[CompEK(AQY_LieferantEK_1.AsCurrency
                                                         - ((AQY_LieferantEK_1.AsCurrency)*(AQY_LieferantEK_4.AsCurrency) / 100))]))
                           + skReturn
                           + Format(rs_LV_Kurs+': %4.9f',[GetLinkagePointer^.WS_Tabelle[AQY_LieferantWS.AsInteger].KURS]);

        EDT_LiefEK_5.Hint := '-'+Trim(Format('%13.2n',[AQY_LieferantEK_5.AsCurrency]))+'% := '
                           + Format(s,[5])
                           + Trim(Format('%13.2n',[CompEK(AQY_LieferantEK_1.AsCurrency
                                                         - ((AQY_LieferantEK_1.AsCurrency)*(AQY_LieferantEK_5.AsCurrency) / 100))]))
                           + skReturn
                           + Format(rs_LV_Kurs+': %4.9f',[GetLinkagePointer^.WS_Tabelle[AQY_LieferantWS.AsInteger].KURS]);

        EDT_LiefEK_6.Hint := '-'+Trim(Format('%13.2n',[AQY_LieferantEK_6.AsCurrency]))+'% := '
                           + Format(s,[6])
                           + Trim(Format('%13.2n',[CompEK(AQY_LieferantEK_1.AsCurrency
                                                         - ((AQY_LieferantEK_1.AsCurrency)*(AQY_LieferantEK_6.AsCurrency) / 100))]))
                           + skReturn
                           + Format(rs_LV_Kurs+': %4.9f',[GetLinkagePointer^.WS_Tabelle[AQY_LieferantWS.AsInteger].KURS]);

        EDT_LiefEK_7.Hint := '-'+Trim(Format('%13.2n',[AQY_LieferantEK_7.AsCurrency]))+'% := '
                           + Format(s,[7])
                           + Trim(Format('%13.2n',[CompEK(AQY_LieferantEK_1.AsCurrency
                                                         - ((AQY_LieferantEK_1.AsCurrency)*(AQY_LieferantEK_7.AsCurrency) / 100))]))
                           + skReturn
                           + Format(rs_LV_Kurs+': %4.9f',[GetLinkagePointer^.WS_Tabelle[AQY_LieferantWS.AsInteger].KURS]);

        EDT_LiefEK_8.Hint := '-'+Trim(Format('%13.2n',[AQY_LieferantEK_8.AsCurrency]))+'% := '
                           + Format(s,[8])
                           + Trim(Format('%13.2n',[CompEK(AQY_LieferantEK_1.AsCurrency
                                                         - ((AQY_LieferantEK_1.AsCurrency)*(AQY_LieferantEK_8.AsCurrency) / 100))]))
                           + skReturn
                           + Format(rs_LV_Kurs+': %4.9f',[GetLinkagePointer^.WS_Tabelle[AQY_LieferantWS.AsInteger].KURS]);

        EDT_LiefEK_9.Hint := '-'+Trim(Format('%13.2n',[AQY_LieferantEK_9.AsCurrency]))+'% := '
                           + Format(s,[9])
                           + Trim(Format('%13.2n',[CompEK(AQY_LieferantEK_1.AsCurrency
                                                         - ((AQY_LieferantEK_1.AsCurrency)*(AQY_LieferantEK_9.AsCurrency) / 100))]))
                           + skReturn
                           + Format(rs_LV_Kurs+': %4.9f',[GetLinkagePointer^.WS_Tabelle[AQY_LieferantWS.AsInteger].KURS]);

        EDT_LiefEK_10.Hint := '-'+Trim(Format('%13.2n',[AQY_LieferantEK_10.AsCurrency]))+'% := '
                            + Format(s,[10])
                            + Trim(Format('%13.2n',[CompEK(AQY_LieferantEK_1.AsCurrency
                                                          - ((AQY_LieferantEK_1.AsCurrency)*(AQY_LieferantEK_10.AsCurrency) / 100))]))
                            + skReturn
                            + Format(rs_LV_Kurs+': %4.9f',[GetLinkagePointer^.WS_Tabelle[AQY_LieferantWS.AsInteger].KURS]);

   end; //** else von if AQY_LieferantStaffel_BP.Value <> 'P'

//** IB 2013-07-11
if (IsBiogarten) then
 if ((AQY_LieferantKUNU.AsInteger > 0) and (AQY_LieferantKUNU.AsInteger >= FirstKreditor)) then
  if (AQY_LieferantNUMMER.AsInteger = 1) then
     try
        AVKPreis := 0.00;
        if ReadAnyFields (GetDOBOSADB,
                     'ARTIKEL_PREISE',
                     'WHERE ARTNR = '''+SqlTextString(AnsiUpperCase(AQY_LIEFERANTARTNR.AsString))+''' '
                     +' AND WS = '+IntToStr(AQY_LieferantWS.AsInteger)
                     +' AND (ART = ''A'') ',
                     ['VK_1'],
                      AValues) then
           try
              AVKPreis := AValues[0];
           except
              AVKPreis := 0.00;
           end;

        if AVKPreis <> 0.00 then
           ADB := (AVKPReis - (CompEK(AQY_LieferantEK_1.AsCurrency))) / AVKPreis * 100;
        Runde(ADB);
        EDT_LiefEK_1.Hint := EDT_LiefEK_1.Hint+skreturn+'DB in%: '+Trim(Format('%13.2n',[ADB]));

     except
     end;

//** Änderung 5)
//** siehe oben (Technik halt ein wenig geändert)
SBT_LiefInternetLink.Hint := rs_LV_LinkHint;
aLinkNr := AQY_LieferantHYPERLINK.AsInteger;
if aLinkNr <> -1 then
   if GetWriteInternetLinkData(false,aLinkNr, s) then
      SBT_LiefInternetLink.Hint := s;
//** Änderung 5)

UpdateLieferantenCount;
UpdateLiefButtons;
//** 11.1
OldLfdNummer := AQY_LieferantNUMMER.AsInteger;
OldEK1 := AQY_LieferantEK_1.AsCurrency;
OldEK2 := AQY_LieferantEK_2.AsCurrency;
OldEK3 := AQY_LieferantEK_3.AsCurrency;
OldEK4 := AQY_LieferantEK_4.AsCurrency;
OldEK5 := AQY_LieferantEK_5.AsCurrency;
OldEK6 := AQY_LieferantEK_6.AsCurrency;
OldEK7 := AQY_LieferantEK_7.AsCurrency;
OldEK8 := AQY_LieferantEK_8.AsCurrency;
OldEK9 := AQY_LieferantEK_9.AsCurrency;
OldEK10 := AQY_LieferantEK_10.AsCurrency;
OldRabatt := AQY_LieferantRABATT.AsCurrency;
OldLePreisUpdate := AQY_LieferantLE_PREIS_UPDATE.AsDateTime;

ReadRaster(AQY_LieferantRASTER.AsInteger, false, true, true);
LastRaster := AQY_LieferantRASTER.AsInteger;

UpdateDavosBez;

GetZuschlaegeHints;

end; //** procedure AQY_LieferantAfterScroll


(******************************************************************************)
(***  AQY_Lieferant:  OnPostError                                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_LieferantPostError(DataSet: TDataSet; E: EDatabaseError; var Action: TDataAction);
var
   s : string;

begin

inherited;
if AQY_LieferantKUNU.AsInteger < FirstKreditor then
   s := rs_LV_LieferantennummerKleinerFirstKreditor
else
   s := rs_LV_LfdNummerExists;

if IsMSSQLPrimaryKeyViolation (E.Message, AQY_Lieferant.Connection) then
   begin
        if (MessageDlg(s, mtConfirmation,[mbOK,mbAbort],0)) = mrOK then
           begin
                Action := daAbort;
                Exit;
           end; //** if (MessageDlg ..
   end; //** if IsMSSQLPrimaryKeyViolation (E.Message, AQY_Lieferant.Connection)

if IsMSSQLRecordHasChanged(E.Message, TADOQuery(DataSet).Connection) then
   begin
        ShowMessage(GetStdRes(frs_STDErrMsgRecChanged));
        BTN_NavRefreshClick(BTN_NavRefresh);
        Action := daAbort;
        Exit;
   end; //** if IsMSSQLRecordHasChanged(E.Message, TADOQuery(DataSet).Connection)

Application.MessageBox(PChar(rs_LV_FehlerMeldung+' '+E.Message), PChar(rs_LV_DatenbankFehler),mb_Iconstop or mb_ApplModal);
AQY_Lieferant.Cancel;
Action := daAbort;

end; //** procedure AQY_LieferantPostError


(******************************************************************************)
(***   AQY_Lieferant: OnBeforeDelete                                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_LieferantBeforeDelete(DataSet: TDataSet);
begin

inherited;
PostStammAenderung(false);

end; //** procedure AQY_LieferantBeforeDelete


(******************************************************************************)
(***   AQY_Lieferant: OnBeforeEdit                                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_LieferantBeforeEdit(DataSet: TDataSet);
begin

inherited;
OldLfdNummer := AQY_LieferantNUMMER.AsInteger;

end; //** procedure AQY_LieferantBeforeEdit


(******************************************************************************)
(***   AQY_Lieferant: OnBeforePost                                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_LieferantBeforePost(DataSet: TDataSet);
var
   r : Currency;
   pl,
   p,
   w : integer;
   //**Änderung lfd.LiefNummer
   i          : integer;
   ArtTable   : string;
   mFieldList : TStringList;
   ChangeEditFlag : boolean;
   GesamtZuschlag : currency;
begin

inherited;

GesamtZuschlag := 0.0;

AQY_LieferantARTNR.AsString := TrimRight(AQY_ArtikelStammARTNR.AsString);
if AQY_LieferantPE.AsInteger = 0 then
   AQY_LieferantPE.AsInteger := 1;
if AQY_Lieferant.State = dsInsert then
   if AQY_LieferantKUNU.AsInteger < FirstKreditor then
      AQY_Lieferant.Cancel;

//** Start: Das ist hier nur Schadensbegrenzung! Start
//** DTS_Lieferant dürfte nicht aktiv sein!

if AQY_Lieferant.State = dsInsert then
   if AQY_LieferantBESTELL_NR.IsNull then
      AQY_LieferantBESTELL_NR.AsString := '';

if AQY_Lieferant.State = dsInsert then
   if AQY_LieferantLE_PREIS_UPDATE.IsNull then
      AQY_LieferantLE_PREIS_UPDATE.AsString := '01.01.1950';

if AQY_Lieferant.State = dsInsert then
   if AQY_LieferantBEM.IsNull then
      AQY_LieferantBEM.AsString := '';

//** Ende: Schadensbegrenzung! Ende

if CBX_LiefGesperrt.State = cbGrayed then
   AQY_LieferantGESPERRT.AsInteger := 2;

//** Preisänderung EK1- bis 5, nur wenn User nicht das Datum selbst geändert hat, aut. ändern
if AQY_Lieferant.State = dsEdit then
   if OldLePreisUpdate = AQY_LieferantLE_PREIS_UPDATE.AsDateTime then
      if ((OldEK1 <> AQY_LieferantEK_1.AsCurrency) or
          (OldEK2 <> AQY_LieferantEK_2.AsCurrency) or
          (OldEK3 <> AQY_LieferantEK_3.AsCurrency) or
          (OldEK4 <> AQY_LieferantEK_4.AsCurrency) or
          (OldEK5 <> AQY_LieferantEK_5.AsCurrency) or
          (OldEK6 <> AQY_LieferantEK_6.AsCurrency) or
          (OldEK7 <> AQY_LieferantEK_7.AsCurrency) or
          (OldEK8 <> AQY_LieferantEK_8.AsCurrency) or
          (OldEK9 <> AQY_LieferantEK_9.AsCurrency) or
          (OldEK10 <> AQY_LieferantEK_10.AsCurrency) or
          (OldRabatt <> AQY_LieferantRABATT.AsCurrency)) then
         AQY_LieferantLE_PREIS_UPDATE.AsDateTime := now;

if (AQY_ArtikelStamm.State in [dsInsert, dsEdit, dsBrowse]) then
   if (AQY_Lieferant.State in [dsInsert, dsEdit]) then
      if ((AQY_LieferantNUMMER.AsInteger = 1) and
          (AQY_ArtikelStammEK.AsCurrency = 0.0) and
          (AQY_ArtikelStammDURCH_EK.AsCurrency = 0.0)) then
          begin
               p := AQY_ArtikelStammPE_VK.AsInteger;
               pl := AQY_LieferantPE.AsInteger;
               if p < 1 then
                  p := 1;
               if pl < 1 then
                  pl := 1;

               r := AQY_LieferantEK_1.AsCurrency - (AQY_LieferantEK_1.AsCurrency * AQY_LieferantRABATT.AsCurrency / 100);

               //** 12.1 Lieferantenzuschlaege
               if ((AQY_LieferantZUSCHLAGSART1.AsInteger > 0) or (AQY_LieferantZUSCHLAGSART2.AsInteger > 0) or
                   (AQY_LieferantZUSCHLAGSART3.AsInteger > 0)) then
                  begin
                       if AQY_LieferantZUSCHLAGSART1.AsInteger > 0 then
                          GesamtZuschlag := GesamtZuschlag + AQY_LieferantZUSCHLAG1.AsCurrency;
                       if AQY_LieferantZUSCHLAGSART2.AsInteger > 0 then
                          GesamtZuschlag := GesamtZuschlag + AQY_LieferantZUSCHLAG2.AsCurrency;
                       if AQY_LieferantZUSCHLAGSART3.AsInteger > 0 then
                          GesamtZuschlag := GesamtZuschlag + AQY_LieferantZUSCHLAG3.AsCurrency;

                       if GesamtZuschlag > 0 then
                          GesamtZuschlag := Gesamtzuschlag * -1;

                       if AQY_LieferantRABATTIERT.AsString = 'J' then
                          begin
                               r := r - (r * GesamtZuschlag / 100);
                               Runde(r);
                          end //** if AQY_LieferantRABATTIERT.AsString = 'J' then
                       else
                          begin
                               r := r - (AQY_LieferantEK_1.AsCurrency * GesamtZuschlag / 100);
                               Runde(r);
                          end; //** Rabattiert = 'N'

                  end; //** if Zuschlag vorhanden

               w := AQY_LieferantWS.AsInteger;
               if (w in [1..99]) then
                  r := r * (GetLinkagePointer^.WS_Tabelle[w].KURS);
               Runde(r);
               r := (r / pl * p);
               Runde(r);
               if ((OldEK1 <> AQY_LieferantEK_1.AsCurrency) or
                   (OldRABATT <> AQY_LieferantRABATT.AsCurrency)) then
                  if r > 0 then
                     if (MessageDlg(rs_LV_QSollenEKUndDurchEKMitversorgtWerden,
                        mtConfirmation,[mbYes,mbNo],0)) = mrYes then
                        begin
                             ChangeEditFlag := false;
                             if AQY_ArtikelStamm.State = dsBrowse then
                                begin
                                     AQY_ArtikelStamm.Edit;
                                     ChangeEditFlag := true;
                                end;
                             AQY_ArtikelStammEK.AsCurrency := r;
                             AQY_ArtikelStammDURCH_EK.AsCurrency  := r;
                             if ChangeEditFlag then
                                AQY_ArtikelStamm.Post;
                        end; //** if (MessageDlg(
          end; //** if ((AQY_LieferantNUMMER.AsInteger = 1) and

if not GetLinkagePointer^.HasUnicodeModule then
   begin
        AQY_LieferantARTNR.AsString := AnsiString(AQY_LieferantARTNR.AsString);
        AQY_LieferantBEM.AsString := AnsiString(AQY_LieferantBEM.AsString);
        AQY_LieferantBESTELL_NR.AsString := AnsiString(AQY_LieferantBESTELL_NR.AsString);
        AQY_LieferantFRACHT_BP.AsString := AnsiString(AQY_LieferantFRACHT_BP.AsString);
        AQY_LieferantSTAFFEL_BP.AsString := AnsiString(AQY_LieferantSTAFFEL_BP.AsString);
        AQY_LieferantZOLL_BP.AsString := AnsiString(AQY_LieferantZOLL_BP.AsString);
   end; //** if not GetLinkagePointer^.HasUnicodeModule then

if AQY_LieferantZUSCHLAG1.AsCurrency < 0 then
   AQY_LieferantZUSCHLAG1.AsCurrency := AQY_LieferantZUSCHLAG1.AsCurrency * -1;

if AQY_LieferantZUSCHLAG2.AsCurrency < 0 then
   AQY_LieferantZUSCHLAG2.AsCurrency := AQY_LieferantZUSCHLAG2.AsCurrency * -1;

if AQY_LieferantZUSCHLAG3.AsCurrency < 0 then
   AQY_LieferantZUSCHLAG3.AsCurrency := AQY_LieferantZUSCHLAG3.AsCurrency * -1;

if ((GetLinkagePointer^.Module[imArtikelarchiv]) and
    (AQY_Lieferant.State = dsEdit) and
    (OldLfdNummer <> (AQY_LieferantNUMMER.AsInteger))) then
     with AQY_Divers do
          try
             if Active then
                Close;
             NewLfdNummer := AQY_LieferantNUMMER.AsInteger;
             ChangeLfdLiefNummer := true;
             Connection := GetDOBOSADB;
             try
                mFieldList := TStringList.Create;
                ArtTable := Format('M%2.2d',[GetLinkagePointer^.MRecord.Mandant])+'.dbo.ARTIKEL_LIEFERANT';
                for i := 0 to AQY_Lieferant.FieldCount -1 do
                    begin
                         if AQY_Lieferant.Fields[i].FieldKind = fkCalculated then
                            Continue;
                         if AQY_Lieferant.Fields[i].FieldName = 'LIEF_NAME' then
                            Continue;
                         if ((AQY_Lieferant.Fields[i].FieldName <> 'ARTNR') and
                             (AQY_Lieferant.Fields[i].FieldName <> 'NUMMER') and
                             (AQY_Lieferant.Fields[i].FieldName <> 'LIEF_NAME')) then
                         mFieldList.Add(AQY_Lieferant.Fields[i].FieldName);
                    end; //** for i := 0 to AQY_Lieferant.FieldCount -1 do

                ArchiviereOldRecordsByList(AQY_Divers,
                                        GetDOBOSADB,
                                        mFieldList,
                                       'A_ARCHIV_ARTIKEL_LIEFERANT',
                                        ArtTable,
                                        'ARTNR, NUMMER',
                                        ''''+SQLTextString(AQY_Lieferant.FieldByName('ARTNR').AsString)+''', '
                                        +IntToStr(OldLfdNummer),
                                        'ARTNR = '''+SQLTextString(AQY_Lieferant.FieldByName('ARTNR').AsString)+''' '
                                        +' AND NUMMER = '+IntToStr(OldLfdNummer)+' ');
             finally
                FreeAndNil(mFieldList);
             end //** if GetLinkagePointer^.Module[imArtikelarchiv] then

          except
             on E:Exception do
                ShowMessage(E.Message);
          end
else
   if GetLinkagePointer^.Module[imArtikelarchiv] then
      if AQY_Lieferant.State = dsEdit then
         begin
              if (not (ArchiviereOldRecord(AQY_Lieferant,
                                           AQY_Divers,
                                           GetDOBOSADB,
                                           'A_ARCHIV_ARTIKEL_LIEFERANT',
                                           Format('M%2.2d',[GetLinkagePointer^.MRecord.Mandant])+'.dbo.ARTIKEL_LIEFERANT',
                                           'ARTNR, NUMMER',
                                           ''''+SQLTextString(AQY_LieferantARTNR.AsString)+''', '
                                              +IntToStr(AQY_LieferantNUMMER.AsInteger),
                                           'ARTNR = '''+SQLTextString(AQY_LieferantARTNR.AsString)+''' '
                                           +'AND NUMMER = '+IntToStr(AQY_LieferantNUMMER.AsInteger)+' '
                                           ))) then
                 ShowMessage(rs_LV_ArchivFailed);
         end; //** if AQY_Lieferant.State = dsEdit then

end; //** procedure AQY_LieferantBeforePost


(******************************************************************************)
(***   AQY_Lieferant: OnAfterPost (UpdateDatum / User eintragen)            ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_LieferantAfterPost(DataSet: TDataSet);
begin

inherited;
PostStammAenderung(false);

end; //** procedure AQY_LieferantAfterPost


(******************************************************************************)
(***  EDT_LiefKuNu: OnKeyDown                                               ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_LiefKuNuKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin

inherited;
case Key of
     VK_F2    : begin
                     if (AQY_ArtikelStamm.State in [dsEdit, dsInsert]) then
                        if SBT_LiefEdit.Enabled then
                           SBT_LiefEditClick(SBT_LiefEdit);
                end;

//     VK_F12   : EDT_LiefKuNuLookupClick(Sender);

end; //** case Key of

end; //** procedure EDT_LiefKuNuKeyDown


(******************************************************************************)
(***   ReadLieferantName                                                    ***)
(******************************************************************************)

procedure TFRM_DobosLV.ReadLieferantName;
var
   AValues : array [0..0] of Variant;

begin

inherited;
if ((not Assigned (AQY_Lieferant)) or
    (AQY_Lieferant.Active = false)) then
    Exit;
if AQY_LieferantKUNU.AsInteger = 0  then
   PAN_LiefName.Caption := rs_LV_undefiniert
else
  if AQY_LieferantKUNU.AsInteger < FirstKreditor then
     PAN_LiefName.Caption := rs_LV_FehlerKeinLieferant
  else
     if ReadAnyFields (GetAdressenADB,
                       'ADRESSEN',
                       'WHERE KUNU = '+IntToStr(AQY_LieferantKUNU.AsInteger),
                       ['KB'],
                        AValues) then
        PAN_LiefName.Caption := AValues[0]
     else
        PAN_LiefName.Caption := GetStdRes(frs_STD_StammsatzFehlt);

end; //** procedure ReadLieferantName


(******************************************************************************)
(***  SBT_LiefEdit: OnClick (Ändern Versandanschrift)                       ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_LiefEditClick(Sender: TObject);
begin

inherited;
with AQY_Lieferant do
     try
        Edit;
        //** Änderung 6)
        //** wird durch statechange eh ausgeführt
        //UpdateLiefButtons;
        //** Änderung 6)
     except
        raise;
     end //** try..except

end; //** procedure SBT_LiefEditClick


(******************************************************************************)
(***  SBT_LiefCancel: OnClick (Verwefen Änderungen Lieferant)               ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_LiefCancelClick(Sender: TObject);
begin

inherited;

with AQY_Lieferant do
     if (MessageDlg(rs_LV_QDiscardChangesLieferanten, mtConfirmation,[mbYes, mbNo],0)) = mrYes then
        try
         Cancel;
         UpdateLiefButtons;
      except
         raise;
      end //** try..except

end; //** procedure SBT_LiefCancelClick


(******************************************************************************)
(***  SBT_LiefSave: OnClick (Speichern Lieferantendaten)                    ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_LiefSaveClick(Sender: TObject);
var
   ArtNr : string;
   l     : integer;
   //**Änderung lfd.LiefNummer
   i          : integer;
   ArtTable   : string;
   mFieldList : TStringList;

begin

inherited;

//** OldLfdNummer := 0;
NewLfdNummer := 0;
ChangeLfdLiefNummer := false;

with AQY_Lieferant do
     try
        ArtNr := FieldByName('ARTNR').AsString;
        l := FieldByName('NUMMER').AsInteger;
        //** OldLfdNummer := l;
        if AQY_LieferantKUNU.AsInteger < FirstKreditor then
           begin
                if (MessageDlg(rs_LV_QChangeLieferantAgain, mtConfirmation,[mbYes,mbNo],0)) = mrYes then
                   Exit;
                Cancel;
           end
        else
           Post;

        if not ChangeLfdLiefNummer then
           begin
                Close;
                Open; //** Einfaches ReOpen, kein UCChange machen!
                Locate('ARTNR; NUMMER', VarArrayOf([ArtNr, l]),[]);
           end
        else
          if ((GetLinkagePointer^.Module[imArtikelarchiv]) and
              (OldLfdNummer <> NewLfdNummer)) then
            begin
                Close;
                Open; //** Einfaches ReOpen, kein UCChange machen!
                Locate('ARTNR; NUMMER', VarArrayOf([ArtNr, NewLfdNummer]),[]);
                if ((GetLinkagePointer^.Module[imArtikelarchiv]) and
                    (OldLfdNummer <> NewLfdNummer)) then
                     with AQY_Divers do
                          try
                             if Active then
                                Close;
                             Close;
                             Connection := GetDOBOSADB;
                             try
                                mFieldList := TStringList.Create;
                                ArtTable := Format('M%2.2d',[GetLinkagePointer^.MRecord.Mandant])+'.dbo.ARTIKEL_LIEFERANT';
                                for i := 0 to AQY_Lieferant.FieldCount -1 do
                                    begin
                                         if AQY_Lieferant.Fields[i].FieldKind = fkCalculated then
                                            Continue;
                                         if ((AQY_Lieferant.Fields[i].FieldName <> 'ARTNR') and
                                             (AQY_Lieferant.Fields[i].FieldName <> 'NUMMER') and
                                             (AQY_Lieferant.Fields[i].FieldName <> 'LIEF_NAME')) then
                                         mFieldList.Add(AQY_Lieferant.Fields[i].FieldName);
                                    end; //** for i := 0 to AQY_Lieferant.FieldCount -1 do

                                ArchiviereOldRecordsByList(AQY_Divers,
                                                        GetDOBOSADB,
                                                        mFieldList,
                                                        'A_ARCHIV_ARTIKEL_LIEFERANT',
                                                         ArtTable,
                                                         'ARTNR, NUMMER',
                                                         ''''+SQLTextString(AQY_Lieferant.FieldByName('ARTNR').AsString)+''', '
                                                         +IntToStr(NewLfdNummer),
                                                         'ARTNR = '''+SQLTextString(AQY_Lieferant.FieldByName('ARTNR').AsString)+''' '
                                                         +' AND NUMMER = '+ IntToStr(NewLfdNummer)+' ');

                              finally
                                 FreeAndNil(mFieldList);
                              end; //** if GetLinkagePointer^.Module[imArtikelarchiv] then

                        except
                           on E:Exception do
                              ShowMessage(E.Message);
                        end; //** try..except
           end;

        UpdateLiefButtons;

     except
        raise;
     end; //** try..except

OldLfdNummer := 0;
NewLfdNummer := 0;
ChangeLfdLiefNummer := false;

end; //** procedure SBT_LiefSaveClick


(******************************************************************************)
(***  SBT_LiefDelete: OnClick  (Lieferant löschen)                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_LiefDeleteClick(Sender: TObject);
begin

inherited;
with AQY_Lieferant do
     try
        if (MessageDlg(Format(rs_LV_QDeleteLieferant,[EDT_LiefKuNu.AsInteger]),
           mtConfirmation,[mbYes,mbNo],0)) = mrYes then
           Delete;
     except
        raise;
     end; //** try..except
//** Änderung 14) Warum muss er denn alles lesen? .. springt auch so zum vorherigen
//ReadAllData;
UpdateLieferantenCount;
UpdateLiefButtons;

end; //** procedure SBT_LiefDeleteClick


(******************************************************************************)
(***  SBT_LiefInsert: OnClick (Erfassen Lieferant)                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_LiefInsertClick(Sender: TObject);
var
   i : integer;

begin

inherited;
if Erfassen then
   NeuEingabeAktiv := true;

with AQY_Lieferant do
     try
        i := 1;
        //** Änderung 13) DisableControls weil der AfterScroll trotzdem ausgelöst wurde
        DisableControls;
        //DTS_Lieferant.Enabled := false;
        First;
        while not EOF do
              begin
                   if TrimRight(FieldByName('ARTNR').AsString) <> TrimRight(AQY_ArtikelStammARTNR.AsString) then
                      Break;
                   if i < FieldByName('NUMMER').AsInteger then
                      Break;
                   Inc(i);
                   Next;
              end; //** while not EOF do

        //DTS_Lieferant.Enabled := true;
        Insert;
        AQY_LieferantARTNR.AsString := TrimRight(AQY_ArtikelStammARTNR.AsString);
        AQY_LieferantNUMMER.AsInteger := i;
        if (ErfassenMaske) and (AktuellLieferant >= FirstKreditor) then //** 08.11.2022 PI
           AQY_LieferantKUNU.AsInteger := AktuellLieferant
        else
           AQY_LieferantKUNU.AsInteger := 0;
        AQY_LieferantBESTELL_NR.AsString := '';
        AQY_LieferantWS.AsInteger := 0;
        AQY_LieferantRABATT.AsCurrency := 0.0;
        AQY_LieferantWBZ.AsInteger := 0;
        AQY_LieferantPE.AsInteger := 1;
        AQY_LieferantRASTER.AsInteger := 0;
        AQY_LieferantSTAFFEL_BP.AsString := 'B';
        AQY_LieferantZOLL_BP.AsString := 'B';
        AQY_LieferantFRACHT_BP.AsString := 'B';
        AQY_LieferantEK_1.AsCurrency := 0.0;
        AQY_LieferantEK_2.AsCurrency := 0.0;
        AQY_LieferantEK_3.AsCurrency := 0.0;
        AQY_LieferantEK_4.AsCurrency := 0.0;
        AQY_LieferantEK_5.AsCurrency := 0.0;
        AQY_LieferantEK_6.AsCurrency := 0.0;
        AQY_LieferantEK_7.AsCurrency := 0.0;
        AQY_LieferantEK_8.AsCurrency := 0.0;
        AQY_LieferantEK_9.AsCurrency := 0.0;
        AQY_LieferantEK_10.AsCurrency := 0.0;
        AQY_LieferantZOLL.AsCurrency := 0.0;
        AQY_LieferantFRACHT.AsCurrency := 0.0;
        AQY_LieferantLE_PREIS_UPDATE.AsDateTime := now;
        AQY_LieferantMIAB.AsCurrency := 0.0;
        AQY_LieferantBEM.AsString := '';
        AQY_LieferantGESPERRT.AsInteger := 0;
        AQY_LieferantHYPERLINK.AsInteger := 0;
        AQY_LieferantZUSCHLAGSART1.AsInteger := 0;
        AQY_LieferantZUSCHLAG1.AsCurrency := 0.0;
        AQY_LieferantZUSCHLAGSART2.AsInteger := 0;
        AQY_LieferantZUSCHLAG2.AsCurrency := 0.0;
        AQY_LieferantZUSCHLAGSART3.AsInteger := 0;
        AQY_LieferantZUSCHLAG3.AsCurrency := 0.0;
        AQY_LieferantRABATTIERT.AsString := 'N';

     finally
        EnableControls;
     end;
     //** Änderung 13)
     //except
        //DTS_Lieferant.Enabled := true;
     //   raise;
     //end; //** try..except

UpdateLiefButtons;

end; //** procedure SBT_LiefInsertClick


(******************************************************************************)
(***  EDT_LiefZOLL_BP: OnValidate                                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_LiefZOLL_BPValidate(var Text: String; var Continue: Boolean);
begin

inherited;
if not (AQY_Lieferant.State in [dsEdit, dsInsert]) then
   Exit;

if (Text <> 'B') then
   Text := 'P';
Continue := true;

end; //** procedure EDT_LiefZOLL_BPValidate


(******************************************************************************)
(***      EDT_LiefStaffelBP: OnValidate                                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_LiefStaffelBPValidate(var Text: string; var Continue: Boolean);
begin

inherited;

if not (AQY_Lieferant.State in [dsEdit, dsInsert]) then
   Exit;

if ((Text <> 'B') and (Text <> 'F') and (Text <> 'S')) then
   Text := 'P';
Continue := true;

end; //** procedure EDT_LiefStaffelBPValidate


(******************************************************************************)
(***  EDT_LiefPE: OnValidate                                                ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_LiefPEValidate(var Text: String; var Continue: Boolean);
var
   i : integer;

begin

inherited;

if not (AQY_Lieferant.State in [dsEdit, dsInsert]) then
   Exit;

try
   i := StrToInt(Text);
   if i < 1 then
      Text := '1';
except
   Text := '1';
end; //** try..except

Continue := true;

end; //** procedure EDT_LiefPEValidate


(******************************************************************************)
(***  EDT_LiefKuNu: OnExit                                                  ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_LiefKuNuExit(Sender: TObject);
begin

inherited;
ReadLieferantName;

end; //** procedure EDT_LiefKuNuExit


(******************************************************************************)
(***   EDT_LiefKuNu: OnLookUpClick                                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_LiefKuNuLookupClick(Sender: TObject);
var
   FSuchKLParams : TSuchKLParams;
   k : integer;

begin

inherited;

//** Parameter: Start-Nummer, KLFlag, SuchText, Order by (0=KB, 1=Nr), SuchFeld(0=KB, 1=Bez), AlignControl
with FSuchKLParams do
     begin
          k := EDT_LiefKuNu.AsInteger;
          if k < FirstKreditor then
             k := FirstKreditor;

          AKuNu := k;
          AKlFlag := 2;
          ASuchText := '';
          if EDT_LiefKuNu.AsInteger >= FirstKreditor then
             begin
                  AOrderBy  := 1;
                  AKlFlag := 0;
             end
          else
             AOrderBy  := 0;
          ASuchFeld := 0;
          AComponent:= EDT_LiefKuNu;
     end; //** with FSuchKLParams do

if Call (dnCommon, 'suchenkl', @FSuchKLParams) = 1 then
   if (AQY_Lieferant.State in [dsEdit, dsInsert]) then
      begin
           AQY_LieferantKUNU.AsInteger := FSuchKLParams.AKuNu;
           EDT_LiefKuNu.AsInteger := FSuchKLParams.AKuNu;
      end
   else
      EDT_LiefKuNu.AsInteger := 0;

ReadLieferantName;

end; //** procedure EDT_LiefKuNuLookupClick


(******************************************************************************)
(***   RCC_Artikel: OnGetFieldData                                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_LiefNummerEnter(Sender: TObject);
var
   l : integer;

begin

inherited;
OldLfdNummer := 0;
NewLfdNummer := 0;
if (AQY_Lieferant.State in [dsEdit]) then
    begin
         l := AQY_Lieferant.FieldByName('NUMMER').AsInteger;
         OldLfdNummer := l;
    end; //** if (AQY_Lieferant.State in [dsEdit]) then

end; //** procedure EDT_LiefNummerEnter


(******************************************************************************)
(***   RCC_Artikel: OnGetFieldData                                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.RCC_ArtikelGetFieldData(Sender: TObject; Field: TBufferedField);
var
   s : string;

begin

inherited;
if Field.FieldName = 'ARTNR' then
   Field.AsString := '';

s := Field.FieldName;

//** 10.2
if (s = 'EAN_NUMMER') then
   Field.AsCurrency := 0;

if (s = 'EK') then
   if (not (CopyEK)) then
      Field.AsFloat := 0;

if (s = 'DURCH_EK') then
   if (not (CopyEK)) then
      Field.AsFloat := 0;

if (s = 'ARBEITSPREIS') then
   if (not (CopyEK)) then
      Field.AsFloat := 0;

if (s = 'STATUS') then
   Field.AsInteger := 0;

if (s = 'SL_JN') then
   if (not(CopySL)) then
      Field.AsString := 'N';

if (s = 'MS_JN') then
   if (not(CopyMiniset)) then
      Field.AsString := 'N';

if (s = 'EM_JN') then
   if not CopyEM then
      Field.AsString := 'N';

if (s = 'EM1_NUMMER') then
   if not CopyEM then
      Field.AsInteger := 0;

if (s = 'EM1_METHODE') then
   if not CopyEM then
      Field.AsString := '';

if (s = 'EM1_ANTEIL') then
   if not CopyEM then
      Field.AsFloat := 0;

if (s = 'EM2_NUMMER') then
   if not CopyEM then
      Field.AsInteger := 0;

if (s = 'EM2_METHODE') then
   if not CopyEM then
      Field.AsString := '';

if (s = 'EM2_ANTEIL') then
   if not CopyEM then
      Field.AsFloat := 0;

if (s = 'EM3_NUMMER') then
   if not CopyEM then
      Field.AsInteger := 0;

if (s = 'EM3_METHODE') then
   if not CopyEM then
      Field.AsString := '';

if (s = 'EM3_ANTEIL') then
   if not CopyEM then
      Field.AsFloat := 0;

if (s = 'MASSE_SIND_MM') then
   if not CopyMA then
      Field.AsString := 'N';

if (s = 'MASSE_FUER_FA') then
   if not CopyMA then
      Field.AsString := 'N';

if (s = 'DURCHMESSER') then
   if not CopyMA then
      Field.AsFloat := 0;

if (s = 'LAENGE') then
   if not CopyMA then
      Field.AsFloat := 0;

if (s = 'BREITE') then
   if not CopyMA then
      Field.AsFloat := 0;

if (s = 'HOEHE') then
   if not CopyMA then
      Field.AsFloat := 0;

if (s = 'SPEZ_GEWICHT') then
   if not CopyMA then
      Field.AsFloat := 0;

//** 31.01.2024 an Maße hängen *DB
if (s = 'GEWICHT') then
   if not CopyMA then
      Field.AsFloat := 0;

if (s = 'B_BASIS') then
   if not CopyMA then
      Field.AsInteger := 0;

if (s = 'P_BASIS') then
   if not CopyMA then
      Field.AsInteger := 0;

if (s = 'WARENNUMMER') then
   if not CopyIS then
      Field.AsInteger := 0;

if (s = 'URSPRUNG_LAND') then
   if not CopyIS then
      Field.AsInteger := 0;

if (s = 'URSPRUNG_REGION') then
   if not CopyIS then
      Field.AsInteger := 0;

if (s = 'MASSEINHEIT') then
   if not CopyIS then
      Field.AsFloat := 0;

//** 11.07.24 Diese Felder wurden trotzdem kopiert. Haengt jetzt mit an Intrastat
if (s = 'ECCN_NUMMER') then
   if not CopyIS then
      Field.AsString := '';

if (s = 'AL_NUMMER') then
   if not CopyIS then
      Field.AsString := '';

if (s = 'ZOLLTARIF_NUMMER') then
   if not CopyIS then
      Field.AsString := '';

if (s = 'PRAEFERENZ') then
   if not CopyIS then
      Field.AsString := '';

if (s = 'PRAEFERENZ_ARTIKEL') then
   if not CopyIS then
      Field.AsString := 'N';

if (s = 'PRAEFERENZ_ANTEIL') then
   if not CopyIS then
      Field.AsFloat := 0;

if (s = 'PRAEFERENZ_UE_DATUM') then
   if not CopyIS then
      Field.AsDateTime := shbStrToDate('01.01.1950');

if (s = 'AMM_PRINT') then
   if not CopyME then
      Field.AsString := 'N';

if (s = 'AMM_ART_KEY1') then
   if not CopyME then
      Field.AsInteger := 0;

if (s = 'AMM_ART_KEY2') then
   if not CopyME then
      Field.AsInteger := 0;

if (s = 'AMM_ART_KEY3') then
   if not CopyME then
      Field.AsInteger := 0;

if (s = 'AMM_ART_KEY4') then
   begin
        if not CopyME then
           Field.AsInteger := 0;
        if (GetLinkagePointer^.Serial = KSerial_Oilquick) and (AQY_ArtikelStammAMM_ART_KEY4.AsInteger = 1) then
           Field.AsInteger := 0;
   end;

if (s = 'AMM_ART_KEY5') then
   if not CopyME then
      Field.AsInteger := 0;

if (s = 'AMM_INHALT_KEY1') then
   if not CopyME then
      Field.AsInteger := 0;

if (s = 'AMM_INHALT_KEY2') then
   if not CopyME then
      Field.AsInteger := 0;
if (s = 'AMM_INHALT_KEY3') then
   if not CopyME then
      Field.AsInteger := 0;

if (s = 'AMM_INHALT_FREI4') then
   begin
        if not CopyME then
           Field.AsString := '';
        if (GetLinkagePointer^.Serial = KSerial_Oilquick) and (AQY_ArtikelStammAMM_ART_KEY4.AsInteger = 1) then
           Field.AsString := '';
   end;

if (s = 'AMM_INHALT_FREI5') then
   if not CopyME then
      Field.AsString := '';

if (s = 'HYPERLINK') then
   Field.AsInteger := 0;

end; //** procedure RCC_ArtikelGetFieldData


(******************************************************************************)
(***   RCC_Preise: OnGetFieldData                                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.RCC_PreiseGetFieldData(Sender: TObject; Field: TBufferedField);
begin

inherited;
if Field.FieldName = 'ARTNR' then
   Field.AsString := '';

end; //** procedure RCC_PreiseGetFieldData


(******************************************************************************)
(***   RCC_Lieferant: OnGetFieldData                                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.RCC_LieferantGetFieldData(Sender: TObject; Field: TBufferedField);
begin

inherited;
if Field.FieldName = 'ARTNR' then
   Field.AsString := '';

end; //** procedure RCC_LieferantGetFieldData


(******************************************************************************)
(***  EDT_EM1: OnValidate (auch EDT_EM2 und EDT_EM3)                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_EM1_MethodeValidate(var Text: String; var Continue: Boolean);
begin

inherited;

if ((not(DauerAendern)) and (not(Aendern))) then
   Exit;
if ((Text <> 'P') and (Text <> 'G') and (Text <> 'F')) then
   Text := ' ';
Continue := true;

end; //** procedure EDT_EM1Validate


(******************************************************************************)
(***  EDT_EMJN: OnValidate                                                  ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_EMJNValidate(var Text: String; var Continue: Boolean);
begin

inherited;

if not (AQY_ArtikelStamm.State in [dsEdit, dsInsert]) then
   Exit;

if Text <> 'J' then
   Text := 'N';
Continue := true;

end; //** procedure EDT_EMJNValidate


(******************************************************************************)
(***      EDT_KalkKZ: OnValidate auch KALK_KZ_VK                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_KalkKZValidate(var Text: String; var Continue: Boolean);
var
   c : Char;

begin

inherited;
if not (AQY_ArtikelStamm.State in [dsEdit, dsInsert]) then
   Exit;
c := Get1StChar(Text);
if (not(c in ['L', 'H', '0'..'9', 'P', 'O', 'G'])) then
   Text := 'D';
Continue := true;

end; //** procedure EDT_KalkKZValidate


(******************************************************************************)
(***      EDT_KALKKZ_VK: OnValidate                                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_KALKKZ_VKValidate(var Text: string; var Continue: Boolean);
var
   c : Char;

begin

inherited;
if not (AQY_ArtikelStamm.State in [dsEdit, dsInsert]) then
   Exit;
c := Get1StChar(Text);
if (not(c in ['0'..'9', 'E', 'V', 'X'])) then
   Text := 'S';
{
if (c in ['E']) and (not (EDT_KalkKZ.Text[1] in ['0'..'9', 'O', 'P', 'G'])) then
   Text := 'S';
}
Continue := true;
//** IB: Problem: geht man mit der Maus gleich auf das grüne Häkchen (speichern),
//** - das ist scheinbar immer so - dann wird der Bildschirm nicht upgedatet

end; //** procedure EDT_KALKKZ_VKValidate


(******************************************************************************)
(***   M I N I S E T                                                        ***)
(******************************************************************************)
(******************************************************************************)
(***  DataSource MiniSet: OnStateChange (Buttons Miniset updaten)           ***)
(******************************************************************************)

procedure TFRM_DobosLV.DTS_MiniSetStateChange(Sender: TObject);
begin

inherited;

UpdateMiniSetButtons;

if DTS_MiniSet.State in [dsInsert,dsEdit] then
   GRD_MinisetView.OptionsData.Editing := true
else
  GRD_MinisetView.OptionsData.Editing := false;


end; //** procedure DTS_MiniSetStateChange


(******************************************************************************)
(***  AQY_MiniSet: OnAfterScroll                                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_MiniSetAfterScroll(DataSet: TDataSet);
begin

inherited;
//** Änderung 8)
if DataSet.ControlsDisabled then
   Exit;
//** Änderung 8)

UpdateMiniSetButtons;

end; //** procedure AQY_MiniSetAfterScroll


(******************************************************************************)
(***  AQY_MiniSet: OnBeforeDelete                                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_MiniSetBeforeDelete(DataSet: TDataSet);
begin

inherited;
PostStammAenderung(true);

end; //** procedure AQY_MiniSetBeforeDelete


(******************************************************************************)
(***  AQY_MiniSet: OnBeforePost                                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_MiniSetBeforePost(DataSet: TDataSet);
begin

inherited;
with AQY_MiniSet do
     try
        AQY_MiniSetARTNR.AsString := TrimRight(AQY_ArtikelStammARTNR.AsString);
        if AQY_MiniSetMENGE.AsCurrency = 0 then
           AQY_MiniSetMENGE.AsCurrency := 1;
        if TrimRight(AQY_MiniSetUNTER_ARTNR.AsString) = TrimRight(CurrArtNr) then
           begin
                ShowMessage(rs_LV_MiniSetInSichSelbst);
                try
                   if State = dsEdit then
                      begin
                           Cancel;
                           Delete;
                           ShowMessage(rs_LV_DieUngueltigePositionWurdeGeloescht);
                           Abort;
                      end
                   else
                      Cancel;
                except
                end;

           end; //** if AQY_MiniSetARTNR.AsString = CurrArtNr
     except
        on E:Exception do
           ShowMessage(E.Message);
     end; //** try..except

end; //** procedure AQY_MiniSetBeforePost


(******************************************************************************)
(***      AQY_MiniSet: OnAfterInsert                                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_MiniSetAfterInsert(DataSet: TDataSet);
begin

inherited;
AQY_MiniSetMENGE.AsCurrency := 1;
AQY_MiniSetBEZ_1.AsString := '';
AQY_MiniSetBEZ_2.AsString := '';
AQY_MiniSetUNTER_ARTNR.AsString := '';
AQY_MiniSetARTNR.AsString := CurrArtnr;

end; //** procedure AQY_MiniSetAfterInsert


(******************************************************************************)
(***   AQY_MiniSet: OnAfterPost (UpdateDatum / User eintragen)              ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_MiniSetAfterPost(DataSet: TDataSet);
var
   ArtNr,
   UArtNr: string;
   n     : integer;

begin

inherited;
if not RenumFlag then
   begin
        with AQY_MiniSet do
             try
                ArtNr := FieldByName('ARTNR').AsString;
                UArtNr := FieldByName('UNTER_ARTNR').AsString;
                n := FieldByName('NUMMER').AsInteger;
                PostStammAenderung(true);
                ReadAllData;
                Locate('ARTNR; NUMMER; UNTER_ARTNR', VarArrayOf([ArtNr, n, UArtNr]),[]);
                UpdateMiniSetButtons;
             except
                raise;
             end //** try..except
   end; //** if not RenumFlag

end; //** procedure AQY_MiniSetAfterPost


(******************************************************************************)
(***  AQY_MiniSet:  OnPostError                                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_MiniSetPostError(DataSet: TDataSet; E: EDatabaseError; var Action: TDataAction);

begin

inherited;
if IsMSSQLPrimaryKeyViolation (E.Message, AQY_MiniSet.Connection) then
   begin
        if (MessageDlg(rs_LV_UnterartikelUngueltig, mtConfirmation,[mbOK,mbAbort],0)) = mrOK then
           begin
                Action := daAbort;
                Exit;
           end; //** if (MessageDlg ..
   end; //** if IsMSSQLPrimaryKeyViolation (E.Message, AQY_MiniSet.Connection) then

if IsMSSQLRecordHasChanged(E.Message, TADOQuery(DataSet).Connection) then
   begin
        ShowMessage(GetStdRes(frs_STDErrMsgRecChanged));
        BTN_NavRefreshClick(BTN_NavRefresh);
        Action := daAbort;
        Exit;
   end; //** if IsMSSQLRecordHasChanged(E.Message, TADOQuery(DataSet).Connection)

Application.MessageBox(PChar(rs_LV_FehlerMeldung+' '+E.Message), PChar(rs_LV_DatenbankFehler),mb_Iconstop or mb_ApplModal);
AQY_MiniSet.Cancel;
Action := daAbort;

end; //** procedure AQY_MiniSetPostError


(******************************************************************************)
(***  SBT_MiniSetNumerieren: OnClick                                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_MiniSetNumerierenClick(Sender: TObject);
var
   rc,
   n,
   i : integer;
   dummy1,
   dummy2 : boolean;

begin

inherited;
with AQY_MiniSet do
     begin
          if (State in [dsEdit, dsInsert]) then
             Post;
          Close;
          Open; //** Einfaches ReOpen, kein UCChange machen!
          n := 10;
          rc := RecordCount;
          if rc < 2 then
             Exit;
          n := GetVarRDGDlg (rs_LV_SchrittweiteWaehlen, ['1, 2, 3', '5, 10, 15', '10, 20, 30', '100, 200, 300', '1000, 2000, 3000'], 2, false, dummy1, dummy2);

          if n < 0 then
             Exit;

          case n of
               0: n := 1;
               1: n := 5;
               2: n := 10;
               3: n := 100;
               4: n := 1000;
          end; //** case;

          Application.ProcessMessages;

          i := rc * n * -1;
          try
             DTS_MiniSet.Enabled := false;
             ReNumFlag := true;
             try
                GetDobosADB.BeginTrans;
                First;
                while not EOF do
                      begin
                           Edit;
                           AQY_MiniSetNUMMER.AsInteger := i;
                           i := i + n;
                           Post;
                           Next;
                      end; //** while not EOF do
                GetDobosADB.CommitTrans;
                Close;
                Open; //** Einfaches ReOpen, kein UCChange machen!
                GetDobosADB.BeginTrans;
                Last;
                i := rc * n;
                while not BOF do
                      begin
                           Edit;
                           AQY_MiniSetNUMMER.AsInteger := i;
                           i := i - n;
                           Post;
                           Prior;
                      end; //** while not EOF do

                GetDobosADB.CommitTrans;

             except
                on E:Exception do
                   begin
                        GetDobosADB.RollbackTrans;
                        ShowMessage(E.Message);
                   end; //** on E:Exception do

             end; //** try..except

          finally
             Close;
             ReNumFlag := false;
             DTS_MiniSet.Enabled := true;
             Open; //** Einfaches ReOpen, kein UCChange machen!
          end; //** try..finally
     end; //** with AQY_MiniSet do

end; //** procedure SBT_MiniSetNumerierenClick


(******************************************************************************)
(***  SBT_MiniSetEdit: OnClick (Ändern MiniSet)                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_MiniSetEditClick(Sender: TObject);
begin

inherited;
with AQY_MiniSet do
     try
        Edit;
        UpdateMiniSetButtons;
     except
        raise;
     end //** try..except

end; //** procedure SBT_MiniSetEditClick


(******************************************************************************)
(***  SBT_MiniSetInsert: OnClick (Erfassen MiniSet)                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_MiniSetInsertClick(Sender: TObject);
var
   AValues : array [0..0] of Variant;
   max     : integer;

begin

inherited;
if Erfassen then
   NeuEingabeAktiv := true;

with AQY_MiniSet do
     try
        Last;
        Insert;
        AQY_MiniSetARTNR.AsString := TrimRight(AQY_ArtikelStammARTNR.AsString);
        max := 0;
        if ReadAnyFields (GetDobosADB,
                          'ARTIKEL_MINISET',
                          'WHERE ARTNR = '''+SQLTextString(TrimRight(EDT_ArtNr.Text))+''' ',
                          ['max(NUMMER)'],
                          AValues) then
           try
              Max := AValues[0];
           except
           end; //** try..except

        inc(Max);
        AQY_MiniSetNUMMER.AsInteger := Max;

     except
        on E:Exception do
           ShowMessage(E.Message);
     end; //** try..except

UpdateMiniSetButtons;

Self.ActiveControl := GRD_Container_Miniset;
GRD_MinisetView.Controller.FocusedColumn := GRD_MinisetViewUNTER_ARTNR;
GRD_MinisetView.Controller.EditingController.ShowEdit(GRD_MinisetViewUNTER_ARTNR);

end; //** procedure SBT_MiniSetInsertClick


(******************************************************************************)
(***  SBT_MiniSetDelete: OnClick  (Löschen Unterartikel)                    ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_MiniSetDeleteClick(Sender: TObject);
begin

inherited;
with AQY_MiniSet do
     try
        if (MessageDlg(Format(rs_LV_QUnterartikelxLoeschen,[AQY_MiniSetUNTER_ARTNR.AsString]), mtConfirmation,[mbYes,mbNo],0)) = mrYes then
           Delete;
        PostStammAenderung(true);
        ReadAllData;
     except
        raise;
     end; //** try..except

UpdateMiniSetButtons;

end; //** procedure SBT_MiniSetDeleteClick


(******************************************************************************)
(***  SBT_MiniSetCancel: OnClick (Verwerfen Änderungen MiniSet)             ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_MiniSetCancelClick(Sender: TObject);
begin

inherited;

if (not (AQY_MiniSet.State in [dsInsert,dsEdit])) then
   Exit;

if (MessageDlg(rs_LV_QDiscardChangesMiniSet, mtConfirmation,[mbYes, mbNo],0)) = mrYes then
    with AQY_MiniSet do
         try
            Cancel;
            Close;
            Open; //** Einfaches ReOpen, kein UCChange machen!
            UpdateMiniSetButtons;
         except
            raise;
         end //** try..except

end; //** procedure SBT_MiniSetCancelClick


(******************************************************************************)
(***  SBT_MiniSetSave: OnClick (Speichern MiniSet)                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_MiniSetSaveClick(Sender: TObject);
var
   ArtNr,
   UArtNr: string;
   n     : integer;

begin

inherited;

if (not (AQY_MiniSet.State in [dsInsert,dsEdit])) then
   Exit;

with AQY_MiniSet do
     try
        ArtNr := FieldByName('ARTNR').AsString;
        UArtNr := FieldByName('UNTER_ARTNR').AsString;
        n := FieldByName('NUMMER').AsInteger;

        Post;
        try
           AQY_MiniSet.DisableControls;
           Close;
           Open; //** Einfaches ReOpen, kein UCChange machen!
           Locate('ARTNR; NUMMER; UNTER_ARTNR', VarArrayOf([ArtNr, n, UArtNr]),[]);
        finally
           AQY_MiniSet.EnableControls;
           UpdateMiniSetButtons;
        end; //** try.. finally
     except
        raise;
     end //** try..except

end; //** procedure SBT_MiniSetSaveClick


(******************************************************************************)
(***  UpdateMiniSetButtons                                                  ***)
(******************************************************************************)

procedure TFRM_DobosLV.UpdateMiniSetButtons;
begin

inherited;
with GetLinkagePointer^ do
     begin
          if not DTS_Open then
             begin
                  SBT_MiniSetDelete.Enabled := false;
                  SBT_MiniSetSave.Enabled := false;
                  SBT_MiniSetInsert.Enabled := false;
                  SBT_MiniSetEdit.Enabled := false;
                  SBT_MiniSetCancel.Enabled := false;
             end
          else
             begin
                  SBT_MiniSetDelete.Enabled := (((PRIV_LOESCHEN = ja) or (PRIV_LOESCHEN = 'L')) and
                                                (AQY_MiniSet.Active) and
                                                (AQY_MiniSet.State = dsBrowse) and
                                                (AQY_MiniSet.RecordCount > 0));
                  SBT_MiniSetSave.Enabled := ((AQY_MiniSet.Active) and
                                              (AQY_MiniSet.State <> dsBrowse));
                  SBT_MiniSetInsert.Enabled := (((PRIV_ERFASSEN = ja) or
                                              (PRIV_ERFASSEN = 'L') or
                                              (PRIV_ERFASSEN = 'l') or
                                              (PRIV_ERFASSEN = 'b') or
                                              (PRIV_ERFASSEN = 'x') or
                                              (PRIV_ERFASSEN = 'y'))
                                              and
                                              (AQY_MiniSet.Active) and
                                              (not (isSpace(EDT_ArtNr.Text))) and
                                              (AQY_MiniSet.State = dsBrowse));
                  SBT_MiniSetEdit.Enabled := (((PRIV_AENDERN = ja) or
                                              (PRIV_AENDERN = 'L')) and
                                              (AQY_MiniSet.Active) and
                                              (AQY_MiniSet.State = dsBrowse) and
                                              (AQY_MiniSet.RecordCount > 0));
                  SBT_MiniSetCancel.Enabled := ((AQY_MiniSet.Active) and
                                                (AQY_MiniSet.State <> dsBrowse));
             end; //** if not DTS_Open then
     end; //** with GetLinkagePointer^ do

SBT_MiniSetNumerieren.Enabled := ((SBT_MiniSetEdit.Enabled) and
                                  (SBT_MiniSetInsert.Enabled) and
                                  (SBT_MiniSetDelete.Enabled));

if GetLinkagePointer.Priv_Nur_Sichten = ja then
   begin
        SBT_MiniSetEdit.Enabled := false;
        SBT_MiniSetDelete.Enabled := false;
        SBT_MiniSetInsert.Enabled := false;
        SBT_MiniSetCancel.Enabled := false;
        SBT_MiniSetSave.Enabled := false;
        SBT_MiniSetNumerieren.Enabled := false;
   end; //** if GetLinkagePoiner.Priv_Nur_Sichten = ja

MNI_MiniSetEdit.Enabled := SBT_MiniSetEdit.Enabled;
MNI_MiniSetInsert.Enabled := SBT_MiniSetInsert.Enabled;
MNI_MiniSetDelete.Enabled := SBT_MiniSetDelete.Enabled;
MNI_MiniSetNumerieren.Enabled := SBT_MiniSetNumerieren.Enabled;
MNI_MiniSetCancel.Enabled := SBT_MiniSetCancel.Enabled;
MNI_MiniSetSave.Enabled := SBT_MiniSetSave.Enabled;

end; //** procedure UpdateMiniSetButtons


(******************************************************************************)
(***  L Ä G E R                                                             ***)
(******************************************************************************)
(******************************************************************************)
(***  AQY_Lager: OnAfterScroll                                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_LagerAfterScroll(DataSet: TDataSet);
begin

inherited;
//** Änderung 8)
if DataSet.ControlsDisabled then
   Exit;
//** Änderung 8)

UpdateLagerButtons;
ResetLagerColors;

end; //** procedure AQY_LagerAfterScroll


(******************************************************************************)
(***      AQY_SumBestand: OnAfterScroll                                     ***)
(******************************************************************************)


procedure TFRM_DobosLV.AQY_SumBestandAfterScroll(DataSet: TDataSet);
var
   c1, c2 : Currency;

begin

inherited;

EDT_SumBestand.Hint := rs_LV_PhysikalischerBestand+': '
                      +Trim(Format('%13.2n',[AQY_SumBestand.FieldByName('SUM_BESTAND').AsCurrency
                                            +AQY_SumBestand.FieldByName('SUM_RESERVIERT').AsCurrency]));
EDT_SumReserviert.Hint := EDT_SumBestand.Hint;

if (GetLinkagePointer^.Serial = KSerial_Oilquick) then
   begin
        EDT_Dispo.Hint := '';
        c1 := 0;
        c2 := 0;
        with AQY_Divers2 do
             try
                if Active then
                   Close;
                Connection := GetDOBOSADB;
                SQL.Clear;
                SQL.Add('SELECT sum(MENGE)*-1 from NETTOBEDARF WHERE (ARTNR = '''+Trim(SQLTextString(CurrArtNr))+''') AND (ART = ''A'')');
                UCOpenSQL(AQY_Divers2);
                c1 := Fields[0].AsCurrency;
                Close;
                SQL.Clear;
                SQL.Add('SELECT sum(MENGE) from NETTOBEDARF WHERE (ARTNR = '''+Trim(SQLTextString(CurrArtNr))+''') AND (ART = ''F'' OR ART = ''D'') ');
                UCOpenSQL(AQY_Divers2);
                c2 := Fields[0].AsCurrency;
                Close;
                EDT_Dispo.Hint := Format(rs_LVOQCounts,[c1, c2]);
                SQL.Clear;

             except
             end; //** try..except

   end;

end; //** procedure AQY_SumBestandAfterScroll


(******************************************************************************)
(***             AQY_SoPreisePREIS: OnGetText                               ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_SoPreisePREISGetText(Sender: TField;
  var Text: string; DisplayText: Boolean);
begin

inherited;

Text := FormatBIOSCurrency(Sender.AsCurrency,AQY_SoPreiseWS.AsInteger,(GetLinkagePointer^.PRIV_EK = ja));

end; //** procedure AQY_SoPreisePREISGetText


(******************************************************************************)
(***  AQY_Lager: OnBeforePost                                               ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_LagerBeforePost(DataSet: TDataSet);
begin

inherited;
with AQY_Lager do
     try
        ResetLagerColors;
        AQY_LagerARTNR.AsString := TrimRight(AQY_ArtikelStammARTNR.AsString);
     except
        on E:Exception do
           ShowMessage(E.Message);
     end; //** try..except

if not GetLinkagePointer^.HasUnicodeModule then
   begin
        AQY_LagerARTNR.AsString := AnsiString(AQY_LagerARTNR.AsString);
        AQY_LagerINV_KZ.AsString := AnsiString(AQY_LagerINV_KZ.AsString);
   end; //** if not GetLinkagePointer^.HasUnicodeModule then

end; //** procedure AQY_LagerBeforePost


(******************************************************************************)
(***   AQY_Lager: OnAfterPost (UpdateDatum / User eintragen)                ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_LagerAfterPost(DataSet: TDataSet);
begin

inherited;
PostStammAenderung(true);
ReadAllData;

end; //** procedure AQY_LagerAfterPost


(******************************************************************************)
(***  AQY_Lager: OnAfterInsert                                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_LagerAfterInsert(DataSet: TDataSet);
begin

inherited;
try
   AQY_LagerARTNR.AsString := TrimRight(AQY_ArtikelStammARTNR.AsString);
   AQY_LagerLAGER.AsInteger := 1;
   AQY_LagerORT.AsString := '';
   AQY_LagerBESTAND.AsCurrency := 0.0;
   AQY_LagerBESTELLT.AsCurrency := 0.0;
   AQY_LagerRUECKSTAND.AsCurrency := 0.0;
   AQY_LagerMIBEST.AsCurrency := 0.0;
   AQY_LagerSOLLBEST.AsCurrency := 0.0;
   AQY_LagerBBK.AsCurrency := 0.0;
   AQY_LagerINV_DATUM.AsDateTime := shbStrToDate(NullDatum);
   AQY_LagerINV_GEZAEHLT_ZUM.AsCurrency := 0.0;
   AQY_LagerINV_BESTAND.AsCurrency := 0.0;
   AQY_LagerINV_GEZAEHLT.AsCurrency := 0.0;
   AQY_LagerINV_EK.AsCurrency := 0.0;
   AQY_LagerINV_KZ.AsString := '';

except
   on E:Exception do
      ShowMessage(E.Message);

end; //** try..except

end; //** procedure AQY_LagerAfterInsert


(******************************************************************************)
(***  AQY_Lager:  OnPostError                                               ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_LagerPostError(DataSet: TDataSet; E: EDatabaseError; var Action: TDataAction);

begin

inherited;
ResetLagerColors;
if IsMSSQLPrimaryKeyViolation (E.Message, AQY_Lager.Connection) then
   begin
        ShowMessage(rs_LV_LagerAlreadyExists);
        AQY_Lager.Cancel;
        Action := daAbort;
        Exit;
   end; //** if IsMSSQLPrimaryKeyViolation (E.Message, AQY_Lager.Connection)

if IsMSSQLRecordHasChanged(E.Message, TADOQuery(DataSet).Connection) then
   begin
        ShowMessage(GetStdRes(frs_STDErrMsgRecChanged));
        BTN_NavRefreshClick(BTN_NavRefresh);
        Action := daAbort;
        Exit;
   end; //** if IsMSSQLRecordHasChanged(E.Message, TADOQuery(DataSet).Connection)

Application.MessageBox(PChar(rs_LV_FehlerMeldung+' '+E.Message), PChar(rs_LV_DatenbankFehler),mb_Iconstop or mb_ApplModal);
AQY_Lager.Cancel;
Action := daAbort;

end; //** procedure AQY_LagerPostError


(******************************************************************************)
(***  DataSource MiniSet: OnStateChange (Buttons Miniset updaten)           ***)
(******************************************************************************)

procedure TFRM_DobosLV.DTS_LagerStateChange(Sender: TObject);
begin

inherited;
UpdateLagerButtons;

if DTS_Lager.State in [dsInsert,dsEdit] then
   SetLagerEditColors
else
   ResetLagerColors;

end; //** procedure DTS_LagerStateChange


(******************************************************************************)
(***  UpdateLagerButtons                                                    ***)
(******************************************************************************)

procedure TFRM_DobosLV.UpdateLagerButtons;
begin
inherited;

with GetLinkagePointer^ do
     begin
          if not DTS_Open then
             begin
                  SBT_LagerDelete.Enabled := false;
                  SBT_LagerSave.Enabled := false;
                  SBT_LagerInsert.Enabled := false;
                  SBT_LagerEdit.Enabled := false;
                  SBT_LagerCancel.Enabled := false;
                  SBT_DispoAll.Enabled := false;
                  SBT_DispoSingle.Enabled := false;
             end
          else
             begin
                  SBT_LagerDelete.Enabled := (((PRIV_LOESCHEN = ja) or (PRIV_LOESCHEN = 'L')) and
                                             (AQY_Lager.Active) and
                                             (AQY_Lager.State = dsBrowse) and
                                             (AQY_Lager.RecordCount > 0));
                  SBT_LagerSave.Enabled := ((AQY_Lager.Active) and
                                            (AQY_Lager.State <> dsBrowse));
                  SBT_LagerInsert.Enabled := (((PRIV_ERFASSEN = ja) or
                                              (PRIV_ERFASSEN = 'L') or
                                              (PRIV_ERFASSEN = 'l') or
                                              (PRIV_ERFASSEN = 'b') or
                                              (PRIV_ERFASSEN = 'x') or
                                              (PRIV_ERFASSEN = 'y')) and
                                              (AQY_Lager.Active) and
                                              (not (isSpace(EDT_ArtNr.Text))) and
                                              (AQY_Lager.State = dsBrowse));
                  SBT_LagerEdit.Enabled := (((PRIV_AENDERN = ja) or
                                              (PRIV_AENDERN = 'L')) and
                                              (AQY_Lager.Active) and
                                              (AQY_Lager.State = dsBrowse) and
                                              (AQY_Lager.RecordCount > 0));

                  SBT_LagerCancel.Enabled := ((AQY_Lager.Active) and
                                              (AQY_Lager.State <> dsBrowse));
                  SBT_DispoAll.Enabled := ((AQY_Lager.Active) and
                                           (AQY_Lager.RecordCount <> 0));
                  SBT_DispoSingle.Enabled := SBT_DispoAll.Enabled;

             end; //** if not DTS_Open then
     end; //** with GetLinkagePointer^ do

if GetLinkagePointer.Priv_Nur_Sichten = ja then
   begin
        SBT_LagerEdit.Enabled := false;
        SBT_LagerDelete.Enabled := false;
        SBT_LagerInsert.Enabled := false;
        SBT_LagerCancel.Enabled := false;
        SBT_LagerSave.Enabled := false;
   end; //** if GetLinkagePoiner.Priv_Nur_Sichten = ja

MNI_LagerEdit.Enabled := SBT_LagerEdit.Enabled;
MNI_LagerInsert.Enabled := SBT_LagerInsert.Enabled;
MNI_LagerDelete.Enabled := SBT_LagerDelete.Enabled;
MNI_LagerCancel.Enabled := SBT_LagerCancel.Enabled;
MNI_LagerSave.Enabled := SBT_LagerSave.Enabled;
MNI_DispoSingle.Enabled := SBT_DispoSingle.Enabled;
MNI_DispoAll.Enabled := SBT_DispoAll.Enabled;

//** Chargenverwaltung - SM 2012
MNI_11.Visible := false;
MNI_ChargeInsert.Visible := false;
if IsHasCharge then
   if AQY_ArtikelStamm.Active  then
      if AQY_ArtikelStammCHARGENPFLICHTIG.AsString = Ja then
         begin
              MNI_11.Visible := true;
              MNI_ChargeInsert.Visible := true;
              MNI_ChargeInsert.Enabled := MNI_LagerInsert.Enabled;
         end; //** if IsHasCharge then

MNI_ShowChargenlager.Visible := false; //** 27.11.2013 - Anfang
if IsHasCharge then
   begin
        MNI_ShowChargenlager.Visible := true;
        MNI_ShowChargenlager.Enabled := true;
   end; //** if IsHasCharge then       //** 27.11.2013 - Ende

end; //** procedure UpdateLagerButtons


(******************************************************************************)
(***  ResetLagerColors (Farben Table zurücksetzen)                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.ResetLagerColors;
begin

GRD_LagerContainer.BeginUpdate();

GRD_LagerDBViewBESTAND.Visible := true;
GRD_LagerDBViewBESTELLT.Visible := true;
GRD_LagerDBViewRUECKSTAND.Visible := true;
GRD_LagerDBViewINV_BESTAND.Visible := true;
GRD_LagerDBViewINV_GEZAEHLT.Visible := true;
GRD_LagerDBViewINV_EK.Visible := (ek);
GRD_LagerDBViewINV_KZ.Visible := true;
GRD_LagerDBViewINV_DATUM.Visible := true;
GRD_LagerDBViewINV_GEZAEHLT_ZUM.Visible := false;

GRD_LagerDBView.OptionsData.Editing := false;
GRD_LagerDBViewLAGER.Options.Editing := false;

GRD_LagerContainer.EndUpdate();

end; //** procedure ResetLagerColors


(******************************************************************************)
(***  SetLagerEditColors (Farben Table Setzen)                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.SetLagerEditColors;
begin

GRD_LagerContainer.BeginUpdate();

GRD_LagerDBViewBESTAND.Visible := false;
GRD_LagerDBViewBESTELLT.Visible := false;
GRD_LagerDBViewRUECKSTAND.Visible := false;
GRD_LagerDBViewINV_BESTAND.Visible := false;
GRD_LagerDBViewINV_GEZAEHLT.Visible := false;
GRD_LagerDBViewINV_EK.Visible := false;
GRD_LagerDBViewINV_KZ.Visible := false;
GRD_LagerDBViewINV_DATUM.Visible := false;
GRD_LagerDBViewINV_GEZAEHLT_ZUM.Visible := false;

GRD_LagerDBView.OptionsData.Editing := true;
if DTS_Lager.State = dsInsert then
   GRD_LagerDBViewLAGER.Options.Editing := true;

if GRD_LagerContainer.CanFocus then
   GRD_LagerContainer.SetFocus;
if DTS_Lager.State = dsInsert then
   GRD_LagerDBView.Controller.FocusFirstAvailableItem;
if DTS_Lager.State = dsEdit then
   GRD_LagerDBView.Controller.FocusedColumn := GRD_LagerDBViewORT;

GRD_LagerContainer.EndUpdate;

end; //** procedure SetLagerEditColors


(******************************************************************************)
(***  SBT_LagerEdit: OnClick (Ändern Läger)                                 ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_LagerEditClick(Sender: TObject);
begin

inherited;
with AQY_Lager do
     try
        Edit;
        //SetLagerEditColors;
        //UpdateLagerButtons;
     except
        raise;
     end //** try..except

end; //** procedure SBT_LagerEditClick


(******************************************************************************)
(***  SBT_LagerInsert: OnClick (Erfassen Läger)                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_LagerInsertClick(Sender: TObject);
var
   i : integer;

begin

inherited;
if Erfassen then
   NeuEingabeAktiv := true;

with AQY_Lager do
     try
        i := 1;
        if GRD_LagerContainer.CanFocus then
           GRD_LagerContainer.SetFocus;
        Last;
        Insert;
        SetLagerEditColors;
        AQY_LagerARTNR.AsString := TrimRight(AQY_ArtikelStammARTNR.AsString);

     except
        on E:Exception do
           ShowMessage(E.Message);
     end; //** try..except

UpdateLagerButtons;

end; //** procedure SBT_LagerInsertClick


(******************************************************************************)
(***  SBT_LagerDelete: OnClick  (Löschen Läger)                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_LagerDeleteClick(Sender: TObject);
var
   ALagerOrtVorhanden,
   AMinBestandVorhanden,
   ASollBestVorhanden,
   ABBKVorhanden : boolean;
   AMessage : string;

begin

inherited;
if ((AQY_LagerBESTAND.AsCurrency <> 0.0) or
    (AQY_LagerBESTELLT.AsCurrency <> 0.0) or
    (AQY_LagerRUECKSTAND.AsCurrency <> 0.0)) then
    begin
         ShowMessage(rs_LV_DeleteForbiddenBestand);
         Exit;
    end;

if ((AQY_LagerINV_BESTAND.AsCurrency <> 0.0) or
    (AQY_LagerINV_GEZAEHLT.AsCurrency <> 0.0) or
    (AQY_LagerINV_GEZAEHLT_ZUM.AsCurrency <> 0.0)) then
    begin
         ShowMessage(rs_LV_DeleteForbiddenInventur);
         Exit;
    end;

AMessage := '';
ALagerOrtVorhanden   := (not IsSpace(AQY_LagerORT.AsString));
AMinBestandVorhanden := AQY_LagerMIBEST.AsCurrency <> 0.00;
ASollBestVorhanden   := AQY_LagerSOLLBEST.AsCurrency <> 0.00;
ABBKVorhanden        := AQY_LagerBBK.AsCurrency <> 0.00;

if ALagerOrtVorhanden or AMinBestandVorhanden or ASollBestVorhanden or ABBKVorhanden then
   begin
        if ALagerOrtVorhanden then
           AMessage := rs_LV_LagerOrtVorhanden+skReturn;
        if AMinBestandVorhanden then
           AMessage := AMessage +rs_LV_MindestbestandVorhanden+skReturn;
        if ASollBestVorhanden then
           AMessage := AMessage +rs_LV_SollbestandVorhanden+skReturn;
        if ABBKVorhanden then
           AMessage := AMessage +rs_LV_BestellbriefkastenVorhanden+skReturn;
   end; //** if ALagerOrtVorhanden or ...

with AQY_Lager do
     try
        if (MessageDlg(Format(AMessage + rs_LV_QDeleteLager,[AQY_LagerLAGER.AsInteger]), mtConfirmation,[mbYes,mbNo],0)) = mrYes then
           Delete;
        ReadAllData;
     except
        raise;
     end; //** try..except

UpdateLagerButtons;
ResetLagerColors;

end; //** procedure SBT_LagerDeleteClick


(******************************************************************************)
(***  SBT_LagerCancel: OnClick (Verwerfen Änderungen Lager)                 ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_LagerCancelClick(Sender: TObject);
begin

inherited;
if (MessageDlg(rs_LV_QDiscardChangesLager, mtConfirmation,[mbYes, mbNo],0)) = mrYes then
    with AQY_Lager do
         try
            Cancel;
            Close;
            Open; //** Einfaches ReOpen, kein UCChange machen!
            UpdateLagerButtons;
         except
            raise;
         end; //** try..except

ChargeInsert := false; //** 27.11.2013

end; //** procedure SBT_LagerCancelClick


(******************************************************************************)
(***  SBT_LagerSave: OnClick (Speichern Läger)                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_LagerSaveClick(Sender: TObject);
var
   ArtNr : string;
   l     : integer;

begin

inherited;
with AQY_Lager do
     try
        ArtNr := FieldByName('ARTNR').AsString;
        l := FieldByName('LAGER').AsInteger;
        Post;
        Close;
        Open; //** Einfaches ReOpen, kein UCChange machen!
        Locate('ARTNR; LAGER', VarArrayOf([ArtNr, l]),[]);
        UpdateLagerButtons;

        if IsHasCharge then   //** 27.11.2013 - Anfang
           if not MNI_ShowChargenlager.Checked then
              if ChargeInsert then
                 ShowMessage (rs_LV_HinweisAnlageChargenlager);

        ChargeInsert := false; //** 27.11.2013 - Ende

     except
        raise;
     end; //** try..except


end; //** procedure SBT_LagerSaveClick


(******************************************************************************)
(***    PCT_TexteBestand: OnExit                                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.PCT_TexteBestandExit(Sender: TObject);
var
   i : integer;

begin

inherited;
{lt PS unerwünscht!)
if ((Erfassen) and
    ((Screen.ActiveControl <> BTN_Speichern) and (Screen.ActiveControl <> BTN_Abbruch))) then
   if PCT_TexteBestand.ActivePage <> PCT_TexteBestand.Pages[PCT_TexteBestand.PageCount-1] then
      begin
           PCT_TexteBestand.SelectNextPage(true);
           for i := 0 to PCT_TexteBestand.ActivePage.ControlCount -1 do
               if TControl(PCT_TexteBestand.ActivePage.Controls[i]) is TWinControl then
                  with TWinControl(PCT_TexteBestand.ActivePage.Controls[i]) do
                       if ((TabStop) and (TabOrder = 0)) then
                          begin
                               TWinControl(PCT_TexteBestand.ActivePage.Controls[i]).SetFocus;
                               Break;
                          end;
      end; //** if PCT_TexteBestand.ActivePage <> PCT_TexteBestand.Pages[PCT_TexteBestand.PageCount-1]
}

end; //** procedure PCT_TexteBestandExit


(******************************************************************************)
(***    PCT_Bewegung: OnExit                                                ***)
(******************************************************************************)

procedure TFRM_DobosLV.PCT_BewegungExit(Sender: TObject);
var
   i : integer;

begin

inherited;
{lt PS unerwünscht!)
if ((Erfassen)and
    ((Screen.ActiveControl <> BTN_Speichern) and (Screen.ActiveControl <> BTN_Abbruch))) then
   if ((PCT_Bewegung.ActivePage = TAB_Lieferant) or
       (PCT_Bewegung.ActivePage = TAB_MiniSet)) then
      begin
           PCT_Bewegung.SelectNextPage(true);
           for i := 0 to PCT_Bewegung.ActivePage.ControlCount -1 do
               if TControl(PCT_Bewegung.ActivePage.Controls[i]) is TWinControl then
                  with TWinControl(PCT_Bewegung.ActivePage.Controls[i]) do
                       if ((TabStop) and (TabOrder = 0)) then
                          begin
                               TWinControl(PCT_Bewegung.ActivePage.Controls[i]).SetFocus;
                               Break;
                          end;
      end; //** ((PCT_Bewegung.ActivePage = TAB_Lieferant)...
}
end; //** procedure PCT_BewegungExit


(******************************************************************************)
(***   Allgemeine Routine Schlüsselpflege                                   ***)
(******************************************************************************)

procedure TFRM_DobosLV.CallSchluesselPflege(AArt : string);
var
   i : Integer;
   FPflegeSchluesselParams : TPflegeSchluesselParams;

begin

with FPflegeSchluesselParams do
     begin
          AKey  := AArt;
          AForm := self;
     end; //** with FPflegeSchluesselParams do

i := Call (dnCommon, 'pflegenschluessel', @FPflegeSchluesselParams);

end; //** procedure CallSchluesselPflege


(******************************************************************************)
(***      MNI_PflegenRaster: OnClick                                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_PflegenRasterClick(Sender: TObject);
var
   i : Integer ;
   FPflegeRasterParams : TPflegeRasterParams;

begin

with FPflegeRasterParams do
     begin
          ARaster := 0;
          AVariabelErfassen := false;
          AForm := self;
     end; //** with FPflegeRasterParams do

i := Call (dnDobosCommon, 'pflegenraster', @FPflegeRasterParams);

end; //** procedure MNI_PflegenRasterClick


(******************************************************************************)
(***   MNI_PflegeCF: OnClick                                                ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_PflegeCFClick(Sender: TObject);
begin

inherited;
CallSchluesselPflege('CL');

end; //** procedure MNI_PflegeCFClick


(******************************************************************************)
(***      MNI_PflegeAutoArtNr: OnClick                                      ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_PflegeAutoArtNrClick(Sender: TObject);
var
   i : Integer ;
   FPflegeAutoArtNrParams : TPflegeAutoArtNrParams;

begin

with FPflegeAutoArtNrParams do
     begin
          AArtNrSN := true;
          APMNr := false;    //** 10.2012
          AForm := self;
     end; //** with FPflegeAutoArtNrParams do

i := Call (dnDobosCommon, 'pflegenautoartnr', @FPflegeAutoArtNrParams);

end; //** procedure MNI_PflegeAutoArtNrClick


(******************************************************************************)
(***  EDT_WG: OnLookupClick                                                 ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_WGLookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkWG, Sender, Self);

end; //** procedure EDT_WGLookupClick


(******************************************************************************)
(***      EDT_AMMPrint: OnLookupClick                                       ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_AMMPrintLookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkAMMPrint, Sender, Self);

end; //** procedure EDT_AMMPrintLookupClick


(******************************************************************************)
(***     CheckFibuKonto                                                     ***)
(******************************************************************************)
function TFRM_DobosLV.CheckFibuKonto(const AText: string): integer;
var
   AValues : array [0..1] of Variant;
   s : string;
   mKonto : integer;

begin

result := 0;
if GetLinkagePointer^.Serial <> KSerial_OilQuick then
   Exit;

s := AText;
if Length(s) <> 4 then
   Exit;
mKonto := 0;
try
   mKonto := StrToInt(s);
except
   mKonto := 0;
end; //** try..except

if ((mKonto < 1) or (mKonto >= 9000)) then
   Exit;

if ReadAnyFields (GetFibuADB,
                 'KONTENPLAN ',
                 'WHERE KONTO_NR = '+IntToStr(mKonto) +' ',
                 ['KONTO_NR', 'FUNKTION'],
                 AValues) then
   try
      if (AValues[0] = mKonto) and ((AValues[1] = 'AV') or (Trim(AValues[1]) = '')) then
         result := mKonto;
   except
   end; //** try..except

end; //** function TFRM_DobosFABW.CheckFibuKonto


(******************************************************************************)
(***      EDT_AMM_InhaltFrei4: OnLookupClick                                ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_AMM_InhaltFrei4LookupClick(Sender: TObject);
var
   FSuchKOParams : TSuchKOParams;

begin

inherited;
if GetLinkagePointer^.Serial <> KSerial_OilQuick then
   Exit;

with FSuchKOParams do
     begin
          AKontoNr := 0;
          ASuchbegriff := '';
          AOrder := 1;
          ASuchFeld := 0;
          AForm := Self;
          //** Parameter: Start-Nummer, SuchText, Order by (0=KB, 1=Nr), SuchFeld(0=KB, 1=Bez)
          if Call (dnCommon, 'suchensachkonto', @FSuchKOParams) = 1 then
             begin
                  EDT_AMM_InhaltFrei4.AsString := StringReplace(Format('%4d',[AKontoNr]),' ','0',[rfReplaceAll]);
                  EDT_AMM_InhaltFrei4Exit(EDT_AMM_InhaltFrei4);
             end; //** if Call (dnCommon, 'suchensachkonto', @FSuchKOParams) = 1 then
     end; //** with FSuchKOParams do

end; //** procedure EDT_AMM_InhaltFrei4LookupClick


(******************************************************************************)
(***      EDT_AMM_InhaltFrei4: OnExit                                       ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_AMM_InhaltFrei4Exit(Sender: TObject);
begin

inherited;
if GetLinkagePointer^.Serial = KSerial_Oilquick then
   if (AQY_ArtikelStamm.State <> dsBrowse) and (AQY_ArtikelStammAMM_ART_KEY4.AsInteger = 1) then
      if Length(EDT_AMM_InhaltFrei4.Text) > 0 then
         begin
              if CheckFibuKonto(EDT_AMM_InhaltFrei4.Text) = 0 then
                 begin
                      ShowMessage(Format(rs_AMMKontoNichtGueltig,[EDT_AMM_InhaltFrei4.Text]));
                      EDT_AMM_InhaltFrei4.Text := '';
                      AQY_ArtikelStammAMM_INHALT_FREI4.AsString := '';
                 end; //** if CheckFibuKonto(EDT_AMM_InhaltFrei4.Text) = 0
         end; //** if Length(EDT_AMM_InhaltFrei4.Text) > 0

end; //** procedure EDT_AMM_InhaltFrei4Exit


(******************************************************************************)
(***      EDT_AMM_Key1: OnExit                                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_AMM_Key1Exit(Sender: TObject);
begin

inherited;
if GetLinkagePointer^.Serial = KSerial_Oilquick then
   if Sender = EDT_AMM_Key4 then
      if (AQY_ArtikelStamm.State <> dsBrowse) and (AQY_ArtikelStammAMM_ART_KEY4.AsInteger = 1) then
         if Length(EDT_AMM_InhaltFrei4.Text) > 0 then
            begin
                 if CheckFibuKonto(EDT_AMM_InhaltFrei4.Text) = 0 then
                    begin
                         ShowMessage(Format(rs_AMMKontoNichtGueltig,[EDT_AMM_InhaltFrei4.Text]));
                         EDT_AMM_InhaltFrei4.Text := '';
                         AQY_ArtikelStammAMM_INHALT_FREI4.AsString := '';
                    end; //** if CheckFibuKonto(EDT_AMM_InhaltFrei4.Text) = 0
            end; //** if Length(EDT_AMM_InhaltFrei4.Text) > 0

ReadAllAMMData;

end; //** procedure EDT_AMM_Key1Exit


(******************************************************************************)
(***      EDT_AMM_Key1: OnLookupClick                                       ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_AMM_Key1LookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkAM, Sender, Self,0,0,rs_AMMAuswahlKat);
//** Änderung 10)
//** Post und Processmsg gegen send ausgetauscht
//** Application.ProcessMessages eh schlecht und Send arbeitet die msg ab
//PostMessage(Handle, WM_NextDlgCtl, 0, 0);
SendMessage(Handle, WM_NextDlgCtl, 0, 0);
//** Änderung 10)
end; //** procedure EDT_AMM_Key1LookupClick


(******************************************************************************)
(***      EDT_AMM_Inhalt_Key1: OnLookupClick                                ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_AMM_Inhalt_Key1LookupClick(Sender: TObject);
var
   i : integer;

begin

inherited;

i := 0;
if Sender = EDT_AMM_Inhalt_Key1 then
   i := EDT_AMM_Key1.AsInteger
else
if Sender = EDT_AMM_Inhalt_Key2 then
   i := EDT_AMM_Key2.AsInteger
else
if Sender = EDT_AMM_Inhalt_Key3 then
   i := EDT_AMM_Key3.AsInteger;
if i = 0 then
   begin
        ShowMessage(rs_LV_KeineKategorieAusgewaehlt);
        Exit;
   end; //** if i = 0

GetListItem(lkAM, Sender, Self, i, 0, rs_AMMAuswahlMM);
//** Änderung 10)
//** Post und Processmsg gegen send ausgetauscht
//PostMessage(Handle, WM_NextDlgCtl, 0, 0);
SendMessage(Handle, WM_NextDlgCtl, 0, 0);
//** Änderung 10)
end; //** procedure EDT_AMM_Inhalt_Key1LookupClick


(******************************************************************************)
(***  EDT_RG: OnLookupClick                                                 ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_RGLookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkRG, Sender, Self);

end; //** procedure EDT_RGLookupClick


(******************************************************************************)
(***  EDT_Status: OnLookupClick                                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_StatusLookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkST, Sender, Self);

end; //** procedure EDT_StatusLookupClick


(******************************************************************************)
(***  EDT_US: OnLookupClick                                                 ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_USLookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkUS, Sender, Self);

end; //** procedure EDT_USLookupClick


(******************************************************************************)
(***      EDT_PackmittelVariante: OnLookupClick                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_PackmittelVarianteLookupClick(Sender: TObject);
var
   fVariante : Variant;

begin

inherited;
if (not (GetLinkagePointer^.Module[imPV])) then   //** 29.02.2016
   Exit;

fVariante := NULL;
fVariante := GetListItem(lkPMVA, nil, Self, 0, 0, rs_LV_AuswahlEinerPMVariante, EDT_Packmittel.Text);

if not ((Erfassen) or (Aendern)) then
   Exit;

if (VarIsNull(fVariante)) then
   AQY_ArtikelStammPACKMITTEL_VERSION.AsInteger := 0
else
   AQY_ArtikelStammPACKMITTEL_VERSION.AsInteger := fVariante;

//GetListItem(lkPMVA, Sender, Self);

end; //** procedure EDT_PackmittelVarianteLookupClick


(******************************************************************************)
(***      EDT_PackmittelIsPM: OnLookupClick                                 ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_PackmittelIsPMLookupClick(Sender: TObject);
begin
inherited;

if (not (GetLinkagePointer^.Module[imPV])) then   //** 29.02.2016
   Exit;

GetListItem(lkJN, Sender, Self);

end; //** procedure EDT_PackmittelIsPMLookupClick


(******************************************************************************)
(***      EDT_Packmittel: OnLookupClick                                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_PackmittelLookupClick(Sender: TObject);
var
   FSuchPMParams : TSuchPMParams;
   ANr           : string;
   b             : boolean;

begin

inherited;
if (not (GetLinkagePointer^.Module[imPV])) then   //** 29.02.2016
   Exit;

with FSuchPMParams do
     begin
          AFunction := 4; //** 12.0 SM vorher: 1;
          AAskMode := false;
          APMNr := '';
          ASuchText := EDT_Packmittel.Text;
          AOrderBy  := 0;
          ASuchFeld := 0;
          AComponent:= EDT_Packmittel;
     end; //** with FSuchPMParams do

if Call (dnDobosSuchen, 'suchenpm', @FSuchPMParams) = 1 then
   begin
        if not ((Erfassen) or (Aendern)) then
           Exit;
        //** neues Packmittel -> Version zurücksetzen
        if AQY_ArtikelStammPACKMITTEL.AsString <> FSuchPMParams.APMNr then
           AQY_ArtikelStammPACKMITTEL_VERSION.AsInteger := 0;
        AQY_ArtikelStammPACKMITTEL.AsString := FSuchPMParams.APMNr;
   end //** if Call (dnDobosSuchen, 'suchenpm', @FSuchPMParams) = 1

end; //** procedure EDT_PackmittelLookupClick


(******************************************************************************)
(***  EDT_PE_VK: OnLookupClick                                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_PE_VKLookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkPE, Sender, Self);

end; //** procedure EDT_PE_VKLookupClick


(******************************************************************************)
(***                     EDT_PE_VK: OnValidate                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_PE_VKValidate(var Text: string;
  var Continue: Boolean);
var
   i : integer;

begin

inherited;

Continue := true;

if not (AQY_ArtikelStamm.State in [dsEdit, dsInsert]) then
   Exit;

i := StrToInt(Text);

if AQY_ArtikelStammPE_VK.AsInteger <> i then
   begin
        try
           if CheckBeforePEChange then
              Continue := true
           else
              begin
                   if (MessageDlg(rs_LV_CheckPE,
                      mtWarning,[mbYes,mbNo],0)) = mrYes then
                      Continue := true
                   else
                      Continue := false;
              end; //** else
        except

        end;  //** try..except
   end; //** if AQY_ArtikelStammPE_VK.AsInteger <> i then

end; //** procedure EDT_PE_VKValidate


(******************************************************************************)
(***  EDT_PE_VK: OnLookupClick                                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_MELookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkME, Sender, Self);

end; //** procedure EDT_MELookupClick


(******************************************************************************)
(***  EDT_LiefPE: OnLookupClick                                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_LiefPELookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkPE, Sender, Self);

end; //** procedure EDT_LiefPELookupClick


(******************************************************************************)
(***  EDT_RasterVK: OnLookupClick                                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_RasterVKLookupClick(Sender: TObject);
var
   i : Integer ;
   FPflegeRasterParams : TPflegeRasterParams;
begin

inherited;

with FPflegeRasterParams do
     begin
          ARaster := AQY_ArtikelStammRASTER_VK.AsInteger;
          AVariabelErfassen := false;
          AForm := self;
     end; //** with FPflegeRasterParams do

i := Call (dnDobosCommon, 'pflegenraster', @FPflegeRasterParams);
if i > -1 then
   if (AQY_ArtikelStamm.State in [dsEdit, dsInsert]) then
      AQY_ArtikelStammRASTER_VK.AsInteger := i;
UpdateRaster(true);

end; //** procedure EDT_RasterVKLookupClick


(******************************************************************************)
(***      EDT_LiefRaster: OnChange                                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_LiefRasterChange(Sender: TObject);
begin
inherited;

if not (AQY_Lieferant.State in [dsEdit, dsInsert]) then
   Exit;

if (EDT_LiefStaffelBP.Text = 'F') then
   begin
        EDT_LiefRaster.AsInteger := 0;
        EDT_LiefPE.AsInteger := 1;
   end; //** if (EDT_LiefStappelBP.Text = 'F') then

if (EDT_LiefStaffelBP.Text = 'S')  then
   ReadBezForFremdKalk(BigEKScreenActive,EDT_LiefStaffelBP.Text)

end; //** procedure EDT_LiefRasterChange(Sender: TObject);


(******************************************************************************)
(***                  EDT_LiefRaster: OnExit                                ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_LiefRasterExit(Sender: TObject);
begin

inherited;

if ((EDT_LiefStaffelBP.Text = 'S') or (EDT_LiefStaffelBP.Text = 'F')) then
   ReadBezForFremdKalk(BigEKScreenActive,EDT_LiefStaffelBP.Text)
else
   ReadRaster(EDT_LiefRaster.AsInteger,false,true,true);

end; //** procedure EDT_LiefRasterExit

(******************************************************************************)
(***  EDT_LiefRaster: OnLookupClick                                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_LiefRasterLookupClick(Sender: TObject);
var
   i : Integer ;
   FPflegeRasterParams : TPflegeRasterParams;
begin

inherited;
with FPflegeRasterParams do
     begin
          ARaster := AQY_LieferantRASTER.AsInteger;
          AVariabelErfassen := false;
          AForm := self;
     end; //** with FPflegeRasterParams do

i := Call (dnDobosCommon, 'pflegenraster', @FPflegeRasterParams);
if i > -1 then
   if (AQY_Lieferant.State in [dsEdit, dsInsert]) then
      AQY_LieferantRASTER.AsInteger := i;

UpdateRaster(false);

end; //** procedure EDT_RasterVKLookupClick


(******************************************************************************)
(***  EDT_LiefWS: OnLookupClick                                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_LiefWSLookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkWS, Sender, Self);

end; //** procedure EDT_LiefWSLookupClick


(******************************************************************************)
(***      EDT_EMJN: OnLookupClick                                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_EMJNLookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkJN, Sender, Self, 0, 0, rs_LV_Edelmetallzuschlagsberechnung);

end; //** procedure EDT_EMJNLookupClick


(******************************************************************************)
(***      EDT_EM1_Methode: OnLookupClick  (auch 2/3)                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_EM1_MethodeLookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkPGF, Sender, Self);

end; //** procedure EDT_EM1_MethodeLookupClick


(******************************************************************************)
(***      EDT_LiefZOLL_BP: OnLookupClick (auchg Fracht)                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_LiefZOLL_BPLookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkBP, Sender, Self);

end; //** procedure EDT_LiefZOLL_BPLookupClick


(******************************************************************************)
(***      EDT_LiefStaffelBP: OnChange                                       ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_LiefStaffelBPChange(Sender: TObject);
begin
inherited;

if not (AQY_Lieferant.State in [dsEdit, dsInsert]) then
   Exit;

if (EDT_LiefStaffelBP.Text = 'F') then
   begin
        EDT_LiefRaster.AsInteger := 0;
        EDT_LiefPE.AsInteger := 1;
   end; //** if (EDT_LiefStappelBP.Text = 'F') then

end; //** procedure EDT_LiefStaffelBPChange(Sender: TObject);


(******************************************************************************)
(***                   EDT_LiefStaffelBP: OnExit                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_LiefStaffelBPExit(Sender: TObject);
begin

inherited;
if ((EDT_LiefStaffelBP.Text = 'S') or (EDT_LiefStaffelBP.Text = 'F')) then
   ReadBezForFremdKalk(BigEKScreenActive,EDT_LiefStaffelBP.Text)
else
   ReadRaster(EDT_LiefRaster.AsInteger,false,true,true);

end; //** procedure EDT_LiefStaffelBPExit


(******************************************************************************)
(***      EDT_LiefStaffelBP: OnLookupClick                                  ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_LiefStaffelBPLookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkKBP, Sender, Self, 0, 0, rs_LV_BetragsProzentstaffel);

end; //** procedure EDT_LiefStaffelBPLookupClick


(******************************************************************************)
(***  EDT_PreiseWS: OnLookupClick                                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_PreiseWSLookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkWS, Sender, Self);

end; //** procedure EDT_PreiseWSLookupClick


(******************************************************************************)
(***  EDT_C1: OnLookup                                                      ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_C1LookupClick(Sender: TObject);
var
   n,
   p : integer;
   s : string;

begin

inherited;
try
   p := StrToInt(Copy(TSHBDBEdit(Sender).Name, 6, Length(TSHBDBEdit(Sender).Name) - 5));
except
   Exit;
end; //** try..except

dec(p);
if not (p in [0..9]) then
   Exit;

s := TSHBDBEdit(Sender).AsString;
if Length(s) > 0 then
   n := ((p+1)*1000) + Byte(s[1])
else
   n := ((p+1)*1000);

//** Param1 : Stelle des CF, Param2: -1 = "?" in die Liste
GetListItem(lkCFLa, Sender, Self, (p+1),0, rs_LV_AuswahlArtikelcodefeldStelle+' '+IntToStr(p+1));


end; //** procedure EDT_C1LookupClick


(******************************************************************************)
(***  EDT_EM1_Nummer: OnLookupClick (auch 2/3)                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_EM1_NummerLookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkEM, Sender, Self);

end; //** procedure EDT_EM1_NummerLookupClick


(******************************************************************************)
(***  EDT_Warennummer: OnLookupClick                                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_WarennummerLookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkIW, Sender, Self);

end; //** procedure EDT_WarennummerLookupClick


(******************************************************************************)
(***  EDT_Ursprungsland: OnLookupClick                                      ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_UrsprungslandLookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkLand, Sender, Self, 0, 0, rs_LV_AuswahlUrsprungslands);

end; //** procedure EDT_UrsprungslandLookupClick


(******************************************************************************)
(***  EDT_Ursprungsregion: OnLookupClick                                    ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_UrsprungsregionLookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkIR, Sender, Self);

end; //** procedure EDT_UrsprungsregionLookupClick


(******************************************************************************)
(***      EDT_PrlPos: OnLookupClick                                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_PrlPosLookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkPL, Sender, Self);

end; //** procedure EDT_PrlPosLookupClick


(******************************************************************************)
(***      EDT_Sachmerkmal: OnLookupClick                                    ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_SachmerkmalLookupClick(Sender: TObject);
var
   FPflegeSachmerkmalParams : TPflegeSachmerkmalParams;
   i : integer;

begin

inherited;
with FPflegeSachmerkmalParams do
     begin
          if ((Erfassen) or (Aendern)) then
             AFunction   := 1
          else
             AFunction   := 0;
          AArtNr      := TrimRight(AQY_ArtikelStammARTNR.AsString);
          AKB         := AQY_ArtikelStammKB.AsString;
          ASachmerkmal:= AQY_ArtikelStammSACHMERKMAL.AsString;
          AForm       := Self;
     end; //** with FPflegeSachmerkmalParams do

i := Call (dnDobosCommon, 'pflegesachmerkmal', @FPflegeSachmerkmalParams);
if i = 1 then
   if not ((Erfassen) or (Aendern)) then
      PosMain(FPflegeSachmerkmalParams.AArtNr, '', mpExact, false)
   else
      if AQY_ArtikelStammSACHMERKMAL.AsString <> FPflegeSachmerkmalParams.ASachmerkmal then
         AQY_ArtikelStammSACHMERKMAL.AsString := FPflegeSachmerkmalParams.ASachmerkmal;

ReadSachMerkmal;

end; //** procedure EDT_SachmerkmalLookupClick


(******************************************************************************)
(***          EDT_SelNavDatensatzVonProperties: OnValidate                  ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_SelNavDatensatzVonPropertiesValidate(Sender: TObject;
  var DisplayValue: Variant; var ErrorText: TCaption; var Error: Boolean);
begin

inherited;

ErrorText := '';

if DisplayValue < 1 then
   DisplayValue := 1;

if DisplayValue > Keylist.Count then
   DisplayValue := Keylist.Count;

end; //** procedure EDT_SelNavDatensatzVonPropertiesValidate


(******************************************************************************)
(***            EDT_SelNavDatensatzVonProperties: OnButtonClick             ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_SelNavDatensatzVonPropertiesButtonClick(
  Sender: TObject; AButtonIndex: Integer);
begin

inherited;

if EDT_SelNavDatensatzVon.CurEditValue < 1 then
   begin
        EDT_SelNavDatensatzVon.EditValue := 1;
   end;

if EDT_SelNavDatensatzVon.CurEditValue > Keylist.Count then
   EDT_SelNavDatensatzVon.EditValue  := Keylist.Count;

TcxCustomEdit(Sender).PostEditValue;

KeyIndex := EDT_SelNavDatensatzVon.EditValue -1;

MoveToKey;
UpdateNavi;

end; //** procedure EDT_SelNavDatensatzVonPropertiesButtonClick


(******************************************************************************)
(***        EDT_SelNavDatensatzVonProperties: OnEditValueChanged            ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_SelNavDatensatzVonPropertiesEditValueChanged(
  Sender: TObject);
begin

inherited;

KeyIndex := EDT_SelNavDatensatzVon.CurEditValue -1;

MoveToKey;
UpdateNavi;

end; //** procedure EDT_SelNavDatensatzVonPropertiesEditValueChanged


(******************************************************************************)
(***      EDT_Sprache: OnChange                                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_SpracheChange(Sender: TObject);
var
   B : boolean;

begin

inherited;

if EDT_Sprache.AsInteger = 0 then
   LYI_FremdTexteSpracheLabel.Caption := ''
else
   with CallSys('SP',EDT_Sprache.AsInteger, B) do
       if ((B) and (DTS_Open)) then
          LYI_FremdTexteSpracheLabel.Caption := Text
       else
          LYI_FremdTexteSpracheLabel.Caption := rs_LV_undefiniert;

//** 22.09.2017 SM - Gegahrguteingaben
if (IsBiogartenOnly) then
   if (GetLinkagePointer^.MRecord.Mandant = 1) then
      if EDT_Sprache.AsInteger = 99 then
         begin

              LYI_FremdTexteBez1.Caption := rs_LV_FBez1geaendert;
              LYI_FremdTexteBez2.Caption := rs_LV_FBez2geaendert;
              LYI_FremdTexteBez3.Caption := rs_LV_FBez3geaendert;
              LYI_FremdTexteBez4.Caption := rs_LV_FBez4geaendert;
              LYI_FremdTexteBez5.Caption := rs_LV_FBez5geaendert;
              LYI_FremdTexteBez6.Caption := rs_LV_FBez6geaendert;
              LYI_FremdTexteBez7.Caption := rs_LV_FBez7geaendert;
              LYI_FremdTexteBez8.Caption := rs_LV_FBez8geaendert;

              EDT_FBez_1.ShowHint := true;
              EDT_FBez_2.ShowHint := true;
              EDT_FBez_3.ShowHint := true;
              EDT_FBez_4.ShowHint := true;
              EDT_FBez_5.ShowHint := true;
              EDT_FBez_6.ShowHint := true;
              EDT_FBez_7.ShowHint := true;
              EDT_FBez_8.ShowHint := true;
              EDT_FBez_1.Hint := rs_LV_FBez1geaendertHint;
              EDT_FBez_2.Hint := rs_LV_FBez2geaendertHint;
              EDT_FBez_3.Hint := rs_LV_FBez3geaendertHint;
              EDT_FBez_4.Hint := rs_LV_FBez4geaendertHint;
              EDT_FBez_5.Hint := rs_LV_FBez5geaendertHint;
              EDT_FBez_6.Hint := rs_LV_FBez6geaendertHint;
              EDT_FBez_7.Hint := rs_LV_FBez7geaendertHint;
              EDT_FBez_8.Hint := rs_LV_FBez8geaendertHint;
         end  //** if EDT_Sprache.AsInteger = 99 then
      else
         begin
              LYI_FremdTexteBez1.Caption := rs_LV_FBez1;
              LYI_FremdTexteBez2.Caption := rs_LV_FBez2;
              LYI_FremdTexteBez3.Caption := rs_LV_FBez3;
              LYI_FremdTexteBez4.Caption := rs_LV_FBez4;
              LYI_FremdTexteBez5.Caption := rs_LV_FBez5;
              LYI_FremdTexteBez6.Caption := rs_LV_FBez6;
              LYI_FremdTexteBez7.Caption := rs_LV_FBez7;
              LYI_FremdTexteBez8.Caption := rs_LV_FBez8;

              EDT_FBez_1.ShowHint := false;
              EDT_FBez_2.ShowHint := false;
              EDT_FBez_3.ShowHint := false;
              EDT_FBez_4.ShowHint := false;
              EDT_FBez_5.ShowHint := false;
              EDT_FBez_6.ShowHint := false;
              EDT_FBez_7.ShowHint := false;
              EDT_FBez_8.ShowHint := false;
              EDT_FBez_1.Hint := '';
              EDT_FBez_2.Hint := '';
              EDT_FBez_3.Hint := '';
              EDT_FBez_4.Hint := '';
              EDT_FBez_5.Hint := '';
              EDT_FBez_6.Hint := '';
              EDT_FBez_7.Hint := '';
              EDT_FBez_8.Hint := '';
         end; //** else: if EDT_Sprache.AsInteger = 99 then


end; //** procedure EDT_SpracheChange


(******************************************************************************)
(***      EDT_Sprache: OnLookupClick                                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_SpracheLookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkSP, Sender, Self);

end; //** procedure EDT_SpracheLookupClick


(******************************************************************************)
(***  MNI_FelderManipulieren: OnClick                                       ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_FelderManipulierenClick(Sender: TObject);
var
   xArtNr : string;

begin

inherited;
if (GetLinkagePointer.Priv_Nur_Sichten = ja) then
   begin
        NoPrivilege;
        Exit;
   end; //** if (GetLinkagePointer.Priv_Nur_Sichten = ja)

xArtNr := CurrArtNr;
CloseDataSources;
with AQY_ArtikelStamm do
     if Active then
        Close;
with AQY_SumBestand do
     if Active then
        Close;
with AQY_MiniSet do
     if Active then
        Close;
with AQY_Lieferant do
     if Active then
        Close;
with AQY_Zusatztexte do
     if Active then
        Close;
with AQY_FremdTexte do
     if Active then
        Close;
with AQY_DVKalk do
     if Active then
        Close;
with AQY_Preise do
     if Active then
        Close;
with AQY_Umsatz do
     if Active then
        Close;
with AQY_Bild do
     if Active then
        Close;

IMC_Bilder.Items.Clear;

with AQY_Lager do
     if Active then
        Close;
with AQY_CHLager do     //** 14.09.2018 SM
     if Active then
        Close;
with AQY_IBExist do
     if Active then
        Close;
with AQY_DVFehlmengen do
     if Active then
        Close;
with AQY_GetLamps do
     if Active then
        Close;
with AQY_GetXRef do
     if Active then
        Close;
with AQY_Badges do
     if Active then
        Close;
with AQY_HinweiseExists do
     if Active then
        Close;
with AQY_Nav do
     if Active then
        Close;
with AQY_DVRueckstaende do
     if Active then
        Close;
with AQY_SoPreise do
     if Active then
        Close;

CloseInsertSemaphore;      //** Semaphore Erfassen Schließen

try
   if KeyList.Count <= 0 then
      InputFeldWerte(nil)
   else
      if (MessageDlg(rs_LV_UseNavi, mtConfirmation,[mbYes,mbNo],0)) <> mrYes then
         InputFeldWerte(nil)
      else
         InputFeldWerte(KeyList);

except
   on E:Exception do
      ShowMessage(E.Message);
end; //** try..except

CloseDataSources;
OpenDataSources;
CurrArtNr := xArtNr;
if not (IsSpace(CurrArtNr)) then
   PosMain(CurrArtNr, '', mpExact, false)
else
   PosMain(CurrArtNr, '', mpFirst, false);

UpdateButtons;

end; //** procedure MNI_FelderManipulierenClick


(******************************************************************************)
(***      SBT_PreisKalk: OnClick                                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_PreisKalkClick(Sender: TObject);
var
   r : integer;
   b : boolean;
   LVPreisKalkParams : TLVPreisKalkParams;

begin

inherited;
with GetLinkagePointer^ do
     if ((not (PRIV_DOBOS_ABSCHLUSS = Ja)) or
         (not (PRIV_VK = Ja)) or
         (Priv_Nur_Sichten = Ja)) then
        begin
             NoPrivilege;
             Exit;
        end; //** if not (GetLinkagePointer^.PRIV_DOBOS_ABSCHLUSS = 'J' ...

b := DTS_Open;
CloseDataSources;

with LVPreisKalkParams do
     begin
          AFunction := 0;
          AIsEK := False;
          AArtNr := '';
          AArt := '';
          ALiefNummer := 0;
          APreisNummer := 0;
          AWS := 0;
          AForm := Self;
          r := Call (dnLVPrint, 'preisekalk', @LVPreisKalkParams);
     end; //** with LVPreisKalkParams do

if b then
   OpenDataSources;
UpdateButtons;

end; //** procedure SBT_PreisKalkClick


(******************************************************************************)
(***      MNI_KalkEK: OnClick                                               ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_KalkEKClick(Sender: TObject);
var
   LVPreisKalkParams : TLVPreisKalkParams;
   VKNr              : integer;
   s                 : string;
   p                 : integer;

begin


inherited;
with GetLinkagePointer^ do
     if ((not (PRIV_DOBOS_ABSCHLUSS = Ja)) or
         (Priv_Nur_Sichten = Ja) or
         (not (PRIV_EK = Ja))) then
        begin
             NoPrivilege;
             Exit;
        end; //** if not (GetLinkagePointer^.PRIV_DOBOS_ABSCHLUSS = 'J' ...

s := Self.ActiveControl.Name;
p := Pos('EDT_LiefEK_',s);
if p <> 1 then
   Exit;
s := Copy(s, 12, Length(s) - 11);
p := StrToInt(s);
if not (p in [1..10]) then
   Exit;

with LVPreisKalkParams do
     begin
          AIsEK := true;
          AFunction := 1;
          if Sender = MNI_KalkEK then
             APreisNummer := 0
          else
             APreisNummer := p;
          AArtNr := CurrArtNr;
          AArt := '';
          ALiefNummer := AQY_LieferantNUMMER.AsInteger;
          AWS := 0;
          AForm := Self;
          Call (dnLVPrint, 'preisekalk', @LVPreisKalkParams);
          AQY_Lieferant.Refresh;

     end; //** with LVPreisKalkParams do

end; //** procedure MNI_KalkEKClick


(******************************************************************************)
(***      MNI_KalkVK: OnClick                                               ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_KalkVKClick(Sender: TObject);
var
   LVPreisKalkParams : TLVPreisKalkParams;
   VKNr              : integer;
   s                 : string;
   p                 : integer;

begin


inherited;
with GetLinkagePointer^ do
     if ((not (PRIV_DOBOS_ABSCHLUSS = Ja)) or
         (not (PRIV_VK = Ja)) or
         (Priv_Nur_Sichten = Ja) or
         (not (PRIV_EK = Ja))) then
        begin
             NoPrivilege;
             Exit;
        end; //** if not (GetLinkagePointer^.PRIV_DOBOS_ABSCHLUSS = 'J' ...

s := Self.ActiveControl.Name;
p := Pos('EDT_VK_',s);
if p <> 1 then
   Exit;
s := Copy(s, 8, Length(s) - 7);
p := StrToInt(s);
if not (p in [1..10]) then
   Exit;

with LVPreisKalkParams do
     begin
          AIsEK := false;
          AFunction := 1;
          if Sender = MNI_KalkVK then
             APreisNummer := 0
          else
             APreisNummer := p;
          AArtNr := CurrArtNr;
          AArt := AQY_PreiseART.AsString;
          ALiefNummer := 0;
          AWS := AQY_PreiseWS.AsInteger;
          AForm := Self;
          Call (dnLVPrint, 'preisekalk', @LVPreisKalkParams);
          ReadAllData;
     end; //** with LVPreisKalkParams do

end; //** procedure MNI_KalkVKClick


(******************************************************************************)
(***  !SCheckAndInstallSammelArtikel                                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.CheckAndInstallSammelArtikel;
var
   AValues : array [0..0] of Variant;

begin

if ReadAnyFields (GetDobosADB,
                  'ARTIKEL_STAMM',
                  'WHERE ARTNR = ''ZZZZZZZZZZ'' ',
                  ['ARTNR'],
                   AValues) then
   Exit;

with AQY_Divers do
     try
        if Active then
           Close;
        Connection := GetDobosADB;
        SQL.Clear;

        //**!! ACHTUNG BEI Stammsatzänderung!!
        //!!EditMark!!:ArtikelStammänderungen
        SQL.Add('INSERT INTO ARTIKEL_STAMM (ARTNR, KB, ZN, BN, BEZ_1, BEZ_2, BEZ_3, '
                +'BEZ_4, BEZ_5, BEZ_6, BEZ_7, BEZ_8, EAN_NUMMER, INFO, PRL_POS, GEWICHT, '
                +'V_EINHEIT, ARBEITSPREIS, GUE_BEME, EK, DURCH_EK, MIN_DB, WG, RG, GARANTIE_ZEIT, '
                +'RASTER_VK, PE_VK, STATUS, US, SL_JN, MS_JN, EM_JN, ME, DK_1, DK_2, DK_3, '
                +'DK_4, DK_5, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, SACHMERKMAL, VIEWER_PFAD, '
                +'WARENNUMMER, URSPRUNG_LAND, URSPRUNG_REGION, MASSEINHEIT, EM1_NUMMER, '
                +'EM2_NUMMER, EM3_NUMMER, EM1_METHODE, EM2_METHODE, EM3_METHODE, EM1_ANTEIL, '
                +'EM2_ANTEIL, EM3_ANTEIL, DURCHMESSER, LAENGE, BREITE, HOEHE, SPEZ_GEWICHT, '
                +'B_BASIS, P_BASIS, LEAB, LEZU, ANLAGE_DATUM, AENDERUNG_DATUM, ANLAGE_USER_NR, '
                +'AENDERUNG_USER_NR, KALK_KZ, DISPO_STOP, KALK_KZ_VK, ZN_REV,'
                //** 10.0
                +'MASSE_SIND_MM, MASSE_FUER_FA, AMM_PRINT, '
                +'AMM_ART_KEY1, AMM_ART_KEY2, AMM_ART_KEY3, AMM_ART_KEY4, AMM_ART_KEY5, '
                +'AMM_INHALT_KEY1, AMM_INHALT_KEY2, AMM_INHALT_KEY3, '
                +'AMM_INHALT_FREI4, AMM_INHALT_FREI5, BV_PLAN_NUMMER, BV_SI_TAGE, '
                //** 10.1
                +'PRUEF_PFLICHTIG, MASSE_FREITEXT, PDM_GEPFLEGT, AL_NUMMER, PACKMITTEL, PACKMITTEL_VERSION, '
                +'PACKMITTEL_STUECK_IN_PM, PACKMITTEL_IST_PM, ECCN_NUMMER, ZOLLTARIF_NUMMER, PRAEFERENZ, FEINPLANUNG, '
                //** 10.2
                +'VORGABELAGER_ZU, VORGABELAGER_ZU_DV, VORGABELAGER_AB, VORGABELAGER_AB_DV, '
                +'ALTERNATE_ARTNR_1, ALTERNATE_ARTNR_2, ALTERNATE_ARTNR_3, '
                //** 11.0
                +'CHARGENPFLICHTIG, PREISAENDERUNG_BEMERKUNG, '
                //** 11.1
                +'PRAEFERENZ_ARTIKEL, PRAEFERENZ_ANTEIL, PRAEFERENZ_UE_DATUM, '
                +'VERPACKUNGSKOSTEN, KALK_AUFSCHLAG_GRUPPE, HYPERLINK, HIDE_BESTAND '
                +') VALUES ('
                +'''ZZZZZZZZZZ'', ''ZZZZZZZZZZ'', ''ZZZZZZZZZZ'', ''ZZZZZZZZZZ'', ''GELÖSCHTE ARTIKEL'', '''', '''', '
                +''''', '''', '''', '''', '''', 0, '''', 0, 0.0, '
                +'1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 999, 0, 0, '
                +'0, 1, 0, 2, ''N'', ''N'', ''N'', '''', 1, 1, 1, '
                +'1, 1, '''', '''', '''', '''', '''', '''', '''', '''', '''', '''', ''00000000000000000000'', '''', '
                +'0, 0, 0, 0.0, 0, '
                +'0, 0, '''', '''', '''', 0.0, '
                +'0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, '
                +'0, 0, '''+NullDatum+''', '''+NullDatum+''', '''+NullDatum+''', '''+NullDatum+''', 0, '
                +'0, ''D'', ''N'', ''S'', ''   '', '
                //** ab 10.0
                +'''N'', ''N'', ''N'', '
                +'0, 0, 0, 0, 0, '
                +'0, 0, 0 , '
                +''''', '''', '
                +'0, 0, '
                //** 10.1
                +'''N'', '''', ''N'', '''', '''', 0, 0.0, ''N'', '''', '''', ''N'', ''N'', '
                //** 10.2
                +'-1, -1, -1, -1, '''', '''', '''', '
                +'''N'', ' //** 11.0 Chargenpflichtig
                +''''', ' //** 11.0 PREISAENDERUNG_BEMERKUNG
                //** 11.1
                +'''N'', 0.0, ''01.01.1950'', 0.0, 9, 0, '
                //** 12.1
                +' ''N'' '
                +') ');
                //!!EditMark!!:ArtikelStammänderungen

        UCExecSQL(AQY_Divers);

     except
        on E:Exception do
           ShowMessage(E.Message);
     end; //** try..except

end; //** procedure CheckAndInstallSammelArtikel


(******************************************************************************)
(***      SBT_Viewer: OnClick                                               ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_ViewerClick(Sender: TObject);
var
   CmdLine : string;
   Path    : string;
   s       : string;
   Feld    : string;
   r       : integer;

begin

inherited;
if not GetLinkagePointer^.Module[imB2DocView] then
   begin
        //** no not Localize
        NotInstalled('BIOS DocViewer');
        Exit;
   end; //** if GetLinkagePointer^.Module[imB2DocView]

s := 'A';
if not GetSetViewerPath(Path, false, s) then
   if not GetSetViewerPath(Path, true, s) then
      Exit;

if s = 'B' then
   Feld := AQY_ArtikelStammBN.AsString
else
   if s = 'Z' then
      Feld := AQY_ArtikelStammZN.AsString
   else
      if s = 'X' then
         Feld := AQY_ArtikelStammBEZ_1.AsString
      else
         if s = 'P' then
            if (not (isSpace(AQY_ArtikelStammVIEWER_PFAD.AsString))) then
               Feld := AQY_ArtikelStammVIEWER_PFAD.AsString
            else
               Feld := AQY_ArtikelStammZN.AsString
         else
            Feld := AQY_ArtikelStammARTNR.AsString;

Feld := TrimRight(Feld);
Path := ExtractFilePath(Application.ExeName)+'BiosDocViewer.EXE';
with GetLinkagePointer^ do
     CmdLine := Path+Format(' A%2.2d_%3.3d ',[MRecord.Mandant, UserNummer])+Feld;

try
   try
      GetMem(xBuffer, Length(CmdLine)+1);
      StrPCopy(xBuffer, CmdLine);
      r := WinExec(xBuffer, SW_SHOWNORMAL);
      if r < 32 then
         raise EAbort.Create('');
   finally
      Freemem(xBuffer, Length(CmdLine)+1);
   end;
except
    ShowMessage(GetStdRes(frs_STD_QCannotLoadViewer));
end; //** try..except

end; //** procedure SBT_ViewerClick


(******************************************************************************)
(***     GetSetViewerPath                                                   ***)
(******************************************************************************)

function TFRM_DobosLV.GetSetViewerPath(var APfad : string; ASetFlag : boolean; var AFeld : string): boolean;
var
   ARootKey   : HKEY;
   APath      : string;
   AKey       : string;
   AName      : string;
   ASize      : integer;
   mFeld      : string;

begin

try
   ARootKey := HKEY_CURRENT_USER;
   APath := Registry_BiosPfad+'\Viewer';
   //** Schlüssel ggfs anlegen
   AKey := 'Path';
   AName := APfad;
   ASize := Length(APfad);

   if ASetFlag then
      if not ReadWriteRegistry(wrString, true, ARootKey, APath, AKey, AName, ASize) then
         result := ReadWriteRegistry(wrString, true, ARootKey, APath, AKey, AName, ASize)
      else
         result := true
   else
      result := ReadWriteRegistry(rdString, false, ARootKey, APath, AKey, AName, ASize);

APfad := AName;

if result then
   begin
        mFeld := AFeld;
        ARootKey := HKEY_CURRENT_USER;
        APath := Registry_BiosPfad+'\Viewer';
        //** Schlüssel ggfs anlegen
        AKey := 'Feld';
        AName := mFeld;
        ASize := Length(mFeld);

        if ASetFlag then
           if not ReadWriteRegistry(wrString, true, ARootKey, APath, AKey, AName, ASize) then
              result := ReadWriteRegistry(wrString, true, ARootKey, APath, AKey, AName, ASize)
           else
              result := true
        else
           result := ReadWriteRegistry(rdString, false, ARootKey, APath, AKey, AName, ASize);
        if isSpace(AName) then
           AName := 'A';
        AFeld := AName;
   end; //** if result

finally
end; //** try..finally

end; //** function GetSetViewerPath


(******************************************************************************)
(***      MNI_SetViewListPath: OnClick                                      ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_SetViewListPathClick(Sender: TObject);
var
   Path    : string;
   s       : string;
   n1,
   n       : integer;
   dummy1,
   dummy2  : boolean;

begin

inherited;

if not GetLinkagePointer^.Module[imB2DocView] then
   begin
        //** no not Localize
        NotInstalled('BIOS DocViewer');
        Exit;
   end; //** if GetLinkagePointer^.Module[imB2DocView]

s := 'A';
if not GetSetViewerPath(Path, false, s) then
   if not GetSetViewerPath(Path, true, s) then
      begin
           ShowMessage(rs_LV_CannotWriteToRegistry);
           Exit;
      end; //** if not GetSetViewerPath(Path, true)

Path := ExtractFilePath(Application.ExeName)+'BiosDocViewer.EXE';

if s = 'B' then
   n1 := 1
else
   if s = 'Z' then
      n1 := 2
   else
      if s = 'X' then
         n1 := 3
      else
         if s = 'P' then
            n1 := 4
         else
            if s = 'Y' then
               n1 := 5
            else
               n1 := 0;

if ((IsSHB) or (GetLinkagePointer^.Serial = KSerial_Rheonik)) then
   n := GetVarRDGDlg (rs_LV_AusgabefeldDefinieren,
                     [rs_LV_Artikelnummer,
                      rs_LV_Bestellnummer,
                      rs_LV_Zeichnungsnummer,
                      rs_LV_Bezeichnung1,
                      rs_LV_Zeichnungspfad,
                      rs_LV_ZeichnungspfadUndZN], n1, false, dummy1, dummy2)
else
   n := GetVarRDGDlg (rs_LV_AusgabefeldDefinieren,
                     [rs_LV_Artikelnummer,
                      rs_LV_Bestellnummer,
                      rs_LV_Zeichnungsnummer,
                      rs_LV_Bezeichnung1,
                      rs_LV_Zeichnungspfad], n1, false, dummy1, dummy2);

case n of
     0: s := 'A';
     1: s := 'B';
     2: s := 'Z';
     3: s := 'X';
     4: s := 'P';
     5: s := 'Y';
end; //** case n of

if not GetSetViewerPath(Path, true, s) then
   begin
        ShowMessage(rs_LV_CannotWriteToRegistry);
        Exit;
   end; //** if not GetSetViewerPath(Path, true)

end; //** procedure MNI_SetViewListPathClick


(******************************************************************************)
(***      EDT_WG: OnChange                                                  ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_WGChange(Sender: TObject);
var
   B : boolean;

begin

inherited;

if ((Erfassen) or (Aendern)) then
   begin
        with CallSys('WG',EDT_WG.AsInteger, B) do
         if ((B) and (DTS_Open)) then
            PAN_WG.Caption := Text
         else
            PAN_WG.Caption := rs_LV_undefiniert;
   end; //** if ((Erfassen) or (Aendern))

EDT_KBChange(Sender);

end; //** procedure EDT_WGChange


(******************************************************************************)
(***      EDT_RG: OnChange                                                  ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_RGChange(Sender: TObject);
var
   B : boolean;

begin
inherited;
if ((Erfassen) or (Aendern)) then
   begin
        with CallSys('RG',EDT_RG.AsInteger, B) do
            if ((B) and (DTS_Open)) then
               PAN_RG.Caption := Text
            else
               PAN_RG.Caption := rs_LV_undefiniert;
   end; //** if ((Erfassen) or (Aendern))

EDT_KBChange(Sender);

end; //** procedure EDT_RGChange


(******************************************************************************)
(***      ReadAllAMMData                                                    ***)
(******************************************************************************)

procedure TFRM_DobosLV.ReadAllAMMData;
var
   ik1,
   ik2,
   ik3,
   k1,
   k2,
   k3,
   k4,
   k5 : integer;
   mm,
   s0,
   s1,
   s2,
   s3,
   s4,
   s5,
   s6,
   s7,
   fLaengeCM,
   fBreiteCM,
   fHoeheCM,
   fDurchmesserCM,
   fLaengeMM,
   fBreiteMM,
   fHoeheMM,
   fDurchmesserMM : string;

begin

if GetLinkagePointer^.Serial = KSerial_Oilquick then
   begin
        if AQY_ArtikelStammAMM_ART_KEY4.AsInteger = 1 then
           EDT_AMM_InhaltFrei4.Lookup := true
        else
           EDT_AMM_InhaltFrei4.Lookup := false;
   end; //** if GetLinkagePointer^.Serial = KSerial_Oilquick

if AQY_ArtikelStamm.Active then
   begin
        if AQY_ArtikelStammMASSE_SIND_MM.AsString = 'J' then
           mm := 'mm'
        else
           mm := 'cm';

        fLaengeCM := Format(rs_Laenge,['cm']);
        fBreiteCM := Format(rs_Breite,['cm']);
        fHoeheCM := Format(rs_Hoehe,['cm']);
        fDurchmesserCM := Format(rs_Durchmesser,['cm']);

        fLaengeMM := Format(rs_Laenge,['mm']);
        fBreiteMM := Format(rs_Breite,['mm']);
        fHoeheMM := Format(rs_Hoehe,['mm']);
        fDurchmesserMM := Format(rs_Durchmesser,['mm']);

        if ((ActiveLayout = ffBenDef) and
            (GetLinkagePointer^.BIOSKundenArt <> tkArtSHB) and
            (not IsSHB)) then
           begin
                if ((SameText(LYI_Laenge.Caption, fLaengeCM)) or
                    (SameText(LYI_Laenge.Caption, fLaengeMM))) then
                   LYI_Laenge.Caption := Format(rs_Laenge,[mm]);

                if ((SameText(LYI_Breite.Caption, fBreiteCM)) or
                    (SameText(LYI_Breite.Caption, fBreiteMM))) then
                   LYI_Breite.Caption := Format(rs_Breite,[mm]);

                if ((SameText(LYI_Hoehe.Caption, fHoeheCM)) or
                    (SameText(LYI_Hoehe.Caption, fHoeheMM))) then
                   LYI_Hoehe.Caption := Format(rs_Hoehe,[mm]);

                if ((SameText(LYI_Durchmesser.Caption, fDurchmesserCM)) or
                    (SameText(LYI_Durchmesser.Caption, fDurchmesserMM))) then
                   LYI_Durchmesser.Caption := Format(rs_Durchmesser,[mm]);
           end //** if ActiveLayout = ffBenDef...
        else
           begin
                LYI_Laenge.Caption := Format(rs_Laenge,[mm]);
                LYI_Breite.Caption := Format(rs_Breite,[mm]);
                LYI_Hoehe.Caption := Format(rs_Hoehe,[mm]);
                LYI_Durchmesser.Caption := Format(rs_Durchmesser,[mm]);
           end; //** else von if ActiveLayout = ffBenDef..
   end; //** if AQY_ArtikelStamm.Active

with AQY_Divers do
     try
        try
           k1 := StrToInt(Format('1%4.4d0000',[AQY_ArtikelStammAMM_ART_KEY1.AsInteger]));
           k2 := StrToInt(Format('1%4.4d0000',[AQY_ArtikelStammAMM_ART_KEY2.AsInteger]));
           k3 := StrToInt(Format('1%4.4d0000',[AQY_ArtikelStammAMM_ART_KEY3.AsInteger]));
           k4 := StrToInt(Format('1%4.4d0000',[AQY_ArtikelStammAMM_ART_KEY4.AsInteger]));
           k5 := StrToInt(Format('1%4.4d0000',[AQY_ArtikelStammAMM_ART_KEY5.AsInteger]));
           ik1 := StrToInt(Format('1%4.4d%4.4d',[AQY_ArtikelStammAMM_ART_KEY1.AsInteger,AQY_ArtikelStammAMM_INHALT_KEY1.AsInteger]));
           ik2 := StrToInt(Format('1%4.4d%4.4d',[AQY_ArtikelStammAMM_ART_KEY2.AsInteger,AQY_ArtikelStammAMM_INHALT_KEY2.AsInteger]));
           ik3 := StrToInt(Format('1%4.4d%4.4d',[AQY_ArtikelStammAMM_ART_KEY3.AsInteger,AQY_ArtikelStammAMM_INHALT_KEY3.AsInteger]));
           if Active then
              Close;
           Connection := GetDobosADB;
           SQL.Clear;
           SQL.Add('SELECT '
                  +'"AMM1K" = (SELECT TEXT FROM SCHLUESSEL WHERE ART = ''AM'' AND NUMMER = '+IntToStr(k1)+'), '
                  +'"AMM1I" = (SELECT TEXT FROM SCHLUESSEL WHERE ART = ''AM'' AND NUMMER = '+IntToStr(ik1)+'), '
                  +'"AMM2K" = (SELECT TEXT FROM SCHLUESSEL WHERE ART = ''AM'' AND NUMMER = '+IntToStr(k2)+'), '
                  +'"AMM2I" = (SELECT TEXT FROM SCHLUESSEL WHERE ART = ''AM'' AND NUMMER = '+IntToStr(ik2)+'), '
                  +'"AMM3K" = (SELECT TEXT FROM SCHLUESSEL WHERE ART = ''AM'' AND NUMMER = '+IntToStr(k3)+'), '
                  +'"AMM3I" = (SELECT TEXT FROM SCHLUESSEL WHERE ART = ''AM'' AND NUMMER = '+IntToStr(ik3)+'), '
                  +'"AMM4K" = (SELECT TEXT FROM SCHLUESSEL WHERE ART = ''AM'' AND NUMMER = '+IntToStr(k4)+'), '
                  +'"AMM5K" = (SELECT TEXT FROM SCHLUESSEL WHERE ART = ''AM'' AND NUMMER = '+IntToStr(k5)+') ');
           UCOpenSQL(AQY_Divers);
           s0 := Fields[0].AsString;
           s1 := Fields[1].AsString;
           s2 := Fields[2].AsString;
           s3 := Fields[3].AsString;
           s4 := Fields[4].AsString;
           s5 := Fields[5].AsString;
           s6 := Fields[6].AsString;
           s7 := Fields[7].AsString;


           if AQY_ArtikelStammAMM_INHALT_KEY1.AsInteger = 0 then
              s1 := ''; //rs_LV_undefiniert;
           if AQY_ArtikelStammAMM_INHALT_KEY2.AsInteger = 0 then
              s3 := ''; //rs_LV_undefiniert;
           if AQY_ArtikelStammAMM_INHALT_KEY3.AsInteger = 0 then
              s5 := ''; //rs_LV_undefiniert;
           {
           if s0 = '' then
              s0 := rs_LV_undefiniert;
           if s1 = '' then
              s1 := rs_LV_undefiniert;
           if s2 = '' then
              s2 := rs_LV_undefiniert;
           if s3 = '' then
              s3 := rs_LV_undefiniert;
           if s4 = '' then
              s4 := rs_LV_undefiniert;
           if s5 = '' then
              s5 := rs_LV_undefiniert;
           if s6 = '' then
              s6 := rs_LV_undefiniert;
           if s7 = '' then
              s7 := rs_LV_undefiniert;
           }
           EDT_AMM_Art1.Text := s0;
           EDT_AMM_Art2.Text := s2;
           EDT_AMM_Art3.Text := s4;
           EDT_AMM_Art4.Text := s6;
           EDT_AMM_Art5.Text := s7;
           EDT_AMM_Inhalt1.Text := s1;
           EDT_AMM_Inhalt2.Text := s3;
           EDT_AMM_Inhalt3.Text := s5;

           ReadSachMerkmal;

        except
           on E:Exception do
              ShowMessage(E.Message);
        end; //** try..except


     finally
        if Active then
           Close;
     end; //** try..finally

end; //** procedure ReadAllAMMData


(******************************************************************************)
(***      !SReadAllData                                                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.ReadAllData;
var
   s,
   AArtNr : string;
   LinkNr : integer;
   mm :string;
   i : integer;

           (*******************************************************************)
           (***      lokale function CheckValidPath                         ***)
           (*******************************************************************)
            function CheckValidPath(APath : string) : boolean;
            var
               s : string;

            begin

            result := false;
            s := APath;
            if Pos('\', s) < 0 then
               Exit;
            try
               if DirectoryExists(s) then
                  result := true;
            except
            end; //** try..except

            end; //** lokale function CheckValidPath


           (*******************************************************************)
           (***      lokale function SwitchPDMFelder                        ***)
           (*******************************************************************)
            procedure SwitchPDMFelder(const AOff : boolean);
            begin

            if AOff then
               begin
                    EDT_ZN.ReadOnly := true;
                    EDT_ZNRev.ReadOnly := true;
                    EDT_BEZ_1.ReadOnly := true;
                    EDT_BEZ_2.ReadOnly := true;
                    EDT_BEZ_3.ReadOnly := true;
                    EDT_BEZ_4.ReadOnly := true;
                    EDT_ME.ReadOnly := true;
                    EDT_AMM_InhaltFrei4.ReadOnly := true;
                    EDT_AMM_InhaltFrei5.ReadOnly := true;
                    EDT_Gewicht.ReadOnly := true;
                    if GetLinkagePointer^.PRIV_SYSVW = Ja then
                       EDT_PDMGepflegt.ReadOnly := false
                    else
                       EDT_PDMGepflegt.ReadOnly := true;

                    //** 11.2 3536 2.10.2019 DB
                    if GetLinkagePointer^.Serial = KSerial_Conntronic then
                       begin
                            EDT_BEZ_5.ReadOnly := true;
                            EDT_BEZ_6.ReadOnly := true;
                            EDT_BEZ_7.ReadOnly := true;
                            EDT_BEZ_8.ReadOnly := true;
                            EDT_FBez_1.ReadOnly := true;
                            EDT_BN.ReadOnly := true;
                            EDT_Gewicht.ReadOnly := true;
                            EDT_WG.ReadOnly := true;
                            EDT_C1.ReadOnly := true;
                            EDT_C2.ReadOnly := true;
                       end; //** if GetLinkagePointer^.Serial = KSerial_Conntronic then
               end
            else
               begin
                    EDT_ZN.ReadOnly := false;
                    EDT_ZNRev.ReadOnly := false;
                    EDT_BEZ_1.ReadOnly := false;
                    EDT_BEZ_2.ReadOnly := false;
                    EDT_BEZ_3.ReadOnly := false;
                    EDT_BEZ_4.ReadOnly := false;
                    EDT_ME.ReadOnly := false;
                    EDT_AMM_InhaltFrei4.ReadOnly := false;
                    EDT_AMM_InhaltFrei5.ReadOnly := false;
                    EDT_Gewicht.ReadOnly := false;
                    if GetLinkagePointer^.PRIV_SYSVW = Ja then
                       EDT_PDMGepflegt.ReadOnly := false
                    else
                       EDT_PDMGepflegt.ReadOnly := true;

                    //** 11.2 3536 2.10.2019 DB
                    if GetLinkagePointer^.Serial = KSerial_Conntronic then
                       begin
                            EDT_BEZ_5.ReadOnly := false;
                            EDT_BEZ_6.ReadOnly := false;
                            EDT_BEZ_7.ReadOnly := false;
                            EDT_BEZ_8.ReadOnly := false;
                            EDT_FBez_1.ReadOnly := false;
                            EDT_BN.ReadOnly := false;
                            EDT_Gewicht.ReadOnly := false;
                            EDT_WG.ReadOnly := false;
                            EDT_C1.ReadOnly := false;
                            EDT_C2.ReadOnly := false;
                       end; //** if GetLinkagePointer^.Serial = KSerial_Conntronic then

               end; //** if AOff

            end; //** lokale function SwitchPDMFelder

(******************************************************************************)
(***    Start ReadAllData                                                   ***)
(******************************************************************************)
begin

if Erfassen then
   AArtNr := EDT_ArtNr.Text
else
   AArtNr := CurrArtNr;

LYI_ArtikelGesperrtInfo.Visible := false;
try
   LYC_Lagerverwaltung.BeginUpdate;
   //** Änderung 11) BarmanagerUpdate raus (weil kein unterschied)
   //** und disablecontrols für Lager,Miniset und Lieferanten, weil sonst hier
   //** der Afterscroll nicht feuert

   //BMG_DllForm.BeginUpdate;

   //LockWindowUpdate(Self.Handle);

   AQY_ArtikelStamm.DisableControls;

   //AQY_Lager.DisableControls;
   AQY_CHLager.DisableControls;
   //AQY_Lieferant.DisableControls;
   AQY_Zusatztexte.DisableControls;
   AQY_FremdTexte.DisableControls;
   AQY_DVKalk.DisableControls;
   //AQY_MiniSet.DisableControls;
   AQY_Preise.DisableControls;
   AQY_SumBestand.DisableControls;
   AQY_Umsatz.DisableControls;
   AQY_Bild.DisableControls;
   AQY_DVFehlmengen.DisableControls;
   AQY_DVRueckstaende.DisableControls;
   AQY_Dispo.DisableControls;
   AQY_IBExist.DisableControls;
   AQY_GetLamps.DisableControls;
   AQY_GetXRef.DisableControls;
   AQY_Badges.DisableControls;
   AQY_Divers.DisableControls;
   AQY_HinweiseExists.DisableControls;
   AQY_SoPreise.DisableControls;

   if not Erfassen then
      with AQY_ArtikelStamm do
           try
              if Active then
                 Close;
              Parameters[0].Value := AArtNr;
              //** if not IsSpace ArtrNr ausgebaut, weil Strg+L und Suche nach Sachnummer nicht ging PB 04.03.2020
              //if not IsSpace(AArtNr) then
              Open; //** Parametrisierte Query ohne Literale kein UCChange machen!

              UpdateArtikelGesperrtLabel;

           except
              on E:Exception do
                 ShowMessage(E.Message);
           end; //** try..except

   with AQY_Lager do
        try
           if Active then
              Close;
           Parameters[0].Value := AArtNr;
           Open; //** Parametrisierte Query ohne Literale kein UCChange machen!
        except
           on E:Exception do
              ShowMessage(E.Message);
        end; //** try..except

   if GetLinkagePointer^.Module[imCL] then   //** 14.09.2018 SM
      with AQY_CHLager do
           try
              if Active then
                 Close;
              Parameters[0].Value := AArtNr;
              Open; //** Parametrisierte Query ohne Literale kein UCChange machen!
           except
              on E:Exception do
                 ShowMessage(E.Message);
           end; //** try..except

   with AQY_Lieferant do
        try
           if Active then
              Close;
           PAN_LiefName.Caption := rs_LV_undefiniert;
           Parameters[0].Value := AArtNr;
           Open; //** Parametrisierte Query ohne Literale kein UCChange machen!
        except
           on E:Exception do
              ShowMessage(E.Message);
        end; //** try..except

   with AQY_Zusatztexte do
        try
           if Active then
              Close;
           LYI_FremdTexteSpracheLabel.Caption := '';
           Parameters[0].Value := AArtNr;
           Open; //** Parametrisierte Query ohne Literale kein UCChange machen!
        except
           on E:Exception do
              ShowMessage(E.Message);
        end; //** try..except

   with AQY_FremdTexte do
        begin
           if Active then
              Close;
           Parameters[0].Value := AArtNr;
           Open; //** Parametrisierte Query ohne Literale kein UCChange machen!
        end; //** with AQY_FremdTexte do

   with AQY_DVKalk do
        begin
           if Active then
              Close;
           Parameters[0].Value := AArtNr;
           Open; //** Parametrisierte Query ohne Literale kein UCChange machen!
        end; //** with AQY_DVKalk do

   with AQY_MiniSet do
        try
           if Active then
              Close;
          SQL.Clear;
          SQL.Add('SELECT m.*,'
                 +'"BEZ_1" = ISNULL((SELECT BEZ_1 FROM ARTIKEL_STAMM s WHERE s.ARTNR = m.UNTER_ARTNR),'''+GetStdRes(frs_STD_StammsatzFehlt)+'''),'
                 +'"BEZ_2" = ISNULL((SELECT BEZ_2 FROM ARTIKEL_STAMM s WHERE s.ARTNR = m.UNTER_ARTNR),'''+GetStdRes(frs_STD_StammsatzFehlt)+''') '
                 + 'FROM ARTIKEL_MINISET m '
                 +' WHERE m.ARTNR = '''+CurrArtnr+'''  '
                 +'ORDER BY m.ARTNR, NUMMER, UNTER_ARTNR ');
           Open; //** Parametrisierte Query ohne Literale kein UCChange machen!
        except
           on E:Exception do
              ShowMessage(E.Message);
        end; //** try..except

   with AQY_Preise do
        try
           if Active then
              Close;
           Parameters[0].Value := AArtNr;
           Open; //** Parametrisierte Query ohne Literale kein UCChange machen!
        except
           on E:Exception do
              ShowMessage(E.Message);
        end; //** try..except

   with AQY_SumBestand do
        try
           if Active then
              Close;
           Parameters[0].Value := AArtNr;
           Open; //** Parametrisierte Query ohne Literale kein UCChange machen!
        except
           on E:Exception do
              ShowMessage(E.Message);
        end; //** try..except

   with AQY_Umsatz do
        try
           if Active then
              Close;
           Parameters[0].Value := AArtNr;
           Open; //** Parametrisierte Query ohne Literale kein UCChange machen!
        except
           on E:Exception do
              ShowMessage(E.Message);
        end; //** try..except

   FillUmsatzMemTable;

   IMC_Bilder.Items.Clear;

   with AQY_Bild do
        try
           if Active then
              Close;
           Parameters[0].Value := AArtNr;
           Open; //** Parametrisierte Query ohne Literale kein UCChange machen!
           FillImageCollection;
           if AQY_Bild.RecordCount > 0 then
              begin
                   LYI_Bild.CaptionOptions.Visible := false;
                   LYI_Bild.Caption := '';
              end
           else
              begin
                   LYI_Bild.CaptionOptions.Visible := true;
                   LYI_Bild.Caption := rs_LV_KeineBilderVorhanden;
              end
        except
           on E:Exception do
              ShowMessage(E.Message);
        end; //** try..except

   CheckZusatzInfosZusatzDokumente(AArtNr,false);
{
   with AQY_GetLamps do
        try
           if Active then
              Close;
           for i := 0 to Parameters.Count -1 do
               Parameters.Items[i].Value := AArtNr;
           if not IsSpace(AArtNr) then
              Open; //** Parametrisierte Query ohne Literale kein UCChange machen!
        except
           on E:Exception do
              ShowMessage(E.Message);
        end; //** try..except
}
   with AQY_Badges do
        try
           if Active then
              Close;
           for i := 0 to Parameters.Count -1 do
               Parameters.Items[i].Value := AArtNr;
           if not IsSpace(AArtNr) then
              Open; //** Parametrisierte Query ohne Literale kein UCChange machen!
        except
           on E:Exception do
              ShowMessage(E.Message);
        end; //** try..except

   with AQY_GetXRef do
        try
           if Active then
              Close;
           for i := 0 to Parameters.Count -1 do
               Parameters.Items[i].Value := AArtNr;
           if DoXRefSelect then
              if not IsSpace(AArtNr) then
                 Open; //** Parametrisierte Query ohne Literale kein UCChange machen!
        except
           on E:Exception do
              ShowMessage(E.Message);
        end; //** try..except

   STB_DLLChild.Panels[2].Text := '';
   if GetLinkagePointer^.Module[imDAVOS] then
      with AQY_DVFehlmengen do
           try
              if Active then
                 Close;
              Parameters[0].Value := AArtNr;
              Open; //** Parametrisierte Query ohne Literale kein UCChange machen!
              if RecordCount > 1 then
                 STB_DLLChild.Panels[2].Text := IntToStr(RecordCount)+' '+rs_LV_Fehlmengeneintraege
              else
                 if RecordCount = 1 then
                    STB_DLLChild.Panels[2].Text := IntToStr(RecordCount)+' '+rs_LV_Fehlmengeneintrag;
           except
              on E:Exception do
                 ShowMessage(E.Message);
           end; //** try..except

   if GetLinkagePointer^.Module[imDAVOS] then
      with AQY_DVRueckstaende do
           try
              if Active then
                 Close;
              SQL.Clear;
              SQL.Add(' SELECT "ANZAHL" = sum(zz.BARCODE) FROM ' +
                      ' ( SELECT ' +
                      '  "BARCODE" = COUNT(a.BARCODE) ' +
                      '  FROM DV_FE_POSTEN a ' +
                      '  JOIN DV_FE_KOPF b ON (a.KUNU = b.KUNU AND a.NUMMER = b.NUMMER AND a.BARCODE = b.BARCODE) ' +
                      //'  LEFT JOIN ADRESSEN ad ON (a.KUNU = ad.KUNU) ' +
                      //'  LEFT JOIN ARTIKEL_LAGER l ON (a.ARTNR = l.ARTNR AND a.ENTNAHME_LAGER = l.LAGER) ' +
                      '  WHERE a.ARTNR = ''' + CurrArtNr + ''' ' +
                      '  AND a.IST_ENTNAHME < a.PLAN_ENTNAHME AND a.ART =''L'' ' +
                      //AND l.BESTAND > 0 ' +

                      ' UNION ALL ' +
                      ' SELECT ' +
                      ' "BARCODE" = COUNT(a.BARCODE) ' +
                      ' FROM DV_FE_POSTEN a ' +
                      ' JOIN DV_AUFTRAG_SL b ON (a.BARCODE = b.BARCODE) AND b.MENGE > 0 ' +
                      ' JOIN DV_FE_KOPF c ON (a.KUNU = c.KUNU AND a.NUMMER = c.NUMMER AND a.BARCODE = c.BARCODE) ' +
                      //' LEFT JOIN ADRESSEN ad ON (a.KUNU = ad.KUNU) ' +
                      //' JOIN ARTIKEL_LAGER l ON (b.ARTNR = l.ARTNR AND b.LAGER = l.LAGER) ' +
                      ' WHERE a.ART = ''S'' ' +
                      ' AND b.UMGEBUCHT_ABSOLUT < b.MENGE * a.PLAN_MENGE ' +
                      ' AND b.ARTNR = ''' + CurrArtNr + ''' )' +
                      //' AND l.BESTAND > 0) ' +

                      ' AS zz');
              if ((MNI_DurchsucheRueckstaende.Checked) and (not (IsSpace(CurrArtNr)))) then
                 begin
                      Open; //** Parametrisierte Query ohne Literale kein UCChange machen!
                      if AQY_DVRueckstaendeANZAHL.AsInteger <> 0 then
                         begin
                              if AQY_DVRueckstaendeANZAHL.AsInteger > 1 then
                                 STB_DLLChild.Panels[2].Text := STB_DLLChild.Panels[2].Text + ' ' + IntToStr(AQY_DVRueckstaendeANZAHL.AsInteger) + ' ' + rs_Lv_RueckstandsEintraege
                              else
                                 if AQY_DVRueckstaendeANZAHL.AsInteger = 1 then
                                    STB_DLLChild.Panels[2].Text := STB_DLLChild.Panels[2].Text +' '+ IntToStr(AQY_DVRueckstaendeANZAHL.AsInteger) + ' ' + rs_Lv_RueckstandEintrag;
                      end; //** if AQY_DVRueckstaendeANZAHL.AsInteger <> 0 then
                 end; //** if ((MNI_DurchsucheRueckstaende.Checked) and (not (IsSpace(CurrArtNr)))) then

           except
              on E:Exception do
                 ShowMessage(E.Message);
           end; //** try..except

   EDT_Dispo.AsCurrency := 0.0;
   EDT_UNAnlage.Hint := GetUserName(AQY_ArtikelStammANLAGE_USER_NR.AsInteger);
   EDT_UNAenderung.Hint := GetUserName(AQY_ArtikelStammAENDERUNG_USER_NR.AsInteger);

   if (GetLinkagePointer^.Module[imNB]) then
      with AQY_Dispo do
           try
              if Active then
                 Close;
              Connection := GetDOBOSADB;
              SQL.Clear;
              if DispoAktuellSw then
                 SQL.Add('GP_NBVORSCHLAG '''+SqlTextString(AnsiUpperCase(TrimRight(AArtNr)))+''', '''+SHBDateToStr(GetLinkagePointer^.TagesDatum)+''' ')
              else
                 SQL.Add('GP_NBVORSCHLAG '''+SqlTextString(AnsiUpperCase(TrimRight(AArtNr)))+''', ''31.12.2050'' ');
              UCOpenSQL(AQY_Dispo);
              if not EOF then
                 begin
                      if ((Trim(shbDateToStr(FieldByName('DATUM').AsDateTime)) = ('01.01.1900')) and (RecordCount > 1)) then
                         Next;
                      if ((DispoAktuellSw) and (FieldByName('DATUM').AsDateTime > GetLinkagePointer^.TagesDatum)) then
                         EDT_Dispo.AsCurrency := 0
                      else
                         EDT_Dispo.AsCurrency := FieldByName('DISPO').AsCurrency;
                 end;
              Close;
           except
              on E:Exception do
                 ShowMessage(E.Message);
           end; //** try..except

   OpenSoPreise(AArtNr);

   CheckIB;
   ReadAllAMMData;
   ReadVorgabeLagerNamen;
   SetHintsAndBadge;

   EDT_VorgabeLagerZu.Enabled := true;
   EDT_VorgabeLagerZuDV.Enabled := true;
   EDT_VorgabeLagerAb.Enabled := true;
   EDT_VorgabeLagerAbDV.Enabled := true;
   if IsHasCharge then
      if AQY_ArtikelStammCHARGENPFLICHTIG.AsString = Ja then
         begin
              EDT_VorgabeLagerZu.Enabled := false;
              EDT_VorgabeLagerZuDV.Enabled := false;
              EDT_VorgabeLagerAb.Enabled := false;
              EDT_VorgabeLagerAbDV.Enabled := false;
         end; //** if AQY_ArtikelStammCHARGENPFLICHTIG.AsString = Ja then

   if (GetLinkagePointer^.Module[imPDM]) then
      SwitchPDMFelder(Get1StChar(AQY_ArtikelStammPDM_GEPFLEGT.AsString) = 'J');

   EDT_PreisBem.Hint := AQY_ArtikelStammPREISAENDERUNG_BEMERKUNG.AsString;

   if ((GetLinkagePointer^.Module[imDAVOS]) and (GetLinkagePointer^.Module[imDVFUeb])) then
      if AArtNr = 'ZZZZZZZZZZ' then
         LYI_ZugangFertigung.Caption := rs_LV_QSZugaenge
      else
         LYI_ZugangFertigung.Caption := rs_LV_Zugaenge;

   //** 22.09.2017 SM - Biogarten hat kein Davos
   if ((IsBiogartenOnly) and
       (GetLinkagePointer^.MRecord.Mandant = 1)) then
      begin
           LYI_ZugangFertigung.Caption := rs_LV_UNNummer;
           LYI_ZugangFertigung.Enabled := true;
           EDT_VorgabeLagerZuDV.Enabled := true;
           EDT_VorgabeLagerZuDV.Calculator := false;
           EDT_VorgabeLagerZuDV.Hint := rs_LV_UNNummerHint;
           LYI_ZugangslagerFertigungName.Caption := '';

           //** 09.11.2017 SM
           LYI_AbgangFertigung.Caption := rs_LV_Gefahrgut;
           LYI_AbgangFertigung.Enabled := true;
           EDT_VorgabeLagerAbDV.Enabled := true;
           EDT_VorgabeLagerAbDV.Calculator := false;
           EDT_VorgabeLagerAbDV.Hint := rs_LV_GefahrgutHint;
           LYI_AbgangslagerFertigungName.Caption := '';
      end; //** if (IsBiogartenOnly)

   if (GetLinkagePointer^.Serial = KSerial_Yamaichi)              then
      begin
           YamaichiSaveStatus := AQY_ArtikelStammSTATUS.AsInteger;
           if (((GetLinkagePointer^.PRIV_DOBOS_ABSCHLUSS = Nein)  and
              (GetLinkagePointer^.Gruppe = 5)                     and
              ((AQY_ArtikelStammSTATUS.AsInteger = 0)             or
              (AQY_ArtikelStammSTATUS.AsInteger = 2)              or
              ((AQY_ArtikelStammSTATUS.AsInteger = 5))))          or
              (GetLinkagePointer^.PRIV_DOBOS_ABSCHLUSS = JA))     then
              EDT_Status.ReadOnly := false
           else
              EDT_Status.ReadOnly := true;

           if ((not (NeuEingabeAktiv)) and
               (GetLinkagePointer^.Gruppe <> 5) and
               //** 13.5.2015 DB
               (GetLinkagePointer^.Gruppe <> 0)
               ) then
              begin
                   EDT_LiefZoll.ReadOnly := true;
                   EDT_LiefFracht.ReadOnly := true;
                   EDT_LiefStaffelBP.ReadOnly := true;
              end //** if ((not (NeuEingabeAktiv)) and (GetLinkagePointer^.Gruppe <> 5))
           else
              begin
                   EDT_LiefZoll.ReadOnly := false;
                   EDT_LiefFracht.ReadOnly := false;
                   EDT_LiefStaffelBP.ReadOnly := false;
              end  //** else-Zweig if ((not (NeuEingabeAktiv)) and (GetLinkagePointer^.Gruppe <> 5))

       end; //** (GetLinkagePointer^.Serial = KSerial_Yamaichi)


       //** 11.1
       SBT_InternetLink.Enabled := false;
       LinkNr := AQY_ArtikelStammHYPERLINK.AsInteger;
       if GetWriteInternetLinkData(false,LinkNr, s) then
          begin
               SBT_InternetLink.Hint := s;
               SBT_InternetLink.Enabled := true;
          end
       else
           begin
                SBT_InternetLink.Hint := rs_LV_LinkHint;
                if ((Erfassen) or (Aendern)) then
                   SBT_InternetLink.Enabled := true;
           end;

       //** Änderung 5)
       SBT_LiefInternetLink.Hint := rs_LV_LinkHint;
       //** //** siehe oben (Technik halt ein wenig geändert)
       //**  jetzt im AfterScroll
       {
       SBT_LiefInternetLink.Enabled := false;
       LinkNr := AQY_LieferantHYPERLINK.AsInteger;
       if GetWriteInternetLinkData(false,LinkNr, s) then
          begin
               SBT_LiefInternetLink.Hint := s;
               SBT_LiefInternetLink.Enabled := true;
          end
       else
          begin
               SBT_LiefInternetLink.Hint := rs_LV_LinkHint;
               if ((Erfassen) or (Aendern)) then
                  SBT_LiefInternetLink.Enabled := true;
          end; //** if GetWriteInternetLinkData(false,LinkNr, s) then
       }
       //** Änderung 5)

       SetAllHideBestandEdits;

finally
   AQY_ArtikelStamm.EnableControls;

   //** Änderung 11) BarmanagerUpdate raus (weil kein unterschied)
   //** und disablecontrols für Lager,Miniset und Lieferanten, weil sonst hier
   //** der Afterscroll nicht feuert

   //AQY_Lager.EnableControls;
   AQY_CHLager.EnableControls;
   //AQY_Lieferant.EnableControls;
   AQY_Zusatztexte.EnableControls;
   AQY_FremdTexte.EnableControls;
   AQY_DVKalk.EnableControls;
   //AQY_MiniSet.EnableControls;
   AQY_Preise.EnableControls;
   AQY_SumBestand.EnableControls;
   AQY_Umsatz.EnableControls;
   AQY_Bild.EnableControls;
   AQY_DVFehlmengen.EnableControls;
   AQY_DVRueckstaende.EnableControls;
   AQY_Dispo.EnableControls;
   AQY_IBExist.EnableControls;
   AQY_GetLamps.EnableControls;
   AQY_GetXRef.EnableControls;
   AQY_Badges.EnableControls;
   AQY_Divers.EnableControls;
   AQY_HinweiseExists.EnableControls;
   AQY_SoPreise.EnableControls;

  // BMG_DllForm.EndUpdate(false);
   LYC_Lagerverwaltung.EndUpdate();

   //LockWindowUpdate(0); //** Auf alle Fälle zum Neuzeichnen freigeben
   //** Braucht es mmn. nicht mehr wegen En-/DisableControls *OB
   {GRD_LagerDBView.EndUpdate;
   GRD_ChaotLagerView.EndUpdate;
   GRD_MinisetView.EndUpdate;
   GRD_ChaotLagerView.EndUpdate; }

   if DTS_Open then
      if AQY_ArtikelStammARTNR.AsString > '' then
         if not ModalCallActive then
           CheckHinweise(true);
end; //** try..finally


end; //** procedure ReadAllData


(******************************************************************************)
(***     SBT_Dispo: OnClick                                                 ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_DispoAllClick(Sender: TObject);
var
   FSichtenDispoParams : TSichtenDispoParams;

begin

inherited;
if ModalCallActive then
   Exit;

with FSichtenDispoParams do
     try
        AArtNr := TrimRight(AQY_ArtikelStammARTNR.AsString);
        AKB := AQY_ArtikelStammKB.AsString;
        if ((Sender = SBT_DispoSingle) or (Sender = MNI_DispoSingle)) then
           begin
                AAllFlag := false;
                ALager := AQY_LagerLAGER.AsInteger;
           end
        else
           begin
                AAllFlag := true;
                ALager := 0;
           end; //** if ((Sender = SBT_DispoSingle) or (Sender = MNI_DispoSingle)) then
        ABestellt := 0.0;
        ARueckstand := 0.0;
        AForm:= Self;

        try
           ModalCallActive := true;
           Call (dnDobosCommon, 'sichtendispo', @FSichtenDispoParams);
        finally
           ModalCallActive := false;
        end; //** try..finally

     except
     end; //** with FSichtenDispoParams do

end; //** procedure SBT_DispoClick


(******************************************************************************)
(***   MNI_Hilfe: OnClick                                                   ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_KontextHilfeClick(Sender: TObject);
begin

Application.HelpContext(02140100);

end; //** procedure MNI_HilfeClick


(******************************************************************************)
(***      AQY_ArtikelStamm: OnAfterPost                                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_ArtikelStammAfterPost(DataSet: TDataSet);
var
   mMandant : integer;

begin

inherited;
//** Änderung 9)
//** führt zu 500 ms verbesserung (100 statt 600)
//** ist EIGTL. auch nicht nötig. aber gut möglich, dass
//** ein paar Änderungen, die nicht gleich sichtbar sind
//** nicht gleich angezeigt werden - optimalerweise diese
//** einzeln abhandeln, wenn es denn wirklich welche gibt
//BTN_NavRefreshClick(nil);
//** Änderung 9)

mMandant := 2;
if GetLinkagePointer^.MRecord.Mandant = 2 then
   mMandant := 1;

//** 02.06.2017 SM - In M02 kein Datenaustausch bei Artikeln mit "M" beginnend  --> jetzt doch wieder 16.11.2020 PI
//** 17.05.2019 SM - In M02 kein Datenaustausch bei Artikeln mit "T" beginnend
//** 08.01.2024 PI - In M03 kein Datenaustausch bei Artikeln mit "T" beginnend
if (GetLinkagePointer^.Serial = KSerial_Yamaichi) then
   if (GetLinkagePointer^.MRecord.Mandant = 2) or (GetLinkagePointer^.MRecord.Mandant = 3) then
      //if ((Trim(EDT_ArtNr.Text) >= 'M') and (Trim(EDT_ArtNr.Text) < 'N')) or   //** 16.11.2020 PI
      if ((Trim(EDT_ArtNr.Text) >= 'T') and (Trim(EDT_ArtNr.Text) < 'U')) then   //** 17.05.2019 SM
         Exit;

if ((GetLinkagePointer^.Serial = KSerial_Yamaichi) and
    ((GetLinkagePointer^.MRecord.Mandant = 1) or (GetLinkagePointer^.MRecord.Mandant = 2))) then
   //** 06.11.2019 SM - jetzt ohne Abfrage- immer speichern laut Mail vom 05.11.2019 von Frau König
   begin
        if not ArtikelinM02Yamaichi then
           ShowMessage(Format(rs_LV_DatenNichtGespeichert,[mMandant]));

        //** Nur von M01+M02 nach M03, nicht rueckwaerts //** 08.01.2024 PI
        if not ArtikelinM03Yamaichi then                 //** 08.01.2024 PI
           ShowMessage(Format(rs_LV_DatenNichtGespeichert,[3]));
   end;
   {06.11.2019 SM
   if ((YamaichiAntwort = 0) or ((YamaichiAntwort <> 0) and (Trim(EDT_ArtNr.Text) <> YamaichiArtNr))) then
      if (MessageDlg(Format(rs_LV_YamaichiFrageM02,[mMandant]), mtConfirmation,[mbYes,mbNo],0)) = mrYes then
         begin
              YamaichiAntwort := 1;
              YamaichiArtNr   := Trim(EDT_ArtNr.Text);
              if not ArtikelinM02Yamaichi then
                 ShowMessage(Format(rs_LV_DatenNichtGespeichert,[mMandant]))
              else
                 ShowMessage(Format(rs_LV_Datengespeichert,[mMandant]))
         end //** if relevant
      else
         begin
              YamaichiAntwort := 2;
              YamaichiArtNr   := Trim(EDT_ArtNr.Text);
         end //** not relevant
   else
      begin
           if ((YamaichiAntwort = 1) and (Trim(EDT_ArtNr.Text) = YamaichiArtNr)) then
             if not ArtikelinM02Yamaichi then
                ShowMessage(Format(rs_LV_DatenNichtGespeichert,[mMandant]))
             else
                ShowMessage(Format(rs_LV_Datengespeichert,[mMandant]))
      end; //** else YamaichiAntwort = 0
   }

//** AP anlegen von Std-AP 'XXX-99999' nur in Mandant 1
if ((IsYamaichiM01) and (Erfassen)) then
   if AQY_ArtikelStammC9.AsString = 'X' then
      if not CopySTDAP(Trim(EDT_ArtNr.Text)) then
         ShowMessage(rs_LV_APnichtangelegt);

if ((GetLinkagePointer^.Serial = KSerial_Famec) and
    ((GetLinkagePointer^.MRecord.Mandant = 1) or (GetLinkagePointer^.MRecord.Mandant = 2))) then
   if ((EDT_C10.AsString = 'S') and
       ((FamecAntwort = 0) or ((FamecAntwort <> 0) and (Trim(EDT_ArtNr.Text) <> FamecArtNr)))) then
      if (MessageDlg(Format(rs_LV_YamaichiFrageM02,[mMandant]), mtConfirmation,[mbYes,mbNo],0)) = mrYes then
         begin
              FamecAntwort := 1;
              FamecArtNr   := Trim(EDT_ArtNr.Text);
              if not ArtikelinM02Famec then
                 ShowMessage(Format(rs_LV_DatenNichtGespeichert,[mMandant]))
              else
                 ShowMessage(Format(rs_LV_Datengespeichert,[mMandant]))
         end  //** if (MessageDlg(Format(rs_LV_YamaichiFrageM02,[mMandant]), mtConfirmation,[mbYes,mbNo],0)) = mrYes then
      else
         begin
              FamecAntwort := 2;
              FamecArtNr   := Trim(EDT_ArtNr.Text);
         end  //** else: if (MessageDlg(Format(rs_LV_YamaichiFrageM02,[mMandant]), mtConfirmation,[mbYes,mbNo],0)) = mrYes then
   else
      begin
           if ((FamecAntwort = 1) and (Trim(EDT_ArtNr.Text) = FamecArtNr)) then
              if not ArtikelinM02Famec then
                 ShowMessage(Format(rs_LV_DatenNichtGespeichert,[mMandant]))
              else
                 ShowMessage(Format(rs_LV_Datengespeichert,[mMandant]))
      end; //** else: if ((EDT_C10.AsString = 'S') and ...

if ((GetLinkagePointer^.Serial = KSerial_Plaschka) and
    ((GetLinkagePointer^.MRecord.Mandant = 1) or (GetLinkagePointer^.MRecord.Mandant = 2))) then
   if ((FamecAntwort = 0) or ((FamecAntwort <> 0) and (Trim(EDT_ArtNr.Text) <> FamecArtNr))) then
      if (MessageDlg(Format(rs_LV_YamaichiFrageM02,[mMandant]), mtConfirmation,[mbYes,mbNo],0)) = mrYes then
         begin
              FamecAntwort := 1;
              FamecArtNr   := Trim(EDT_ArtNr.Text);
              if not ArtikelinM02Plaschka then
                 ShowMessage(Format(rs_LV_DatenNichtGespeichert,[mMandant]))
              else
                 ShowMessage(Format(rs_LV_Datengespeichert,[mMandant]))
         end //** if (MessageDlg(Format(rs_LV_YamaichiFrageM02,[mMandant]), mtConfirmation,[mbYes,mbNo],0)) = mrYes then
      else
         begin
              FamecAntwort := 2;
              FamecArtNr   := Trim(EDT_ArtNr.Text);
         end  //** else: if (MessageDlg(Format(rs_LV_YamaichiFrageM02,[mMandant]), mtConfirmation,[mbYes,mbNo],0)) = mrYes then
   else
      begin
           if ((FamecAntwort = 1) and (Trim(EDT_ArtNr.Text) = FamecArtNr)) then
              if not ArtikelinM02Plaschka then
                 ShowMessage(Format(rs_LV_DatenNichtGespeichert,[mMandant]))
              else
                 ShowMessage(Format(rs_LV_Datengespeichert,[mMandant]))
      end;  //** else: if ((FamecAntwort = 0) or ...

//** Klotz Übertragung von Mandant 1 nach Mandant 4
if ((GetLinkagePointer^.Serial = KSerial_Klotz) and (GetLinkagePointer^.MRecord.Mandant = 1)
   and  (EDT_C7.Text = 'U') and (CheckIfM04ExistsKlotz)) then
   if ((FamecAntwort = 0) or ((FamecAntwort <> 0) and (Trim(EDT_ArtNr.Text) <> FamecArtNr))) then
      if (MessageDlg(Format(rs_LV_YamaichiFrageM02,[4]), mtConfirmation,[mbYes,mbNo],0)) = mrYes then
         begin
              FamecAntwort := 1;
              FamecArtNr   := Trim(EDT_ArtNr.Text);
              if not ArtikelinM04Klotz then
                 MessageDlg(Format(rs_LV_DatenNichtGespeichert,[4]),mtError,[mbOK],0)
              else
                 MessageDlg(Format(rs_LV_Datengespeichert,[4]),mtInformation,[mbOK],0);
         end //** if (MessageDlg(Format(rs_LV_YamaichiFrageM02,[mMandant]), mtConfirmation,[mbYes,mbNo],0)) = mrYes then
      else
         begin
              FamecAntwort := 2;
              FamecArtNr   := Trim(EDT_ArtNr.Text);
         end  //** else: if (MessageDlg(Format(rs_LV_YamaichiFrageM02,[mMandant]), mtConfirmation,[mbYes,mbNo],0)) = mrYes then
   else
      begin
           if ((FamecAntwort = 1) and (Trim(EDT_ArtNr.Text) = FamecArtNr)) then
              if not ArtikelinM04Klotz then
                 MessageDlg(Format(rs_LV_DatenNichtGespeichert,[4]),mtError,[mbOK],0)
              else
                 MessageDlg(Format(rs_LV_Datengespeichert,[4]),mtInformation,[mbOK],0);
      end;  //** else: if ((FamecAntwort = 0) or ...

UpdateAenderungsdatum(AQY_ArtikelStammARTNR.AsString);

end; //** procedure AQY_ArtikelStammAfterPost


(******************************************************************************)
(***      UpdateDavosBez                                                    ***)
(******************************************************************************)

procedure TFRM_DobosLV.UpdateDavosBez;
var
   mKalkKZ   : Char;
   mVEinheit : Currency;
   bMe,
   pMe : string;

   mKalkKZ_VK : Char;

begin

EDT_EK.Hint := '';
EDT_DurchEK.Hint := '';

try
   //** Änderung 12)
   LYC_Lagerverwaltung.BeginUpdate;
   if AQY_ArtikelStamm.Active then
      with GetLinkagePointer^ do
           begin
                LYG_Preise.CaptionOptions.ImageIndex        := -1;
                LYG_Kalkulation.CaptionOptions.ImageIndex   := -1;
                LYG_EKGrundkosten.CaptionOptions.ImageIndex := -1;
                LYG_VKGrundkosten.CaptionOptions.ImageIndex := -1;

                if Module[imLZ] then
                   begin
                        mVEinheit := AQY_ArtikelStammV_EINHEIT.AsCurrency;
                        try
                           bMe := BP_BasisText(AQY_ArtikelStammB_BASIS.AsInteger);
                        except
                           bMe := '';
                        end;
                        try
                           pMe := BP_BasisText(AQY_ArtikelStammP_BASIS.AsInteger);
                        except
                           pMe := '';
                        end;

                        if ((mVEinheit <> 1.0) and (mVEinheit <> 0.0)) then
                           begin
                                EDT_EK.Hint := Format(rs_LV_fmtPreis,[rs_LV_EK,
                                                                      pME,
                                                                      Trim(Format('%13.2n',[AQY_ArtikelStammEK.AsCurrency])),
                                                                      rs_LV_EK,
                                                                      bME,
                                                                      Trim(Format('%13.4n',[mVEinheit])),
                                                                      Trim(Format('%13.2n',[(AQY_ArtikelStammEK.AsCurrency * mVEinheit)]))
                                                                      ]);
                                EDT_DurchEK.Hint := Format(rs_LV_fmtPreis,[rs_LV_DurchEK,
                                                                           pME,
                                                                           Trim(Format('%13.2n',[AQY_ArtikelStammDURCH_EK.AsCurrency])),
                                                                           rs_LV_DurchEK,
                                                                           bME,
                                                                           Trim(Format('%13.4n',[mVEinheit])),
                                                                           Trim(Format('%13.2n',[(AQY_ArtikelStammDURCH_EK.AsCurrency * mVEinheit)]))
                                                                           ]);
                           end; //** if ((mVEinheit <> 1.0) and (mVEinheit <> 0.0))

                   end; //** if Module[imLZ]

                if (Module[imDavos]) then
                   begin
                        mKalkKZ_VK := Get1StChar(AQY_ArtikelStammKALK_KZ_VK.AsString);
                        if (mkalkKz_VK = 'S') then
                            begin
                                 LYG_Preise.CaptionOptions.ImageIndex := 0;
                            end; //** if (mkalkKz_VK = 'S') then

                        if (mkalkKz_VK = 'E') then
                            begin
                                 LYG_Kalkulation.CaptionOptions.ImageIndex   := 0;
                                 LYG_EKGrundkosten.CaptionOptions.ImageIndex := 0;
                            end; //** if (mkalkKz_VK = 'E') then

                        if (mkalkKz_VK = 'V') then
                            begin
                                 LYG_Kalkulation.CaptionOptions.ImageIndex   := 0;
                                 LYG_VKGrundkosten.CaptionOptions.ImageIndex := 0;
                            end; //** if (mkalkKz_VK = 'E') then

                   end; //** if (Module[imDavos]) then
           end; //** with GetLinkagePointer^ do
finally
   LYC_Lagerverwaltung.EndUpdate();
   //** Änderung 12)
end; //** try..finally
end; //** procedure UpdateDavosBez;


(******************************************************************************)
(***     GetVariantenNummer                                                 ***)
(******************************************************************************)

function TFRM_DobosLV.GetVariantenNummer(const AArtNr: string; ASilentMode: boolean): integer;

                  (************************************************************)
                  (***      lokale function AskVariante                     ***)
                  (************************************************************)
                   function AskVariante : integer;
                   var
                      fVariante : Variant;

                   begin

                   result := 0;
                   fVariante := NULL;
                   fVariante := GetListItem(lkVA, nil, Self, 0,0,rs_LV_AuswahlEinerVariante, AArtNr);
                   if (VarIsNull(fVariante)) then
                      result := -1
                   else
                      result := fVariante;

                   end; //** lokale function AskVariante

(******************************************************************************)
(***  Start der function GetVariantenNummer                                 ***)
(******************************************************************************)
begin

result := 0;
with AQY_Divers do
     try
        try
           if Active then
              Close;
           Connection := GetDobosADB;
           SQL.Clear;
           SQL.Add('SELECT VARIANTE, BEMERKUNG, ERSTELLER, TYP FROM SL_KOPF (NOLOCK) '
                  +'WHERE ARTNR = '''+SQLTextString(AArtNr)+''' ORDER BY ARTNR, VARIANTE ');
           UCOpenSQL(AQY_Divers);
           if (((ASilentMode) and (RecordCount > 1)) or
               ((not ASilentMode) and (RecordCount > 0))) then
               result := AskVariante;
           Close;
        except
        end; //** try..except
     finally
        if Active then
           Close;
     end; //** try..finally

end; //** function GetVariantenNummer


(******************************************************************************)
(***                      GetZuschlaegeHints                                ***)
(******************************************************************************)

procedure TFRM_DobosLV.GetZuschlaegeHints;
begin

EDT_ZuschlagArt1.Hint := rs_LV_undefiniert;
EDT_ZuschlagArt2.Hint := rs_LV_undefiniert;
EDT_ZuschlagArt3.Hint := rs_LV_undefiniert;

if ((AQY_LieferantZUSCHLAGSART1.AsInteger <> 0)  or
    (AQY_LieferantZUSCHLAGSART2.AsInteger <> 0)  or
    (AQY_LieferantZUSCHLAGSART3.AsInteger <> 0))  then
   begin
        with AQY_Divers do
             try
                with AQY_Divers do
                     begin
                          if AQY_LieferantZUSCHLAGSART1.AsInteger <> 0 then
                             begin
                                  if Active then
                                     Close;
                                  SQL.Clear;
                                  SQL.Add(' SELECT TEXT FROM SCHLUESSEL WHERE ART = ''ZU'' AND '
                                          +' NUMMER = ' +IntToStr(AQY_LieferantZUSCHLAGSART1.AsInteger));
                                  UCOpenSQL(AQY_Divers);
                                  EDT_ZuschlagArt1.Hint := Fields[0].AsString;
                             end //** if ZuschlagArt1Nr <> 0 then
                          else
                             begin
                                  EDT_ZuschlagArt1.Hint := rs_LV_undefiniert;
                             end; //** else

                          if AQY_LieferantZUSCHLAGSART2.AsInteger <> 0 then
                             begin
                                  if Active then
                                     Close;
                                  SQL.Clear;
                                  SQL.Add(' SELECT TEXT FROM SCHLUESSEL WHERE ART = ''ZU'' AND '
                                          +' NUMMER = ' +IntToStr(AQY_LieferantZUSCHLAGSART2.AsInteger));
                                  UCOpenSQL(AQY_Divers);
                                  EDT_ZuschlagArt2.Hint := Fields[0].AsString;
                             end //** if ZuschlagArt2Nr <> 0 then
                          else
                             begin
                                  EDT_ZuschlagArt2.Hint := rs_LV_undefiniert;
                             end; //** else

                          if AQY_LieferantZUSCHLAGSART3.AsInteger <> 0 then
                             begin
                                  if Active then
                                     Close;
                                  SQL.Clear;
                                  SQL.Add(' SELECT TEXT FROM SCHLUESSEL WHERE ART = ''ZU'' AND '
                                          +' NUMMER = ' +IntToStr(AQY_LieferantZUSCHLAGSART3.AsInteger));
                                  UCOpenSQL(AQY_Divers);
                                  EDT_ZuschlagArt3.Hint := Fields[0].AsString;
                             end //** if ZuschlagArt2Nr <> 0 then
                          else
                             begin
                                  EDT_ZuschlagArt3.Hint := rs_LV_undefiniert;
                             end; //** else


                     end; //** with AQY_Divers do

             finally
                if Active then
                   Close;
             end; //** try..finally

   end; //** if <> 0

end; //** procedure GetZuschlaegeHints


(******************************************************************************)
(***                    GetRevNummer                                        ***)
(******************************************************************************)

function TFRM_DobosLV.GetRevNummer(const AArtNr: string; ASilentMode: boolean): string;
                  (************************************************************)
                  (***      lokale function AskRev                          ***)
                  (************************************************************)
                   function AskRev : string;
                   var
                      fRev : Variant;

                   begin

                   result := '';
                   fRev := NULL;
                   fRev := GetListItem(lkRev, nil, Self, 0,0,rs_LV_AuswahleinerRev, AArtNr);
                   if (VarIsNull(fRev)) then
                      result := 'ungueltig'
                   else
                      result := fRev;

                   end; //** lokale function AskVariante

(******************************************************************************)
(***  Start der function GetRevNummer                                       ***)
(******************************************************************************)
begin

result := '';
with AQY_Divers do
     try
        try
           if Active then
              Close;
           Connection := GetDobosADB;
           SQL.Clear;
           SQL.Add('SELECT REVISION, BEMERKUNG, ERSTELLER, TYP FROM DV_STD_KOPF (NOLOCK) '
                  +'WHERE HAUPT_ARTNR = '''+SQLTextString(AArtNr)+''' ORDER BY HAUPT_ARTNR, REVISION ');
           UCOpenSQL(AQY_Divers);
           if Recordcount = 1 then
              result := 'NurEinAP'
           else
              if (((ASilentMode) and (RecordCount > 1)) or
                  ((not ASilentMode) and (RecordCount > 0))) then
                  result := AskRev;
           Close;
        except
        end; //** try..except
     finally
        if Active then
           Close;
     end; //** try..finally

end; //** procedure GetRevNummer


(******************************************************************************)
(***   !SPosMain (ersetzt Tabellennavigator)                                ***)
(******************************************************************************)

function TFRM_DobosLV.PosMain(const AArtNr    : string;
                              const AString   : string;
                              const ARichtung : TMainPos;
                              const AExcact   : boolean)
                              : boolean;

var
   s        : string;
   fTextKey,
   fKeyFeld,
   fOrder   : string;
   tim      : integer;
   mKeyLength : string;

const
     //** LengthOfArtNr
     //** hier Konstante kann nicht variabel sein
     mMasterKeyLength = '30';
     mMasterKey = 'ARTNR';
     fmtFLS  = 'SELECT TOP 1 '+mMasterKey+' FROM ARTIKEL_STAMM ';
     fmtS    = 'WHERE STATUS < 9 AND CONVERT(CHAR(%s), %s)+CONVERT(CHAR('+mMasterKeyLength+'),'+mMasterKey+') %s ''%s'' ';
     fmtMKey = 'WHERE '+mMasterKey+' %s ''%s'' ';

     fmtAsc  = 'ORDER BY %s ASC, '+mMasterKey+' ASC ';
     fmtDesc = 'ORDER BY %s DESC, '+mMasterKey+' DESC ';

begin

result := false;
tim := 0;
if not DTS_Open then
   OpenDataSources;

while ((tim < 10000) and (not DTS_Open)) do
      begin
           inc(tim);
           WaitNTicks(500);
      end; //** while ((tim < 10000) and (not DTS_Open)) do

case SortOrder of
     asArtNr  : mKeyLength := IntToStr(LengthOfArtNr);
     asKB     : mKeyLength := '10';
     asBN     : mKeyLength := '25';
     asZN     : mKeyLength := '25';
     asBez_1  : mKeyLength := '30';
end; //** case SortOrder of

fTextKey := AString;
shbExpandString(fTextKey, StrToInt(mKeyLength), ' ', false);
fTextKey := fTextKey + AArtNr;

case SortOrder of
     asArtNr  : fKeyFeld := mMasterKey;
     asKB     : fKeyFeld := 'KB';
     asBN     : fKeyFeld := 'BN';
     asZN     : fKeyFeld := 'ZN';
     asBez_1  : fKeyFeld := 'BEZ_1';
end; //** case SortOrder of

if SortOrder = asArtNr then
   if ARichtung in [mpLast, mpPrior] then
      fOrder := 'ORDER BY ARTNR DESC '
   else
      fOrder := 'ORDER BY ARTNR ASC '
else
   if ARichtung in [mpLast, mpPrior] then
      fOrder := Format(fmtDesc,[fKeyFeld])
   else
      fOrder := Format(fmtAsc,[fKeyFeld]);

if SortOrder = asArtNr then
   case ARichtung of
        mpExact : s := fmtFLS + Format(fmtMKey, ['=', SQLTextString(AArtNr)]);
        mpFirst : s := fmtFLS + ' WHERE STATUS < 9 ';
        mpLast  : s := fmtFLS + ' WHERE STATUS < 9 ';
        mpPrior : s := fmtFLS + Format(fmtMKey, ['<', SQLTextString(AArtNr)]) + ' AND STATUS < 9 ';
        mpNext  : s := fmtFLS + Format(fmtMKey, ['>', SQLTextString(AArtnr)]) + ' AND STATUS < 9 ';
   end //** case ARichtung of
else
   case ARichtung of
        mpExact : s := fmtFLS + Format(fmtMKey, ['=', SQLTextString(AArtNr)]);
        mpFirst : s := fmtFLS + ' WHERE STATUS < 9 ';
        mpLast  : s := fmtFLS + ' WHERE STATUS < 9 ';
        mpPrior : s := fmtFLS + Format(fmtS,[mKeyLength, fKeyFeld, '<', SQLTextString(fTextKey)]);
        mpNext  : s := fmtFLS + Format(fmtS,[mKeyLength, fKeyFeld, '>', SQLTextString(fTextKey)]);
   end; //** case ARichtung of

s := s + fOrder;

with AQY_Nav do
     begin
          try
             try
                if Active then
                   Close;
                SQL.Clear;
                SQL.Add(s);
                UCOpenSQL(AQY_Nav);
                MEOF := false;
                MBOF := false;
                if ARichtung = mpFirst then
                   MBOF := true
                else
                   if ARichtung = mpLast then
                      MEOF := true;

                if not EOF then
                   begin
                        CurrArtNr := Fields[0].AsString;
                        result := true;
                   end //** if not EOF
                else
                   if ARichtung = mpPrior then
                      MBOF := true
                   else
                      if ARichtung = mpNext then
                         MEOF := true;

                if not result then
                   UpdateButtons;

             except
                on E:Exception do
                   begin
                        result := False;
                        ShowMessage(E.Message);
                   end; //** on E:Exception do
             end; //** try..except

          finally
                if Active then
                   Close;
          end; //** try..finally

     end; //** with AQY_Divers do

if (not result) then
   Exit;

ReadAllData;
UpdateButtons;

end; //** procedure PosMain


(******************************************************************************)
(***      SetAbbButtonVisible                                               ***)
(******************************************************************************)

procedure TFRM_DobosLV.SetAbbButtonVisible(const AVisible: boolean);
begin
//BTN_DBNavAbbrechen.Enabled := AVisible;
//BTN_DBNavPost.Enabled := AVisible;

end; //** procedure SetAbbButtonVisible


(******************************************************************************)
(***      AQY_ArtikelStamm: OnPostError                                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_ArtikelStammPostError(DataSet: TDataSet; E: EDatabaseError; var Action: TDataAction);

begin

inherited;
if IsMSSQLRecordHasChanged(E.Message, TADOQuery(DataSet).Connection) then
   begin
        ShowMessage(GetStdRes(frs_STDErrMsgRecChanged));
        BTN_NavRefreshClick(BTN_NavRefresh);
        Action := daAbort;
   end
else
  raise EDataBaseError.Create(E.Message);

end; //** procedure AQY_ArtikelStammPostError


(******************************************************************************)
(***      AQY_Lieferant: OnAfterOpen                                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_LieferantAfterOpen(DataSet: TDataSet);
begin

inherited;
AQY_Lieferant.Properties['Unique Table'].Value := 'ARTIKEL_LIEFERANT';
UpdateLieferantenCount;
ReadRaster(AQY_LieferantRASTER.AsInteger, false, true, true);

end; //** procedure AQY_LieferantAfterOpen


(******************************************************************************)
(***     !SRecentList-Funktionen                                            ***)
(******************************************************************************)
(******************************************************************************)
(***     !SReadWriteRecent                                                  ***)
(******************************************************************************)

function TFRM_DobosLV.ReadWriteRecent(AWrite, AReset: boolean): boolean;
var
   ARootKey   : HKEY;
   APath      : string;
   AKey       : string;
   ASize      : integer;

begin

result := true;

try
   ARootKey := HKEY_CURRENT_USER;
   APath := Registry_DobosPfad+'\Lager';
   AKey := Format(GetLinkagePointer^.MSSQL_SERVERNAME+'\RecentListAb111\M%2.2d',[GetLinkagePointer^.MRecord.Mandant]);
   ASize := SizeOf(RecentList);
   if AReset then
      FillChar(RecentList, SizeOf(RecentList), #0);

   if ((not AWrite) and (not AReset)) then
      begin
           if not ReadWriteRegistry(rdBinary, false, ARootKey, APath, AKey, RecentList, ASize) then
              if not ReadWriteRegistry(wrBinary, true, ARootKey, APath, AKey, RecentList, ASize) then
                 raise EAbort.Create('');
      end
   else
      if not ReadWriteRegistry(wrBinary, true, ARootKey, APath, AKey, RecentList, ASize) then
         raise EAbort.Create('');

except
   on E:Exception do
      if not (IsSpace(E.Message)) then
         ShowMessage(E.Message);
end; //** try..except


end; //** function ReadWriteRecent


(******************************************************************************)
(***      !SBereinigeRecentList                                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.BereinigeRecentList;
var
   i : integer;

begin

with AQY_Divers do
     try
        if Active then
           Close;
        Connection := GetDobosADB;
        SQL.Clear;
     except
        on E:Exception do
           ShowMessage(E.Message);
     end; //** try..except

for i := 0 to High(RecentList) do
    with RecentList[i] do
         begin
              if IsSpace(ARTNR) then
                 Continue;
              with AQY_Divers do
                   try
                      if Active then
                         Close;
                      Connection := GetDobosADB;
                      SQL.Clear;
                      SQL.Add('SELECT count(*) FROM ARTIKEL_STAMM '
                             +'WHERE ARTNR = '''+SQLTextString(ARTNR)+''' ');
                      UCOpenSQL(AQY_Divers);
                      if Fields[0].AsInteger = 0 then
                         FillChar(RecentList[i], SizeOf(TRecentLAListItem), #0);
                      Close;
                   except
                         FillChar(RecentList[i], SizeOf(TRecentLAListItem), #0);
                   end; //** try..except
         end; //** with RecentList[i] do

RecentListQuickSort(Low(RecentList), High(RecentList), false);
ReadWriteRecent(true, false);

end; //** procedure BereinigeRecentList


(******************************************************************************)
(*** Sortierroutine                                                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.RecentListQuickSort(pLow, pHigh: Integer; Asc: Boolean);
var
  Lo,
  Hi:Integer;
  mid,
  buf:TRecentLAListItem;

          (********************************************************************)
          (***      lokale function CompareItem                             ***)
          (********************************************************************)
           function CompareItem(lpSource,lpDest:TDateTime):Integer;
           begin

           result := 0;
           if lpSource > lpDest then
              result := 1
           else
              if lpSource < lpDest then
                 result := -1;

           end;  //** lokale function CompareItem


          (********************************************************************)
          (***      lokale procedure IncAsc                                 ***)
          (********************************************************************)
           procedure IncAsc;
           begin
           while CompareItem(RecentList[Lo].DATUM,mid.DATUM) < 0 do
                 Inc(Lo);
           while CompareItem(RecentList[Hi].DATUM,mid.DATUM) > 0 do
                 Dec(Hi);
           end; //** local procedure IncAsc

          (********************************************************************)
          (***      lokale procedure IncDesc                                ***)
          (********************************************************************)
           procedure IncDesc;
           begin

           while CompareItem(RecentList[Lo].DATUM,mid.DATUM) > 0 do
                 Inc(Lo);
           while CompareItem(RecentList[Hi].DATUM,mid.DATUM) < 0 do
                 Dec(Hi);
           end; //** local procedure IncDesc

(******************************************************************************)
(***    Start der procedure RecentListQuickSort                             ***)
(******************************************************************************)
begin

repeat
      Lo:= pLow;
      Hi:= pHigh;
      mid:= RecentList[(pLow+pHigh)shr 1];
      repeat
            if Asc then
              IncAsc
            else
              IncDesc;
            if Lo <= Hi then
               begin
                    Buf:= RecentList[Lo];
                    RecentList[Lo]:= RecentList[Hi];
                    RecentList[Hi]:= Buf;
                    Inc(Lo);
                    Dec(Hi);
               end; //** if Lo <= Hi

      until Lo > Hi;

      if pLow < Hi then
         RecentListQuickSort(plow,hi,Asc);
      pLow:= Lo;

until Lo >= pHigh;

end; //** procedure RecentListQuickSort


(******************************************************************************)
(***     !SUpdateRecentList                                                 ***)
(******************************************************************************)

function TFRM_DobosLV.UpdateRecentList: boolean;
var
   fi,
   i : integer;

begin


fi := -1;
for i := 0 to High(RecentList) do
    with RecentList[i] do
         if (Trim(ARTNR) = Trim(EDT_ArtNr.Text)) then
            begin
                 fi := i;
                 Break;
            end; //** if (Trim(ARTNR) = Trim(EDT_ArtNr.Text))

if fi < 0 then
   begin
        fi := High(RecentList);
        for i := 0 to High(RecentList) do
            with RecentList[i] do
                 if (isSpace(ARTNR)) then
                     begin
                          fi := i;
                          Break;
                     end; //** if (isSpace(ARTNR))
   end; //** if fi < 0

with RecentList[fi] do
     begin
          DATUM  := now;
          ARTNR  := Trim(EDT_ArtNr.Text);
          BEZ_1  := Trim(EDT_BEZ_1.Text);
          BEZ_2  := Trim(EDT_BEZ_2.Text);
          ZN     := Trim(EDT_ZN.Text);
     end; //** with RecentList[fi]

RecentListQuickSort(Low(RecentList), High(RecentList), false);
ReadWriteRecent(true, false);

end; //** function UpdateRecentList


(******************************************************************************)
(***      MNI_LookUp: OnClick                                               ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_LookUpClick(Sender: TObject);
begin

inherited;
EDT_ArtNr.OnLookUpClick(EDT_ArtNr);

end; //** procedure MNI_LookUpClick


(******************************************************************************)
(***      MNI_CallRecentList: OnClick                                       ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_CallRecentListClick(Sender: TObject);
var
   fResult   : Variant;
   i         : integer;

begin

inherited;

if not self.WindowReady then
   Exit;

fResult := NULL;
fResult := GetListItem(lkRecentLA, nil, Self, 1, Integer(@RecentList));

if VarIsNull(fResult) then
   Exit;
i := fResult+1;
if ((i > 0) and (i < 21)) then
   with RecentList[i-1] do
        PosMain(ARTNR, '', mpExact, false);

end; //** procedure MNI_CallRecentListClick


(******************************************************************************)
(***      MNI_DeleteRecent: OnClick                                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_DeleteRecentClick(Sender: TObject);
begin

inherited;

if (MessageDlg(rs_LV_QDeleteRecentList, mtConfirmation,[mbYes,mbNo],0)) <> mrYes then
   Exit;

FillChar(RecentList, SizeOf(RecentList), #0);
RecentListQuickSort(Low(RecentList), High(RecentList), false);
ReadWriteRecent(true, false);

end; //** procedure MNI_DeleteRecentClick


(******************************************************************************)
(***      MNI_AddRecent: OnClick                                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_AddRecentClick(Sender: TObject);
begin

inherited;
if not IsSpace(EDT_ArtNr.Text) then
   UpdateRecentList;

end; //** procedure MNI_AddRecentClick


(******************************************************************************)
(***      AQY_Lager: OnCalcFields                                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_LagerCalcFields(DataSet: TDataSet);
var
   s : string;
   B : boolean;
   SLR        : TSchlRec;

begin

inherited;
s := rs_LV_kein;
b := false;
AQY_LagerGESPERRT.AsInteger := 0;
SLR := CallSys('LG',AQY_LagerLAGER.AsInteger, B);
if (B) then
   begin
        s := SLR.TEXT;
        if SLR.EU_LAND then
           AQY_LagerGESPERRT.AsInteger := 1;
   end;

//** ... Eine aus mehreren Schritten...
if Length(s) > 35 then    //** 28.03.2017 SM vorher: 30 - Biogarten Charge + MHD
   s := Copy(s,1,35);     //** 28.03.2017 SM vorher: 30

AQY_LagerLAGERNAME.AsString := s;

end; //** procedure AQY_LagerCalcFields


(******************************************************************************)
(***      ACT_MakeAG: OnExecute                                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.ACT_MakeAGExecute(Sender: TObject);
begin

inherited;

MakeAUBEAGAF('G');

end; //** procedure ACT_MakeAGExecute


(******************************************************************************)
(***      ACT_MakeAU: OnExecute                                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.ACT_MakeAUExecute(Sender: TObject);
begin

inherited;

MakeAUBEAGAF('A');

end; //** procedure ACT_MakeAUExecute


(******************************************************************************)
(***      MNI_MakeAUMany: OnClick                                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.ACT_MakeAUManyClick(Sender: TObject);
var
   i     : integer;
   fArtNr: TUCStringArtNr;
   x     : PLagerMemKey;
   AList : TStringList;

begin

inherited;

if ((KeyList.Count < 1) or (KeyList.Count > 100)) then
   Exit;

try
   AList := TStringList.Create;
   for i := 0 to KeyList.Count -1 do
       begin
            x := KeyList.items[i];
            fArtNr := x.MArtNr;
            AList.Add(fArtNr);
       end;
    try
       ClipBoard.Open;
       Clipboard.AsText := AList.Text;
    finally
       Clipboard.Close;
    end; //** try..finally
finally
   FreeAndNil(AList);
end; //** outer try..finally

if ((Sender = ACT_MakeAUMany) or
    (Sender = BTN_MakeAuftragMehrArtikel)) then
    MakeAUBEAGAF('a')
else
   if ((Sender = ACT_MakeAGMany) or
       (Sender = BTN_MakeAngebotMehrArtikel)) then
      MakeAUBEAGAF('g')
   else
      if ((Sender = ACT_MakeAFMany) or
          (Sender = BTN_MakeAnfragenMehrArtikel)) then
          MakeAUBEAGAF('f')
      else
         if ((Sender = ACT_MakeBEMany) or
             (Sender = BTN_MakeBestellungMehrArtikel)) then
            MakeAUBEAGAF('b');

end; //** procedure MNI_MakeAUManyClick


(******************************************************************************)
(***      ACT_MakeAF: OnExecute                                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.ACT_MakeAFExecute(Sender: TObject);
begin

inherited;
MakeAUBEAGAF('F');

end; //** procedure ACT_MakeAFExecute


(******************************************************************************)
(***      ACT_MakeBE: OnExecute                                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.ACT_MakeBEExecute(Sender: TObject);
begin

inherited;
MakeAUBEAGAF('B');

end; //** procedure ACT_MakeBEExecute


(******************************************************************************)
(***     MakeAUBEAGAF                                                       ***)
(******************************************************************************)

function TFRM_DobosLV.MakeAUBEAGAF(const AArt: Char): boolean;
var
   AKuNu : integer;

begin

result := false;
with GetLinkagePointer^ do
     begin
          if (AArt in ['a', 'A']) then
             if ((not ((PRIV_KLB = 'K') or (PRIV_KLB = 'B'))) or
                (PRIV_AU <> Ja)) then
                begin
                     NoPrivilege;
                     Exit;
                end; //** if ((not ((PRIV_KLB = 'K') or (PRIV_KLB = 'B'))) or

          if (AArt in ['g', 'G']) then
             if ((not ((PRIV_KLB = 'K') or (PRIV_KLB = 'B'))) or
                (PRIV_AN <> Ja)) then
                begin
                     NoPrivilege;
                     Exit;
                end; //** if ((not ((PRIV_KLB = 'K') or (PRIV_KLB = 'B'))) or

          if (AArt in ['B', 'F', 'b', 'f']) then
             if ((not ((PRIV_KLB = 'L') or (PRIV_KLB = 'B'))) or
                (PRIV_BW <> Ja)) then
                begin
                     NoPrivilege;
                     Exit;
                end; //** if ((not ((PRIV_KLB = 'L') or (PRIV_KLB = 'B'))) or
    end; //** with GetLinkagePointer^ do

AKuNu := 0;
if (AArt in ['G', 'g', 'A', 'a']) then
   if GetLinkagePointer^.LinkLastKuNu >= FirstDebitor  then
      AKuNu := GetLinkagePointer^.LinkLastKuNu;

if (AArt in ['B', 'F', 'b', 'f']) then
   if AQY_Lieferant.Active then
      if AQY_LieferantKUNU.AsInteger > LastDebitor then
         begin
              AKuNu := AQY_LieferantKUNU.AsInteger;
              if AQY_LieferantGESPERRT.AsInteger = 2 then
                 if (MessageDlg(Format(rs_LV_LieferantBedingtGesperrtTrotzdem,
                                      [AQY_LieferantKUNU.AsInteger]),
                      mtConfirmation,[mbYes,mbNo],0)) <> mrYes then
                      Exit
                 else
              else
                 if AQY_LieferantGESPERRT.AsInteger = 1 then
                    if (MessageDlg(Format(rs_LV_LieferantGesperrtTrotzdem,
                                          [AQY_LieferantKUNU.AsInteger]),
                         mtConfirmation,[mbYes,mbNo],0)) <> mrYes then
                         Exit;
         end; //** if AQY_LieferantKUNU.AsInteger > LastDebitor then


case AArt of
     'A',
     'a',
     'g',
     'G': AKuNu := GetAKuNu(nil, 1, AKuNu);
     'B',
     'F',
     'b',
     'f': AKuNu := GetAKuNu(nil, 2, AKuNu);
end; //** case AArt of

if AKuNu < FirstDebitor then
   Exit;

with GetLinkagePointer^ do
     begin
          LinkLastKuNu := AKuNu;
          LinkInteger1 := -1;
          if (AArt in ['g', 'G', 'F', 'f']) then
             LinkInteger2 := 1  //** AGAF
          else
             LinkInteger2 := 0; //** AU/BE

          LinkString128 := AQY_ArtikelStammARTNR.AsString;
          if (AArt in ['a', 'g', 'b', 'f']) then
             LinkString128 := 'ClIpBoArD';
          if (AArt in ['a', 'A', 'g', 'G']) then
             LoadDll(dnDobosFA, ctyNormal, 'L')
          else
             LoadDll(dnDobosBW, ctyNormal, 'L');
     end; //** with GetLinkagePointer^ do

end; //** function MakeAUBEAGAF


(******************************************************************************)
(***      ACT_MakeFE: OnExecute                                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.ACT_MakeFEExecute(Sender: TObject);
var
   AKuNu : integer;

begin

inherited;
with GetLinkagePointer^ do
     if ((PRIV_DAVOS <> Ja) or (PRIV_DV_FA <> Ja) or (PRIV_DV_FA_Erfassen <> Ja)) then
        begin
             NoPrivilege;
             Exit;
        end; //** if ((PRIV_DAVOS <> Ja) or (PRIV_DV_FA <> Ja) or (PRIV_DV_FA_Erfassen))

with GetLinkagePointer^ do
     if ((Serial = KSerial_Robert_Koch) and (PRIV_SYSVW <> Ja)) then
        AKuNu := 0
     else
        AKuNu := GetAKuNu(nil, 3);

with GetLinkagePointer^ do
     begin
          LinkLastKuNu := AKuNu;
          LinkInteger1 := -1;
          LinkInteger2 := -1;
          LinkString128 := AQY_ArtikelStammARTNR.AsString;
     end; //** with GetLinkagePointer^ do
LoadDll(dnDavosFE, ctyNormal, 'L');

end; //** procedure ACT_MakeFEExecute


(******************************************************************************)
(***                     ACT_MakeSL: OnExecute                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.ACT_MakeSLExecute(Sender: TObject);
begin

inherited;

if (not GetLinkagePointer^.Module[imSL]) then
   begin
        NotInstalled(rs_StuecklistenModul);
        Exit;
   end; //** if (not MainLinkage^.Module[imSL])

with GetLinkagePointer^ do
     begin
          LinkString128 := AQY_ArtikelStammARTNR.AsString;
     end; //** with GetLinkagePointer^ do

LoadDll(dnDobosLS, ctyNormal, 'N');

end; //** procedure ACT_MakeSLExecute

(******************************************************************************)
(***      ACT_MakeAP: OnExecute                                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.ACT_MakeAPExecute(Sender: TObject);
var
   s1 : string;

begin

inherited;
with GetLinkagePointer^ do
     if ((PRIV_DAVOS <> Ja) or (PRIV_DV_AP <> Ja) or (PRIV_DV_AP_Erfassen <> Ja)) then
        begin
             NoPrivilege;
             Exit;
        end; //** if ((PRIV_DAVOS <> Ja) or (PRIV_DV_AP <> Ja) or (PRIV_DV_AP_Erfassen))

with GetLinkagePointer^ do
     begin
          s1 := AQY_ArtikelStammARTNR.AsString;
          shbExpandString(s1, LengthOfArtNr, ' ', false);
          LinkString128 := s1;
     end; //** with GetLinkagePointer^ do
LoadDll(dnDavosSA, ctyNormal, 'L');

end; //** procedure ACT_MakeAPExecute


(******************************************************************************)
(***     !SLoadFromExternalList                                             ***)
(******************************************************************************)

function TFRM_DobosLV.LoadFromExternalList: boolean;
var
   x : TLagerMemKey;
   s : string;
   p,
   i : integer;

begin

if (not Assigned(KeyList)) then
   Exit;

with KeyList do
     begin
          if Count > 0 then
             begin
                  UnShowSQLWait;
                  case AskSelektionVerwerfen of
                       mrYes : KeyList.Clear;
                       mrCancel : exit;
                  end;
             end;
          KeyIndex := -1;
     end; //** with KeyList do

BGP_SelNavBarGruppe.Visible := ivNever;

with TStringList(GetLinkagePointer^.LinkPointer2^) do
     try
        if Count < 1 then
           Exit;
        for i := 0 to Count -1 do
            begin
                 with x do
                      begin
                           s := AnsiUpperCase(Trim(Strings[i]));
                           p := pos(#9, s);
                           if p > 0 then
                              s := Copy(s,1,p-1);
                           if Length(s) > LengthOfArtNr then
                              s := Copy(s,1,LengthOfArtNr);
                           MArtNr := Trim(s);
                           MVariante := 0;
                      end; //** with x do

                 if KeyList.IndexOf(@x, SizeOf(TLagerMemKey)) < 0 then
                    KeyIndex := KeyList.Add(@x, SizeOf(TLagerMemKey));

            end; //** for i := 0 to Count -1 do
     except
        on E:Exception do
           ShowMessage(E.Message);
     end; //** try..except

if KeyList.Count > 0 then
   begin
        BGP_SelNavBarGruppe.Visible := ivAlways;
        BTN_SelNavFirstClick(BTN_SelNavFirst);
   end; //** if KeyList.Count > 0

UpdateNavi;
UpDateButtons;
UpdateRecentList;

end; //** function LoadFromExternalList


(******************************************************************************)
(***      MNI_MiniSetLagerInfo: OnClick                                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_MiniSetLagerInfoClick(Sender: TObject);
var
   FSichtenLagerInfoParams : TSichtenLagerInfoParams;
   fArtNr                  : string;

begin

inherited;
fArtNr := AQY_MiniSetUNTER_ARTNR.AsString;
if IsSpace(fArtNr) then
   Exit;

with FSichtenLagerInfoParams do
     begin
          AFunction := 0;
          AArtNr := fArtNr;
          AForm := Self;
          try
             Call (dnDobosSuchen, 'lagerinfo', @FSichtenLagerInfoParams);
          finally
          end; //** try..finally

     end; //** with FSichtenLagerInfoParams do

end; //** procedure MNI_MiniSetLagerInfoClick


(******************************************************************************)
(***      MNI_StdWerte: OnClick                                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_StdWerteClick(Sender: TObject);
begin

inherited;
GetStdErfassenWerte;
if InputLVStdWerte(STD_US,
                   STD_ME,
                   STD_KALK_KZ,
                   STD_KALK_KZVK,
                   STD_DK1,
                   STD_DK2,
                   STD_DK3,
                   STD_DK4,
                   STD_DK5,
                   STD_Raster,
                   STD_MASSE_SIND_MM,
                   STD_MASSE_FUER_FA
                   ) then
   begin
        SetStdErfassenWerte;
        GetStdErfassenWerte;
   end; //** if InputLVStdWerte(STD_US,

end; //** procedure MNI_StdWerteClick


(******************************************************************************)
(***     GetStdErfassenWerte                                                ***)
(******************************************************************************)

function TFRM_DobosLV.GetStdErfassenWerte: boolean;
var
   i : integer;
   s : string;

begin

result := true;
with AQY_Divers do
     try
        try
           if Active then
              Close;
           Connection := GetDOBOSADB;
           SQL.Clear;
           SQL.Add('SELECT WAEHRUNG_NAME, WAEHRUNG_VKONTO, NETTOTAGE, TEXT, SKONTOTAGE, SKONTOSATZ, EU_KZ  FROM SCHLUESSEL '
                  +'WHERE ART = ''L0'' AND NUMMER = 999999 ');

           UCOpenSQL(AQY_Divers);
           if not EOF then
              begin
                   i := Fields[1].AsInteger;
                   if ((i < 100000) or (i > 199999)) then
                      raise EAbort.Create('');
                   s := IntToStr(i);
                   shbExpandString(s, 6,'0',false);
                   STD_US := Fields[2].AsInteger;
                   STD_ME := Fields[0].AsString;
                   STD_DK1 := StrToInt(s[2]);
                   STD_DK2 := StrToInt(s[3]);
                   STD_DK3 := StrToInt(s[4]);
                   STD_DK4 := StrToInt(s[5]);
                   STD_DK5 := StrToInt(s[6]);
                   s := Fields[3].AsString;
                   STD_KALK_KZ := copy (s,1,1);
                   STD_KALK_KZVK := copy (s,2,1);
                   //** 10.2
                   STD_Raster := Fields[4].AsInteger;
                   //** 11.2
                   if Fields[5].AsInteger = 1 then
                      STD_MASSE_SIND_MM := 'J'
                   else
                      STD_MASSE_SIND_MM := 'N';

                   STD_MASSE_FUER_FA := Fields[6].AsString;
                   if STD_MASSE_FUER_FA <> 'J' then
                      STD_MASSE_FUER_FA := 'N';

              end; //** if not EOF then

           except
           end; //** try..except

     finally
        if Active then
           Close;
     end; //** try..finally

end; //** function GetStdErfassenWerte


(******************************************************************************)
(***     SetStdErfassenWerte                                                ***)
(******************************************************************************)

function TFRM_DobosLV.SetStdErfassenWerte: boolean;
var
   i,j : integer;
   s : string;

begin

result := true;
with AQY_Divers do
     try
        try
           if Active then
              Close;
           Connection := GetDOBOSADB;
           SQL.Clear;
           SQL.Add('DELETE FROM SCHLUESSEL '
                  +'WHERE ART = ''L0'' AND NUMMER = 999999 ');
           UCExecSQL(AQY_Divers);

           i := (1*100000)+(STD_DK1*10000)
                          +(STD_DK2*1000)
                          +(STD_DK3*100)
                          +(STD_DK4*10)
                          +(STD_DK5*1);

           //** 11.2
           j := 0;
           if STD_MASSE_SIND_MM = 'J' then
              j := 1;

           //** Kalk_Kz
           if IsSpace(STD_KALK_KZ) then
              STD_KALK_KZ := 'D';
           if IsSpace(STD_KALK_KZVK) then
              STD_KALK_KZVK := 'S';

           s := Copy(STD_KALK_KZ, 1, 1)+Copy(STD_KALK_KZVK, 1, 1);
           SQL.Clear;
           SQL.Add('INSERT INTO SCHLUESSEL '
                  +'(ART, NUMMER, TEXT, WAEHRUNG_NAME, WAEHRUNG_KURS, WAEHRUNG_VKONTO, '
                  +'NETTOTAGE, SKONTOTAGE, SKONTOSATZ, EU_KZ) VALUES ('
                  +'''L0'', '    //** Art
                  +'999999, '    //** Nummer
                  //** +''''', '      //** Text
                  +''''+SQLTextString(s)+''', '                  //** KalkKz, KalKzVK
                  +''''+SQLTextString(Copy(STD_ME, 1, 4))+''', ' //** Währungsname
                  +'0.0, '                                       //** Kurs
                  +IntToStr(i)+', '                              //** VKonto
                  +IntToStr(STD_US)+', '                         //** Nettotage
                  //** 10.2
                  +IntToStr(STD_Raster)+', '                     //** Skontotage
                  //** 11.2
                  +IntToStr(j)+', '                              //** STD_MASSE_SIND_MM
                  +''''+SQLTextString(STD_MASSE_FUER_FA)+''' '   //** STD_MASSE_FUER_FA
                  +') ');
           UCExecSQL(AQY_Divers);

           except
           end; //** try..except

     finally
        if Active then
           Close;
     end; //** try..finally

end; //** function SetStdErfassenWerte


(******************************************************************************)
(***      MNI_LoadSelect: OnClick                                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_LoadSelectClick(Sender: TObject);
var
   fNummer,
   n       : integer;
   dummy1,
   dummy2  : boolean;
   Station : integer;
   fRes    : Variant;
   s       : string;
   x       : TLagerMemKey;
   b       : Boolean;
   zwList  : TStringList;
   AValuesL : array [0..0] of Variant;

            (******************************************************************)
            (***      lokale function CheckClipboard                        ***)
            (******************************************************************)
             function CheckClipboard : boolean;
             var
                NeuCount,
                v,
                i : integer;
                fArtNr,
                mZN,
                mArtNr,
                mArtBez,
                mArtBez2,
                s : string;
                AValues : array [0..0] of Variant;

             begin

             result := false;
             zwList := TStringList.Create;
             NeuCount := 0;
             try
                ShowSQLWait;
                zwList.Clear;
                zwlist.Sorted := false;
                zwlist.Duplicates := dupIgnore;
                zwlist.Text := Clipboard.AsText;

                v := 0;
                for i := zwlist.Count -1 downto 0 do
                    begin
                         s := TrimRight(zwlist.Strings[i]);
                         fArtNr := AnsiUpperCase(s);
                         mArtNr := '';
                         mArtBez := '';
                         mArtBez2 := '';
                         if GetArtNrUndBez(s, mArtNr, mArtBez, mArtBez2, mZN) then
                            fArtNr := mArtNr;

                         if ((not IsSpace(s)) and (Length(fArtNr) <= LengthOfArtNr)) then
                            if not ReadAnyFields (GetDobosADB,
                               'ARTIKEL_STAMM',
                               'WHERE ARTNR = '''+SQLTextString(TrimRight(fArtNr))+'''',
                               ['ARTNR'],
                                AValues) then
                                begin
                                     ExternArtNrNeuList.Add(s);
                                     zwlist.Delete(i);
                                     inc(NeuCount);
                                end
                            else
                               inc(v);
                    end; //** for i := zwlist.Count -1 downto 0 do

                UnShowSQLWait;
                if NeuCount > 0 then
                   ShowMessage(Format(rs_LV_NotFoundAreInErfassenList,[NeuCount]));

                if v > 0 then
                   begin
                        GetLinkagePointer^.LinkPointer2 := @zwlist;
                        if LoadFromExternalList then
                           result := true;
                   end; //** if v > 0

             finally
               zwList.Free;
               UnShowSQLWait;
             end; //** try..finally

             end; //** lokale function CheckClipboard

(******************************************************************************)
(***    Start der procedure MNI_LoadSelectClick                             ***)
(******************************************************************************)
begin

inherited;
b := ClipBoard.HasFormat(CF_TEXT);
Station := GetLinkagePointer^.StationsNummer;

if b then
   n := GetVarRDGDlg (GetStdRes(frs_STD_SelektionssetLaden),
                     [GetStdRes(frs_STD_privatesSet), GetStdRes(frs_STD_OeffentlichesSet), rs_LV_VonDerZwischenablage],
                     0,
                     false,
                     dummy1,
                     dummy2)
else
   n := GetVarRDGDlg (GetStdRes(frs_STD_SelektionssetLaden),
                     [GetStdRes(frs_STD_privatesSet), GetStdRes(frs_STD_OeffentlichesSet)],
                     0,
                     false,
                     dummy1,
                     dummy2);


if n < 0 then
   Exit;

if n = 1 then
   Station := 0;

if Station = 0 then
   s := GetStdRes(frs_STD_SetauswahlOeffentlich)
else
   s := Format(GetStdRes(frs_STD_SetauswahlPrivatStationx),[Station]);

if n < 2 then
   begin
        //** Dialogauswahl
        fRes := GetListItem(lkLSelSet, Sender, Self, Station, 0, s);
        //** Close, abort?
        if ((VarIsNull(fRes))) then
           Exit;
        fNummer := FRes;
   end
else
   if not (CheckClipboard) then
      Exit;

if (not Assigned(KeyList)) then
   Exit;

if n <> 2 then
   with KeyList do
        begin
             if Count > 0 then
                case AskSelektionVerwerfen of
                     mrYes : KeyList.Clear;
                     mrCancel : exit;
                end;
             KeyIndex := -1;
        end; //** with KeyList do

BGP_SelNavBarGruppe.Visible := ivNever;

if n <> 2 then
   with AQY_Divers do
        try
           try
              ShowSQLWait;
              if Active then
                 Close;
              Connection := GetDobosADB;
              SQL.Clear;
              SQL.Add ('SELECT ARTNR FROM ARTIKEL_SELEKTION WHERE '
                      +'STATION = '+IntToStr(Station)+' AND NUMMER = '+IntToStr(fNummer)+' '
                      +'ORDER BY ARTNR ' );
              UCOpenSQL(AQY_Divers);

              while not EOF do
                    begin
                         with x do
                              begin
                                   s := TrimRight(Fields[0].AsString);
                                   //!!
                                   shbExpandString(s, LengthOfArtNr, ' ', false);
                                   MArtNr := s;
                                   MVariante := 0;
                              end; //** with x do

                         if KeyList.IndexOf(@x, SizeOf(TLagerMemKey)) < 0 then
                            if ReadAnyFields (GetDobosADB,
                                  'ARTIKEL_STAMM',
                                  'WHERE ARTNR = '''+SQLTextString(TrimRight(x.mArtNr))+'''',
                                  ['ARTNR'],
                                   AValuesL) then
                               try
                                  if TrimRight(AValuesL[0]) = TrimRight(x.mArtNr) then
                                     KeyIndex := KeyList.Add(@x, SizeOf(TLagerMemKey));
                               except
                               end; //** try..except

                         SetChildStatusText(x.MArtNr);
                         Application.ProcessMessages;
                         Next;
                    end; //** while not EOF do

              if Active then
                 Close;

              SetChildStatusText(rs_LV_SetErfolgreichGeladen);

           except
              on E:Exception do
                 begin
                      UnShowSQLWait;
                      ShowMessage(E.Message);
                      Exit;
                 end; //** on E:Exception do
           end; //** try..except

        finally
           if Active then
              Close;
        end; //** try..finally

if KeyList.Count > 0 then
   begin
        BGP_SelNavBarGruppe.Visible := ivAlways;
        BTN_SelNavFirstClick(BTN_NavFirst);
   end; //** if KeyList.Count > 0

UnShowSQLWait;
UpdateNavi;
UpDateButtons;
UpdateRecentList;

end; //** procedure MNI_LoadSelectClick


(******************************************************************************)
(***      MNI_DeleteSet: OnClick                                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_DeleteSetClick(Sender: TObject);
var
   fNummer,
   c,
   n       : integer;
   dummy1,
   dummy2  : boolean;
   Station : integer;
   fRes    : Variant;
   s       : string;
   SetText : string;

begin

inherited;
Station := GetLinkagePointer^.StationsNummer;
n := GetVarRDGDlg (GetStdRes(frs_STD_LoeschenEinesSelektionssets),
                  [GetStdRes(frs_STD_privatesSet), GetStdRes(frs_STD_OeffentlichesSet)],
                  0,
                  false,
                  dummy1,
                  dummy2);
if n < 0 then
   Exit;

if n = 1 then
   Station := 0;

if Station = 0 then
   if (GetLinkagePointer^.PRIV_SCHNELL_AENDERN <> Ja) then
      begin
           NoPrivilege;
           Exit;
      end; //**

if Station = 0 then
   s := GetStdRes(frs_STD_SetauswahlOeffentlich)
else
   s := Format(GetStdRes(frs_STD_SetauswahlPrivatStationx),[Station]);

//** Dialogauswahl
fRes := GetListItem(lkLSelSet, Sender, Self, Station, 0, s);

//** Close, abort?
if ((VarIsNull(fRes))) then
   Exit;

fNummer := FRes;

c := 0;
SetText := rs_LV_unbekannt;
with AQY_Divers do
     try
        try
           if Active then
              Close;
           Connection := GetDobosADB;
           SQL.Clear;
           SQL.Add ('SELECT COUNT(*) FROM ARTIKEL_SELEKTION WHERE '
                   +'STATION = '+IntToStr(Station)+' AND NUMMER = '+IntToStr(fNummer)+' ');
           UCOpenSQL(AQY_Divers);
           c := Fields[0].AsInteger;
           if Active then
              Close;

           SQL.Clear;
           SQL.Add ('SELECT TEXT FROM SCHLUESSEL WHERE ART = ''L0'' AND '
                   +'NUMMER = '+IntToStr((Station * 1000)+fNummer)+' ');
           UCOpenSQL(AQY_Divers);
           SetText := Fields[0].AsString;
           if Active then
              Close;
        except
           on E:Exception do
              begin
                   ShowMessage(E.Message);
                   Exit;
              end; //** on E:Exception do
        end; //** try..except

     finally
        if Active then
           Close;

     end; //** try..finally

if c > 0 then
   if (MessageDlg(Format(rs_LV_QSetHatxEintraegeDelete,[c]),
      mtConfirmation,[mbYes,mbNo],0)) <> mrYes then
      Exit;

with AQY_Divers do
     try
        try
           ShowSQLWait;
           if Active then
              Close;
           Connection := GetDobosADB;
           SQL.Clear;

           //** Start Transaction
           AQY_Divers.Connection.BeginTrans;
           SQL.Clear;
           SQL.Add ('DELETE FROM SCHLUESSEL WHERE ART = ''L0'' AND '
                   +'NUMMER = '+IntToStr((Station * 1000)+fNummer)+' ');
           UCExecSQL(AQY_Divers);

           SQL.Clear;
           SQL.Add ('DELETE FROM ARTIKEL_SELEKTION WHERE '
                   +'STATION = '+IntToStr(Station)+' AND '
                   +'NUMMER = '+IntToStr(fNummer)+' ');
           UCExecSQL(AQY_Divers);

           //** Commit
           AQY_Divers.Connection.CommitTrans;
           if Active then
              Close;

        except
           on E:Exception do
              begin
                   AQY_Divers.Connection.RollbackTrans;
                   UnShowSQLWait;
                   ShowMessage(E.Message);
              end;
        end; //** try..except

     finally
        UnShowSQLWait;
        if Active then
           Close;
        SQL.Clear;
        SetChildStatusText(' ');
        ShowMessage(Format(rs_LV_SetDeleted,[SetText, fNummer]));

     end; //** with AQY_Divers do

end; //** procedure MNI_DeleteSetClick


(******************************************************************************)
(***      MNI_SaveSelect: OnClick                                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_SaveSelectClick(Sender: TObject);
var
   i,
   c,
   fNummer,
   n       : integer;
   dummy1,
   dummy2  : boolean;
   Station : integer;
   fRes    : Variant;
   s       : string;
   SetText : string;
   x       : PLagerMemKey;

begin

inherited;

Station := GetLinkagePointer^.StationsNummer;
n := GetVarRDGDlg (rs_LV_SelektionssetSpeichern,
                  [GetStdRes(frs_STD_privatesSet), GetStdRes(frs_STD_OeffentlichesSet)],
                  0,
                  false,
                  dummy1,
                  dummy2);
if n < 0 then
   Exit;

if n = 1 then
   Station := 0;

if Station = 0 then
   s := GetStdRes(frs_STD_SetauswahlOeffentlich)
else
   s := Format(GetStdRes(frs_STD_SetauswahlPrivatStationx),[Station]);

//** Dialogauswahl
fRes := GetListItem(lkLSelSet, Sender, Self, Station, 1, s);

//** Close, abort?
if ((VarIsNull(fRes))) then
   if (MessageDlg(rs_LV_QNeuesSelektionssetAnlegen, mtConfirmation,[mbYes,mbNo],0)) <> mrYes then
      Exit;

//** 0 oder Cancel, neues Set anlegen?
if ((VarIsNull(fRes)) or (fRes = 0)) then
   begin
        fNummer := 0;
        fNummer := GetNewStdSetNummer(Station);
        if ((fNummer < 1) or (fNummer > 999)) then
           begin
                ShowMessage(rs_LV_KeinPlatzImNummernkreis);
                Exit;
           end; //** if fNummer > 999
   end
else
   fNummer := fRes;

c := 0;
SetText := rs_LV_unbenannt;
with AQY_Divers do
     try
        try
           if Active then
              Close;
           Connection := GetDobosADB;
           SQL.Clear;
           SQL.Add ('SELECT COUNT(*) FROM ARTIKEL_SELEKTION WHERE '
                   +'STATION = '+IntToStr(Station)+' AND NUMMER = '+IntToStr(fNummer)+' ');
           UCOpenSQL(AQY_Divers);
           c := Fields[0].AsInteger;
           if Active then
              Close;

           SQL.Clear;
           SQL.Add ('SELECT TEXT FROM SCHLUESSEL WHERE ART = ''L0'' AND '
                   +'NUMMER = '+IntToStr((Station * 1000)+fNummer)+' ');
           UCOpenSQL(AQY_Divers);
           SetText := Fields[0].AsString;
           if Active then
              Close;
        except
           on E:Exception do
              begin
                   ShowMessage(E.Message);
                   Exit;
              end; //** on E:Exception do
        end; //** try..except

     finally
        if Active then
           Close;

     end; //** try..finally

if c > 0 then
   if (MessageDlg(Format(rs_LV_QSetHatxEintraegeOverwrite,[c]),
      mtConfirmation,[mbYes,mbNo],0)) <> mrYes then
      Exit;

if not SHBInputQuery(rs_LV_SelektionssetSpeichern, rs_LV_NameDesSets, SetText) then
   Exit;

if Length(SetText) > 80 then
   SetText := Copy(SetText,1,80);

with AQY_Divers do
     try
        try
           ShowSQLWait;
           if Active then
              Close;
           Connection := GetDobosADB;
           SQL.Clear;

           //** Start Transaction
           AQY_Divers.Connection.BeginTrans;
           SQL.Clear;
           SQL.Add ('DELETE FROM SCHLUESSEL WHERE ART = ''L0'' AND '
                   +'NUMMER = '+IntToStr((Station * 1000)+fNummer)+' ');
           UCExecSQL(AQY_Divers);

           SQL.Clear;
           SQL.Add ('DELETE FROM ARTIKEL_SELEKTION WHERE '
                   +'STATION = '+IntToStr(Station)+' AND '
                   +'NUMMER = '+IntToStr(fNummer)+' ');
           UCExecSQL(AQY_Divers);

           SQL.Clear;
           SQL.Add('INSERT INTO SCHLUESSEL '
                  +'(ART, NUMMER, TEXT, WAEHRUNG_NAME, WAEHRUNG_KURS, WAEHRUNG_VKONTO, '
                  +'NETTOTAGE, SKONTOTAGE, SKONTOSATZ, EU_KZ) VALUES ('
                  +'''L0'', '    //** Art
                  +IntToStr((Station * 1000)+fNummer)+', '
                  +''''+SQLTextString(SetText)+''', '            //** Text
                  +''''', '                                      //** Währungsname
                  +'0.0, '                                       //** Kurs
                  +'0, 0, 0, 0.0, ''N'') ');
           UCExecSQL(AQY_Divers);

           //** Artikel speichern
           if KeyList.Count > 0 then
              for i := 0 to KeyList.Count -1 do
                  begin
                       x := KeyList.Items[i];
                       SQL.Clear;
                       SQL.Add ('INSERT INTO ARTIKEL_SELEKTION (STATION, NUMMER, ARTNR) '
                               +'VALUES ('
                               +IntToStr(Station)+', '
                               +IntToStr(fNummer)+', '
                               +''''+SQLTextString(TrimRight(x.MArtNr))+''' )');
                       UCExecSQL(AQY_Divers);
                       SetChildStatusText(x.MArtNr);
                       Application.ProcessMessages;
                  end; //** for i := 0 to KeyList.Count -1

           //** Commit
           AQY_Divers.Connection.CommitTrans;
           if Active then
              Close;

        except
           on E:Exception do
              begin
                   AQY_Divers.Connection.RollbackTrans;
                   UnShowSQLWait;
                   ShowMessage(E.Message);
              end;
        end; //** try..except

     finally
        UnShowSQLWait;
        if Active then
           Close;
        SQL.Clear;
        SetChildStatusText(' ');
        ShowMessage(Format(rs_LV_SetxStored,[SetText, fNummer]));
     end; //** with AQY_Divers do

end; //** procedure MNI_SaveSelectClick


(******************************************************************************)
(***     GetNewStdSetNummer                                                 ***)
(******************************************************************************)

function TFRM_DobosLV.GetNewStdSetNummer(const AStation : integer): integer;
var
   r,
   i : integer;

begin

result := -1;
i := 0;

with AQY_Divers do
     try
        if Active then
           Close;
        Connection := GetDobosADB;
        SQL.Clear;
        SQL.Add('SELECT "NUMMER"=CONVERT(INTEGER,(RIGHT(STR(NUMMER, 6 ,0),3))) '
                        +'FROM SCHLUESSEL WHERE (ART = ''L0'') '
                        +'AND NUMMER < 999999 '
                        +'AND NUMMER BETWEEN '+IntToStr((AStation*1000)+1)+' AND '+IntToStr((AStation*1000)+999)+' '
                        +' ORDER BY NUMMER');

        UCOpenSQL(AQY_Divers);
        while not EOF do
              begin
                   r := Fields[0].AsInteger;
                   if r > (i+1) then
                      Break;
                   inc(i);
                   Next;
              end; //** while not EOF do

        Close;
        result := i+1;

     except
        on E:Exception do
           begin
                ShowMessage(E.Message);
                if Active then
                   Close;
           end; //** on E:Exception do
     end; //** try..except

end; //** function GetNewStdSetNummer


(******************************************************************************)
(***      SBT_Viewer: OnMouseDown                                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_ViewerMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
   mArtNr : string;

begin

inherited;
if (not (AQY_ArtikelStamm.Active)) then
   Exit;

if Button = mbRight then
   if GetLinkagePointer^.Module[imDrDoc] then
      begin
           mArtNr := TrimRight(AQY_ArtikelStammARTNR.AsString);
           if isSpace(mArtNr) then
              Exit;
           CallDrDoc(-1,
                     mArtNr,
                     -3);
      end; //** if GetLinkagePointer^.Module[imDrDoc]

end; //** procedure SBT_ViewerMouseDown


(******************************************************************************)
(***      MNI_LastArtNr: OnClick                                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_LastArtNrClick(Sender: TObject);
begin

inherited;
if ((not Erfassen) and (not Aendern)) then
   if not (IsSpace(GetLinkagePointer^.LinkLastArtNr)) then
      begin
           EDT_ArtNr.Text := GetLinkagePointer^.LinkLastArtNr;
           EDT_ArtNrExit(EDT_ArtNr);
           UpdateRecentList;
      end; //** if not (IsSpace(GetLinkagePointer^.LinkLastArtNr))

end; //** procedure MNI_LastArtNrClick


(******************************************************************************)
(***      MNI_CutTextToClipboard: OnClick                                   ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_CutTextToClipboardClick(Sender: TObject);
begin

inherited;
try
   ClipBoard.Open;
   Clipboard.AsText := EDT_BEZ_1.Text+skReturn
                      +EDT_BEZ_2.Text+skReturn
                      +EDT_BEZ_3.Text+skReturn
                      +EDT_BEZ_4.Text+skReturn
                      +EDT_BEZ_5.Text+skReturn
                      +EDT_BEZ_6.Text+skReturn
                      +EDT_BEZ_7.Text+skReturn
                      +EDT_BEZ_8.Text+skReturn;
finally
  Clipboard.Close;
end; //** try..finally

end; //** procedure MNI_CutTextToClipboardClick


(******************************************************************************)
(***      MNI_ChangeToLief1: OnClick                                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_ChangeToLief1Click(Sender: TObject);
var
   i      : integer;
   AOldNummer : integer;
   ArtTable,
   AArtNr     : string;
   mFieldList : TStringList;

begin

inherited;
AArtNr := AQY_LieferantARTNR.AsString;
AOldNummer := AQY_LieferantNUMMER.AsInteger;

if (MessageDlg(Format(rs_LV_QMakeHauptlieferant,[AQY_LieferantKUNU.AsInteger, AOldNummer]),
   mtConfirmation,[mbYes,mbNo],0)) <> mrYes then
   Exit;

with AQY_Divers do
     try
        if Active then
           Close;
        Connection := GetDOBOSADB;

        if GetLinkagePointer^.Module[imArtikelarchiv] then
           try
              mFieldList := TStringList.Create;
              ArtTable := Format('M%2.2d',[GetLinkagePointer^.MRecord.Mandant])+'.dbo.ARTIKEL_LIEFERANT';
              for i := 0 to AQY_Lieferant.FieldCount -1 do
                  begin
                       if AQY_Lieferant.Fields[i].FieldKind = fkCalculated then
                          Continue;
                       if ((AQY_Lieferant.Fields[i].FieldName <> 'ARTNR') and
                           (AQY_Lieferant.Fields[i].FieldName <> 'NUMMER') and
                           (AQY_Lieferant.Fields[i].FieldName <> 'LIEF_NAME')) then

                       mFieldList.Add(AQY_Lieferant.Fields[i].FieldName);
                  end; //** for i := 0 to AQY_Lieferant.FieldCount -1 do

              ArchiviereOldRecordsByList(AQY_Divers,
                                         GetDOBOSADB,
                                         mFieldList,
                                        'A_ARCHIV_ARTIKEL_LIEFERANT',
                                         ArtTable,
                                         'ARTNR, NUMMER',
                                         ''''+SQLTextString(AQY_Lieferant.FieldByName('ARTNR').AsString)+''', '
                                         +IntToStr(1),
                                         'ARTNR = '''+SQLTextString(AQY_Lieferant.FieldByName('ARTNR').AsString)+''' '
                                         +' AND NUMMER = 1 ');

              ArchiviereOldRecordsByList(AQY_Divers,
                                         GetDOBOSADB,
                                         mFieldList,
                                        'A_ARCHIV_ARTIKEL_LIEFERANT',
                                         ArtTable,
                                         'ARTNR, NUMMER',
                                         ''''+SQLTextString(AQY_Lieferant.FieldByName('ARTNR').AsString)+''', '
                                         +IntToStr(AOldNummer),
                                         'ARTNR = '''+SQLTextString(AQY_Lieferant.FieldByName('ARTNR').AsString)+''' '
                                         +' AND NUMMER = '+IntToStr(AOldNummer)+' ');
           finally
              FreeAndNil(mFieldList);

           end; //** if GetLinkagePointer^.Module[imArtikelarchiv] then

        SQL.Clear;
        SQL.Add('UPDATE ARTIKEL_LIEFERANT SET NUMMER = -1 WHERE ARTNR = '''+SQLTextString(TrimRight(AnsiUpperCase(AArtNr)))+''' AND NUMMER = 1 '
               +'UPDATE ARTIKEL_LIEFERANT SET NUMMER = 1 WHERE ARTNR = '''+SQLTextString(TrimRight(AnsiUpperCase(AArtNr)))+''' AND NUMMER = '+IntToStr(AOldNummer)+' '
               +'UPDATE ARTIKEL_LIEFERANT SET NUMMER = '+IntToStr(AOldNummer)+' WHERE ARTNR = '''+SQLTextString(TrimRight(AnsiUpperCase(AArtNr)))+''' AND NUMMER = -1 ');
        UCExecSQL(AQY_Divers);
        ShowMessage(rs_LV_HauptlieferantGetauscht);
        PosMain(AArtNr, '', mpExact, false);

     except
        on E:Exception do
           ShowMessage(E.Message);
     end; //** try..except

end; //** procedure MNI_ChangeToLief1Click


(******************************************************************************)
(***      FormResize                                                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.FormResize(Sender: TObject);
var
   All3 : boolean;
   All4 : boolean;
   fArtNr : string;
   ff : TFormFaktor;
   is16zu9 : string;



                  (************************************************************)
                  (***     lokale procedure SetToSmallScreen                ***)
                  (************************************************************)
                   procedure SetToSmallScreen;
                   begin

                   //** !!TODO für 12.0
                   {PAN_Bestand.Parent := TAB_Bestand;
                   PAN_Schluessel.Parent := TAB_Schluessel;
                   PAN_Masse.Parent := TAB_Masse;
                   PAN_Diverse.Parent := TAB_Diverse;
                   TAB_Bestand.TabVisible := true;
                   TAB_Schluessel.TabVisible := true;
                   TAB_Diverse.TabVisible := true;
                   TAB_Masse.TabVisible := true;
                   TAB_Bilder.TabVisible := true;
                   PAN_BildControl.Parent := TAB_Bilder;}

                   end; //** lokale procedure SetToSmallScreen

(******************************************************************************)
(***    Start FormResize                                                    ***)
(******************************************************************************)
begin

inherited;


FormFaktorString := 'unbekannt';
ff := KalkFormFaktor(Self.Width, Self.Height, '');
if ff = ff16zu9 then
   FormFaktorString := '16:9'
else
   if ff = ff4zu3 then
      FormFaktorString := '4:3'
   else
      FormFaktorString := 'minimal';

is16zu9 := '16:9 false';
if GetLinkagePointer^.Is16Zu9 then
   is16zu9 := '16:9 true';

if IsSHB then
   STB_DLLChild.Panels[1].Text := IntToStr(Self.Width)+' - '+IntToStr(Self.Height)+' '+FormFaktorString+' '+is16zu9;

FillImageCollection;


//** !!TODO für 12.0
(*
if (GetLinkagePointer^.Desktop_Width > DefaultWidth) then
   try
      PCT_Bewegung.Width := ((PAN_Rechts.Width - PCT_Bewegung.Left) -10);
      All3 := (PAN_Zusatz.Width >= (PAN_ZT1.Width
                                  + PAN_ZT2.Width
                                  + PAN_ZT3.Width
                                  + PCT_Zusatz1.Width
                                  + PCT_Zusatz2.Width
                                  + PCT_Zusatz3.Width));

      All4 := (PAN_Zusatz.Width >= (PAN_ZT1.Width
                                  + PAN_ZT2.Width
                                  + PAN_ZT3.Width
                                  + PCT_Zusatz1.Width
                                  + PCT_Zusatz2.Width
                                  + PCT_Zusatz3.Width
                                  + PAN_BildControl.Width+6));
      if ReSizeRunning then
         Exit;
      ReSizeRunning := true;
      //** Optimiere bei 16:9 oder > 1280, unterer leerer Teil zu gross
      if not MNI_ImmerMaxSize.Checked then
         with GetLinkagePointer^ do
              if ((Is16Zu9) or (Desktop_Width > 1280)) then
                 if (PAN_Zusatz.Height - (PCT_TexteBestand.Height+6)) > 0 then
                    Self.Height := Self.Height - (PAN_Zusatz.Height - (PCT_TexteBestand.Height+6));

      if (PAN_Zusatz.Height > (PCT_TexteBestand.Height+2)) then
         begin
              PAN_AllZusatz.Visible := true;
              PAN_Bestand.Parent := TAB_BestandZ;
              if ((GetLinkagePointer^.Module[imLZ]) or (GetLinkagePointer^.Module[imDAVOS]) or (GetLinkagePointer^.Serial = KSerial_XXXKlinger)) then
                 PAN_Masse.Parent := TAB_DiverseZ
              else
                 PAN_Diverse.Parent := TAB_DiverseZ;
              OVC_MiniSet.Columns[5].Hidden := false;
              if All3 then
                 PAN_Schluessel.Parent := TAB_SchluesselZ
              else
                 PAN_Schluessel.Parent := TAB_Schluessel;

              TAB_Bestand.TabVisible := false;
              if ((GetLinkagePointer^.Module[imDAVOS]) or (GetLinkagePointer^.Module[imLZ])) then
                 TAB_Masse.TabVisible := false
              else
                 TAB_Diverse.TabVisible := false;

              if ((GetLinkagePointer^.Module[imDAVOS]) or (GetLinkagePointer^.Module[imLZ])) then
                 TAB_DiverseZ.Caption := TAB_Masse.Caption
              else
                 TAB_DiverseZ.Caption := TAB_Diverse.Caption;

              if All3 then
                 TAB_Schluessel.TabVisible := false
              else
                 TAB_Schluessel.TabVisible := true;

              TAB_BestandZ.TabVisible := true;
              TAB_DiverseZ.TabVisible := true;
              if All3 then
                 TAB_SchluesselZ.TabVisible := true
              else
                 TAB_SchluesselZ.TabVisible := false;

              if All3 then
                 PCT_Zusatz3.Visible := true
              else
                 PCT_Zusatz3.Visible := false;

              //PCT_TexteBestand.ActivePage := TAB_Texte;

              if All4 then
                 begin
                      TAB_Bilder.TabVisible := false;
                      TAB_BilderZ.TabVisible := true;
                      PCT_Zusatz4.Visible := true;
                      PAN_BildControl.Parent := TAB_BilderZ;
                 end
              else
                 begin
                      TAB_Bilder.TabVisible := true;
                      TAB_BilderZ.TabVisible := false;
                      PCT_Zusatz4.Visible := false;
                      PAN_BildControl.Parent := TAB_Bilder;
                 end;

              if Erfassen then
                 fArtNr := EDT_ArtNr.Text
              else
                 fArtNr := CurrArtNr;

              with GetLinkagePointer^ do
                   begin
                        if ((not ModuleExplorerActive) or (Is16Zu9) or (Desktop_Width > 1280)) then
                           begin
                                //OVC_Lieferant.Align := alLeft;
                                OVC_Lieferant.Visible := true;
                                //OVC_Lieferant.Align := alClient;
                                if ((Serial = KSerial_Robert_Koch) and (not BTN_LoadSonderpreise.Enabled)) then
                                   OVC_SoPreise.Visible := false
                                else
                                OVC_SoPreise.Visible := true;
                                OpenSoPreise(fArtNr);
                           end //** if ((not ModuleExplorerActive) or (Is16Zu9)) then
                        else
                           OVC_Lieferant.Visible := false;

                   end; //** with GetLinkagePointer^ do

         end
      else
         SetToSmallScreen;

      with GetLinkagePointer^ do
           if AQY_Lieferant.Active then
              if (self.Width > 1250) then
                 begin
                      if not BigEKScreenActive then
                         ReadRaster(AQY_LieferantRASTER.AsInteger,false,true,true);

                      if (Get1stChar(EDT_LiefStaffelBP.Text) in ['F','S']) then
                          ReadBezForFremdKalk(true,EDT_LiefStaffelBP.Text);

                      EDT_LiefEK_1.Left := LAB_Lief_EK_1.Left + 110;
                      EDT_LiefEK_2.Left := LAB_Lief_EK_2.Left + 110;
                      EDT_LiefEK_3.Left := LAB_Lief_EK_3.Left + 110;
                      EDT_LiefEK_4.Left := LAB_Lief_EK_4.Left + 110;
                      EDT_LiefEK_5.Left := LAB_Lief_EK_5.Left + 110;
                      LAB_Lief_EK_6.Left := EDT_LiefEK_1.Left + EDT_LiefEK_1.Width + 4;
                      LAB_Lief_EK_7.Left := EDT_LiefEK_2.Left + EDT_LiefEK_2.Width + 4;
                      LAB_Lief_EK_8.Left := EDT_LiefEK_3.Left + EDT_LiefEK_3.Width + 4;
                      LAB_Lief_EK_9.Left := EDT_LiefEK_4.Left + EDT_LiefEK_4.Width + 4;
                      LAB_Lief_EK_10.Left := EDT_LiefEK_5.Left + EDT_LiefEK_5.Width + 4;
                      EDT_LiefEK_6.Left := LAB_Lief_EK_6.Left + 110;
                      EDT_LiefEK_7.Left := LAB_Lief_EK_7.Left + 110;
                      EDT_LiefEK_8.Left := LAB_Lief_EK_8.Left + 110;
                      EDT_LiefEK_9.Left := LAB_Lief_EK_9.Left + 110;
                      EDT_LiefEK_10.Left := LAB_Lief_EK_10.Left + 110;
                      SBT_LiefEdit.Left := EDT_LiefEK_6.Left + EDT_LiefEK_6.Width +4;
                      SBT_LiefInsert.Left := EDT_LiefEK_6.Left + EDT_LiefEK_6.Width +4;
                      SBT_LiefDelete.Left := EDT_LiefEK_6.Left + EDT_LiefEK_6.Width +4;
                      SBT_LiefCancel.Left := EDT_LiefEK_6.Left + EDT_LiefEK_6.Width +4;
                      SBT_LiefSave.Left := EDT_LiefEK_6.Left + EDT_LiefEK_6.Width +4;
                      PAN_Lieferant.Width := SBT_LiefEdit.Left + SBT_LiefEdit.Width + 10;
                      LAB_EKSeit.Left := LAB_Lief_EK_6.Left;
                      EDT_LePreisUpdate.Left := EDT_LiefEK_6.Left;
                      EDT_LiefBemerkung.Width := EDT_LiefEK_10.Left + EDT_LiefEK_10.Width - EDT_LiefBemerkung.Left;
                      BigEKScreenActive := true;
                 end //** if ((self.Width > EDT_Dummy.Left+EDT_Dummy.Width) and ...
              else
                 begin
                      if BigEKScreenActive then
                         ReadRaster(AQY_LieferantRASTER.AsInteger,false,true,true);

                      if (Get1stChar(EDT_LiefStaffelBP.Text) in ['S','F']) then
                          ReadBezForFremdKalk(false,EDT_LiefStaffelBP.Text);

                      EDT_LiefEK_1.Left := 356;
                      EDT_LiefEK_2.Left := 356;
                      EDT_LiefEK_3.Left := 356;
                      EDT_LiefEK_4.Left := 356;
                      EDT_LiefEK_5.Left := 356;
                      EDT_LiefEK_6.Left := 527;
                      EDT_LiefEK_7.Left := 527;
                      EDT_LiefEK_8.Left := 527;
                      EDT_LiefEK_9.Left := 527;
                      EDT_LiefEK_10.Left := 527;
                      LAB_Lief_EK_6.Left := 484;
                      LAB_Lief_EK_7.Left := 484;
                      LAB_Lief_EK_8.Left := 484;
                      LAB_Lief_EK_9.Left := 484;
                      LAB_Lief_EK_10.Left := 484;
                      SBT_LiefEdit.Left := 651;
                      SBT_LiefInsert.Left := 651;
                      SBT_LiefDelete.Left := 651;
                      SBT_LiefCancel.Left := 651;
                      SBT_LiefSave.Left := 651;
                      LAB_EKSeit.Left := 451;
                      EDT_LePreisUpdate.Left := 528;
                      EDT_LiefBemerkung.Width := 601;
                      BigEKScreenActive := false;
                 end; //** Else-Zweig->Kleines Fenster
   finally
      ReSizeRunning := false;
   end //** if (GetLinkagePointer^.Desktop_Width > DefaultWidth)
else
   SetToSmallScreen;
*)

//** 12.07.2022 *DB eigene Routine ChangeBiogartenCaptions
ChangeBiogartenCaptions;
LYI_BVNummer.Visible := (IsBiogarten);
LYI_BVST.Visible := LYI_BVNummer.Visible;
LYI_PackmittelArtikelnummer.Visible := (IsBiogarten); //** 30.07.2013

if ff = ff16zu9 then
   begin
        EDT_KB.BIOSDialogWidth := Trunc(EDT_KB.Width * 3.3);   //** Dialogbreite
        EDT_BEZ_1.BIOSDialogWidth := Trunc(EDT_BEZ_1.Width * 3.1); //** Dialogbreite
        EDT_BN.BIOSDialogWidth := Trunc(EDT_BN.Width * 3);   //** Dialogbreite
        EDT_ZN.BIOSDialogWidth := Trunc(EDT_ZN.Width * 3.9);   //** Dialogbreite
        EDT_ArtNr.BIOSDialogWidth := (Trunc(EDT_ArtNr.Width * 3));   //** Dialogbreite
     end
else
   begin
        EDT_KB.BIOSDialogWidth := Trunc(EDT_ArtNr.Width * 1.8);   //** Dialogbreite
        EDT_BEZ_1.BIOSDialogWidth := Trunc(EDT_ArtNr.Width * 1.8); //** Dialogbreite
        EDT_BN.BIOSDialogWidth := Trunc(EDT_ArtNr.Width * 1.8);   //** Dialogbreite
        EDT_ZN.BIOSDialogWidth := Trunc(EDT_ArtNr.Width * 1.8);   //** Dialogbreite
        EDT_ArtNr.BIOSDialogWidth := (Trunc(EDT_ArtNr.Width * 1.8));   //** Dialogbreite
   end;

end; //** procedure FormResize


(******************************************************************************)
(***     ReadBezForFremdKalk                                                ***)
(******************************************************************************)

function TFRM_DobosLV.ReadBezForFremdKalk(const ABigScreen : boolean; const AKZ : string) : boolean;
begin

try
   //** Änderung 12) Begin und EndUpdate vom Layoutcontrol
   LYC_Lagerverwaltung.BeginUpdate;
   case Get1stChar(AKZ) of
        'F' : begin
                   LYI_LiefEK1.Caption := rs_LV_Einmal;
                   LYI_LiefEK2.Caption := rs_LV_MaterialDP;
                   LYI_LiefEK3.Caption := rs_LV_RuestkostenDP;
                   LYI_LiefEK4.Caption := rs_LV_FertigungDP;
                   LYI_LiefEK5.Caption := rs_LV_FremdFix;
                   LYI_LiefEK6.Caption := rs_LV_FremdVar;
                   LYI_LiefEK7.Caption := rs_LV_FremdMin;
                   LYI_LiefEK8.Caption := ' ';
                   LYI_LiefEK9.Caption := ' ';
                   LYI_LiefEK10.Caption := rs_LV_PosMin;
              end; //** case 'F'

        'S' : begin
                   LYI_LiefEK10.Caption := rs_LV_PosMin;
              end; //** case 'S'
   end; //** case Get1stChar(AKZ)
finally
   LYC_Lagerverwaltung.EndUpdate;
end; //** try..finally
//** Änderung 12)
end; //** function TFRM_DobosLV.ReadBezForFremdKalk(true);


(******************************************************************************)
(***      MNI_FliessText: OnClick                                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_FliessTextClick(Sender: TObject);
var
   Liste : TStringList;

begin
inherited;
try
   try
      Liste := TStringList.Create;
      with Liste do
           begin
                Clear;
                Add(EDT_Bez_1.Text);
                Add(EDT_Bez_2.Text);
                Add(EDT_Bez_3.Text);
                Add(EDT_Bez_4.Text);
                Add(EDT_Bez_5.Text);
                Add(EDT_Bez_6.Text);
                Add(EDT_Bez_7.Text);
                Add(EDT_Bez_8.Text);
           end; //** with Liste do

      if EditFliessText(Liste, Self) then
         with Liste do
              begin
                   //** Liste Einfügen
                   while Liste.Count < 8 do
                         Add(' ');
                   //** ... Eine aus mehreren Schritten...
                   EDT_Bez_1.Text := TrimRight(Copy(Liste.Strings[0],1,30));
                   EDT_Bez_1Exit(EDT_Bez_1);
                   if AQY_ArtikelStamm.State in [dsInsert, dsEdit] then
                      begin
                           //** ... Eine aus mehreren Schritten...
                           AQY_ArtikelStammBEZ_2.AsString := TrimRight(Copy(Liste.Strings[1],1,30));
                           AQY_ArtikelStammBEZ_3.AsString := TrimRight(Copy(Liste.Strings[2],1,30));
                           AQY_ArtikelStammBEZ_4.AsString := TrimRight(Copy(Liste.Strings[3],1,30));
                           AQY_ArtikelStammBEZ_5.AsString := TrimRight(Copy(Liste.Strings[4],1,30));
                           AQY_ArtikelStammBEZ_6.AsString := TrimRight(Copy(Liste.Strings[5],1,30));
                           AQY_ArtikelStammBEZ_7.AsString := TrimRight(Copy(Liste.Strings[6],1,30));
                           AQY_ArtikelStammBEZ_8.AsString := TrimRight(Copy(Liste.Strings[7],1,30));
                     end; //** if AQY_ArtikelStamm.State in [dsInsert, dsEdit] then
              end; //** with Liste do

   except
      on E:Exception do
         ShowMessage(E.Message);
   end; //** try.except

finally
   FreeAndNil(Liste);

end; //** try..finally

end; //** procedure MNI_FliessTextClick


(******************************************************************************)
(***      MNI_FremdFliessText: OnClick                                      ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_FremdFliessTextClick(Sender: TObject);
var
   Liste : TStringList;

begin
inherited;
try
   try
      Liste := TStringList.Create;
      with Liste do
           begin
                Clear;
                Add(EDT_FBez_1.Text);
                Add(EDT_FBez_2.Text);
                Add(EDT_FBez_3.Text);
                Add(EDT_FBez_4.Text);
                Add(EDT_FBez_5.Text);
                Add(EDT_FBez_6.Text);
                Add(EDT_FBez_7.Text);
                Add(EDT_FBez_8.Text);
           end; //** with Liste do

      if EditFliessText(Liste, Self) then
         with Liste do
              begin
                   //** Liste Einfügen
                   while Liste.Count < 8 do
                         Add(' ');
                   if AQY_FremdTexte.State in [dsInsert, dsEdit] then
                      begin
                           //** ... Eine aus mehreren Schritten...
                           AQY_FremdTexteBEZ_1.AsString := TrimRight(Copy(Liste.Strings[0],1,30));
                           AQY_FremdTexteBEZ_2.AsString := TrimRight(Copy(Liste.Strings[1],1,30));
                           AQY_FremdTexteBEZ_3.AsString := TrimRight(Copy(Liste.Strings[2],1,30));
                           AQY_FremdTexteBEZ_4.AsString := TrimRight(Copy(Liste.Strings[3],1,30));
                           AQY_FremdTexteBEZ_5.AsString := TrimRight(Copy(Liste.Strings[4],1,30));
                           AQY_FremdTexteBEZ_6.AsString := TrimRight(Copy(Liste.Strings[5],1,30));
                           AQY_FremdTexteBEZ_7.AsString := TrimRight(Copy(Liste.Strings[6],1,30));
                           AQY_FremdTexteBEZ_8.AsString := TrimRight(Copy(Liste.Strings[7],1,30));
                     end; //** if AQY_FremdTexte.State in [dsInsert, dsEdit] then
              end; //** with Liste do

   except
      on E:Exception do
         ShowMessage(E.Message);
   end; //** try.except

finally
   FreeAndNil(Liste);

end; //** try..finally

end; //** procedure MNI_FremdFliessTextClick


(******************************************************************************)
(***   !SCopyStueckliste                                                    ***)
(******************************************************************************)

procedure TFRM_DobosLV.CopyStueckliste;
var
   NeueArtNr : string;
   c : integer;

begin

NeueArtNr := SQLTextString(TrimRight(AQY_ArtikelStammARTNR.AsString));
c := 0;

with AQY_Divers do
     try
        if Active then
           Close;
        Connection := GetDobosADB;
        SQL.Clear;
        SQL.Add('INSERT INTO SL_KOPF SELECT '''+NeueArtNr+''', '
               +'VARIANTE, VORLAUF_TAGE, ERSTELLER, TYP, BEMERKUNG, ANLAGE_DATUM, '
               +'AENDERUNG_DATUM, ANLAGE_USER, AENDERUNG_USER, 0 FROM SL_KOPF WHERE ARTNR = '''
               +SQLTextString(CopyFromArtNr)+''' AND VARIANTE = 0 '); //** Status immer 0 setzen
        UCExecSQL(AQY_Divers);

        SQL.Clear;
        SQL.Add('UPDATE SL_KOPF SET ANLAGE_DATUM = '+''''+shbDateToStr(Trunc(now))+''', '
               +'ANLAGE_USER = '+IntToStr(GetLinkagePointer^.UserNummer)+', '
               +'AENDERUNG_DATUM = '+''''+NullDatum+''', '
               +'AENDERUNG_USER = 0 '
               +'WHERE ARTNR = '''+NeueArtNr+''' AND VARIANTE = 0 ');
        UCExecSQL(AQY_Divers);

        SQL.Clear;
        //!!EditMark!!:SLPostenÄnderungen
        SQL.Add('INSERT INTO SL_POSTEN SELECT '''+NeueArtNr+''', '
               +'VARIANTE, POS, UNTER_ARTNR, UVARIANTE, MENGE, POSITIONS_NR, SW, BEMERKUNG, BEMERKUNG_2'
               +', BEREITSTELLUNGSSCHRITT '
               +'FROM SL_POSTEN WHERE ARTNR = '''
               +SQLTextString(CopyFromArtNr)+''' AND VARIANTE = 0 ');
        UCExecSQL(AQY_Divers);

        SQL.Clear;
        SQL.Add('SELECT COUNT(*) FROM SL_KOPF WHERE ARTNR = '''+SQLTextString(NeueArtNr)+''' AND VARIANTE = 0' );
        UCOpenSQL(AQY_Divers);

        try
           c := Fields[0].AsInteger;
        except
           c := 0;
        end; //** try..except

        if c > 0 then
           AQY_ArtikelStammSL_JN.AsString := Ja
        else
           AQY_ArtikelStammSL_JN.AsString := Nein;

        SQL.Clear;

        if Active then
           Close;
     except
        on E:Exception do
           ShowMessage(E.Message);

     end; //** try..except

end; //** procedure CopyStueckliste


(******************************************************************************)
(***      CopyArbeitsplan                                                   ***)
(******************************************************************************)

procedure TFRM_DobosLV.CopyArbeitsplan;
var
   mRevision,
   mCopyFromArtNr,
   NeueArtNr : string;
   mAPIdIndex,
   c : integer;
   FSuchSTDParams : TSuchSTDParams;
   mVorgabeLager    : integer;        //** 07.08.2017 SM
   mSTDVorgabeLager : integer;        //** 07.08.2017 SM

         (*********************************************************************)
         (***      lokale function GetSTDVorgabeLager  - 07.08.2017 SM      ***)
         (*********************************************************************)
          function GetSTDVorgabeLager : integer;
          var
             AValues : array [0..0] of Variant;

          begin

          result := -1;
          if ReadAnyFields (GetDobosADB,
                            'DV_PARAMETER',
                            ' ',
                            ['VORGABE_ZUGANG_LAGER'],
                            AValues) then
             try
                result := AValues[0];
             except
             end; //** try..except

          end; //** lokale function GetSTDVorgabeLager

(******************************************************************************)
(***  Start der procedure CopyArbeitsplan                                   ***)
(******************************************************************************)

begin

NeueArtNr := SQLTextString(TrimRight(AQY_ArtikelStammARTNR.AsString));
c := 0;
mRevision := '';
//** Anzahl Revisionen ermitteln
with AQY_Divers do
     try
        if Active then
           Close;
        Connection := GetDobosADB;
        SQL.Clear;
        SQL.Add('SELECT REVISION FROM DV_STD_KOPF WHERE HAUPT_ARTNR = '
        +''''+CopyFromArtNr+''' ORDER BY REVISION DESC ');
        UCOpenSQL(AQY_Divers);
        c := RecordCount;
        if not EOF then
           mRevision := Fields[0].AsString;
        Close;
        if c < 1 then
           Exit;

     except
        on E:Exception do
           ShowMessage(E.Message);
     end; //** try..except

mCopyFromArtNr := CopyFromArtNr;
if c > 1 then
   with FSuchSTDParams  do
        try
           AFunction := 0;
           AHauptArtNr := CopyFromArtNr;
           ARevision := '';
           AWhereString := '';
           ASelBitMap := nil;
           ASelLagerBitMap := nil;
           AListPointer := nil;
           AComponent := Self;
           if (Call (dnDavosCommon, 'suchenstd', @FSuchSTDParams) = 1) then
              begin
                   if mCopyFromArtNr <> AHauptArtNr then
                      mCopyFromArtNr := AHauptArtNr;
                   mRevision := ARevision;
              end
           else
              Exit;

        except
           on E:Exception do
              ShowMessage(E.Message);
        end; //** try..except

//** 07.08.2017 SM - Vorgabelager aus AP nicht übernehmen - Mail Yamaichi/Hr.Brumund vom 04.08.2017
mVorgabeLager := AQY_ArtikelStammVORGABELAGER_ZU_DV.AsInteger;  //** vom kopierten Artikel
mSTDVorgabeLager := GetStdVorgabeLager;   //** Lesen Standard-Davos-Vorgabelager
if mVorgabeLager = -1 then
   if mSTDVorgabeLager < 0 then
      mVorgabeLager := 1
   else
      mVorgabeLager := mSTDVorgabeLager;

mAPIdIndex := 0;
//** Nächste APId holen, zum Schreiben zwingen damit Schlüssel angelegt ist und später upgedated werden kann
CallNummern(GetDobosADB, nil, numLitNEXTDVAPIDNR, numGetNext, mAPIdIndex);
with AQY_Divers do
     try
        if Active then
           Close;
        Connection := GetDobosADB;
        SQL.Clear;
        //!!EditMark!!:STDKopfTabellenänderungen
        SQL.Add('INSERT INTO DV_STD_KOPF SELECT '''+NeueArtNr+''', '
               +'REVISION, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, SL_JN, RZ_SEK, LZ_SEK, '
               +'SUMME_RK, SUMME_SK, SUMME_MK, ERSTELLER, TYP, BEMERKUNG, '
               +''''+shbDateToStr(Trunc(now))+''', '         //** ANLAGE_DATUM
               +''''+NullDatum+''', '                        //** AENDERUNG_DATUM
               +IntToStr(GetLinkagePointer^.UserNummer)+', ' //** ANLAGE_USER
               +'0, '                                        //** AENDERUNG_USER
//**07.08.2017 +'VARIANTE, SW1, SW2, SW3, SPERR_KZ, VORGABE_ZUGANG_LAGER, D2_PRIORITAET, BDE_VERTEILTE_MELDUNGEN, '
               +'VARIANTE, SW1, SW2, SW3, SPERR_KZ, '                            //** 07.08.2017
               +IntToStr(mVorgabeLager) + ', '                                   //** 07.08.2017
               +'D2_PRIORITAET, BDE_VERTEILTE_MELDUNGEN, '                       //** 07.08.2017
               //** 9.5
               //** 15 Summen, 1 Durchschnittszähler
               +'SUMME_GK_PLAN_EINMAL, SUMME_GK_PLAN_FERT, SUMME_GK_PLAN_MAT, SUMME_GK_PLAN_FREMD, SUMME_GK_PLAN_RUEST, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, '
               //** Neue Felder 10.0 Status 0 setzen
               +'0, '
               //** Neue Felder 10.2
               +'D2_MAN_OPT_ZIEL, WERKZEUGKOSTEN, '
               //** Neue Felder 11.0
               +'SL_EINZELMODE, FE_AUFTRAG_NOPRINT, '
               //** neue Felder 12.1
               +'UZ_SEK '  //** UZ_SEK
               +'FROM DV_STD_KOPF WHERE HAUPT_ARTNR = '''
               +SQLTextString(mCopyFromArtNr)+''' AND REVISION = '''+SQLTextString(mRevision)+''' ');
        UCExecSQL(AQY_Divers);

        SQL.Clear;
        //!!EditMark!!:STDPostenTabellenänderungen
        SQL.Add('INSERT INTO DV_STD_POSTEN SELECT '''+NeueArtNr+''', '
               //** 03.03.2010: Durch_Menge wird als 0 übergeben
//**           +'REVISION, POS, ARTNR, ART, REFA, DRUCK_FLAG, FB_KOPIE, MEHR_PLATZ, MENGE, DURCH_MENGE, '
               +'REVISION, POS, ARTNR, ART, REFA, DRUCK_FLAG, FB_KOPIE, MEHR_PLATZ, MENGE, 0, '
               +'0, WERT, 0.0, 0.0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, '
               +'TEXT_1, TEXT_2, TEXT_3, TEXT_4, TEXT_5, TEXT_6, TEXT_7, BEMERKUNG, V_KZ, '
               +'HM1_NUMMER, HM2_NUMMER, HM3_NUMMER, HM4_NUMMER, HM5_NUMMER, '
               +'HM1_TEXT, HM2_TEXT, HM3_TEXT, HM4_TEXT, HM5_TEXT, BERECHNUNGS_ART, '
               +'DURCHMESSER, LAENGE, BREITE, HOEHE, ENTNAHME, RZ_SEK, LZ_SEK, UZ_SEK, '
               +'0, 0, 0, 0, '
               +'VORGABE_ENTNAHME_LAGER, '
               +'0, '
               +'ZUSCHLAG, ZUSCHLAG_BP, TERMNR_AV, D2_UEBERLAPPEN, D2_UEBERLAPPEN_PROZ, '
               +'PLAN_BZ_SEK, MEILENSTEIN, D2_RK1, D2_RK2, ANZAHL_BEDIENER, MMB, '
               +'EINMALKOSTEN, DISPO2000_PM_ANZAHL_PALETTEN, DISPO2000_PM_ANZAHL_TEILE, FF_ME, FF_ME_FAKTOR, '
               //** Neue Felder 10.0
               +'FUELLMENGE, D2_PERSONALQUOTE, D2_BEVORZUGTE_SCHICHT, D2_ALTERNATE_KAP1, D2_ALTERNATE_KAP2, D2_ALTERNATE_KAP3, '
               //** Neue Felder 10.1 - 11.05.2012
               +'D2_PLANUNGS_KZ, D2_AG_FOLGE, PRUEF_PFLICHTIG, EK, EK_FLAG, '
               +'HM_1_FEINPLANUNG, HM_2_FEINPLANUNG, HM_3_FEINPLANUNG, HM_4_FEINPLANUNG, HM_5_FEINPLANUNG, '
               //** Neue Felder 10.2 - 15.04.2013
               +'FF_PLAN_WERT_FIX, FF_PLAN_WERT_VAR, FF_PLAN_WERT_MINDEST, '
               //** Neue Felder 11.1 29.2.2016 fehlte! DB
               +'FERTIGUNGSFOLGE, MMB_PLAN_PROZENTSATZ, '
               //** 12.1
               +'EINSTELLTEIL, '
               +'0, 0 ' //** LE_MDELZSEK, DURCH_MDELZSEK
               +'FROM DV_STD_POSTEN WHERE HAUPT_ARTNR = '''
               +SQLTextString(mCopyFromArtNr)+''' AND REVISION = '''+SQLTextString(mRevision)+''' ');
        UCExecSQL(AQY_Divers);
        SQL.Clear;

        SQL.Add('DECLARE @RC INTEGER '
                //** LengthOfArtNr !!
                +'DECLARE @HAUPT_ARTNR NVARCHAR(30) '
                +'DECLARE @REVISION NCHAR(3) '
                +'DECLARE @POS INTEGER '
                +'SELECT @RC = '+IntToStr(mAPIdIndex)+' '
                +'DECLARE CUR SCROLL CURSOR FOR SELECT HAUPT_ARTNR, REVISION, POS FROM DV_STD_POSTEN '
                +'WHERE HAUPT_ARTNR = '''+SQLTextString(NeueArtNr)+''' AND REVISION = '''+SQLTextString(mRevision)+''' '
                +'ORDER BY HAUPT_ARTNR, REVISION, POS '
                +'OPEN CUR '
                +'FETCH FIRST FROM CUR INTO @HAUPT_ARTNR, @REVISION, @POS '
                +'WHILE @@FETCH_STATUS = 0 '
                +'BEGIN '
                +'SELECT @RC = @RC + 1 '
                +'UPDATE DV_STD_POSTEN SET APID_INDEX = @RC WHERE (HAUPT_ARTNR = @HAUPT_ARTNR AND REVISION = @REVISION AND POS = @POS) '
                +'FETCH NEXT FROM CUR INTO @HAUPT_ARTNR, @REVISION, @POS '
                +'END '
                +'DEALLOCATE CUR '
                +'UPDATE NUMMERN SET WERT = @RC WHERE NUMMERN_ART = ''NEXTDVAPIDNR'' ');
        UCExecSQL(AQY_Divers);
        if Active then
           Close;
        SQL.Clear;

     except
        on E:Exception do
           ShowMessage(E.Message);

     end; //** try..except

end; //** procedure TFRM_DobosLV.CopyArbeitsplan


(******************************************************************************)
(***     GetArtNrUndBez                                                     ***)
(******************************************************************************)

function TFRM_DobosLV.GetArtNrUndBez(const AString: string;
                                     var AArtNr   : string;
                                     var AArtBez  : string;
                                     var AArtBez2 : string;
                                     var AZN      : string): boolean;
var
   Dummy,
   s : string;

const
     tkDeli = #9;

                   (***********************************************************)
                   (***     GetNextToken                                    ***)
                   (***********************************************************)

                   function GetNextToken(var AI: string): string;
                   var
                      s : string;
                      b : boolean;

                   begin

                   s := AI;
                   result := '';
                   if Length(s) < 1 then
                      Exit;

                   b := false;
                   while not b do
                         begin
                              if Length(s) < 1 then
                                 begin
                                      b := true;
                                      Break;
                                 end; //** if Length(s) < 1

                              //** Token erreicht?
                              if s[1] = tkDeli then
                                 begin
                                      if Length(s) = 1 then
                                         s := ''
                                      else
                                         s := Copy(s,2,Length(s)-1);
                                      b := true;
                                      Break;
                                 end; //** if s[1] = tkDeli

                              result := result + s[1];
                              if Length(s) = 1 then
                                 s := ''
                              else
                                 s := Copy(s,2,Length(s)-1);

                         end; //** while not b do

                   AI := s;

                   end; //** function GetNextToken

(******************************************************************************)
(***   Start der procedure GetArtNrUndBez                                   ***)
(******************************************************************************)

begin

result := false;
AArtNr := '';
AArtBez  := '';
AArtBez2 := '';
AZN := '';
s := TrimRight(AString);
if IsSpace(s) then
   Exit;

AArtNr := AnsiUpperCase(GetNextToken(s));
if IsSpace(AArtNr) then
   Exit;

AArtBez := GetNextToken(s);
if Length(AArtBez) > 30 then
   AArtBez := Copy(AArtBez,1,30);

AArtBez2 := GetNextToken(s);
if Length(AArtBez2) > 30 then
   AArtBez2 := Copy(AArtBez2,1,30);

Dummy := GetNextToken(s); //** PosNr
Dummy := GetNextToken(s); //** Menge
Dummy := '';
Dummy := GetNextToken(s); //** ZN
Dummy := Trim(AnsiUpperCase(Dummy));
if Length(Dummy) > 25 then
   Dummy := Copy(Dummy,1,25);
if not IsSpace(Dummy) then
   AZN := Dummy;

if (Length(AArtNr) <= LengthOfArtNr) then
   result := true;

end; //** function GetArtNrUndBez


(******************************************************************************)
(***      CBX_BildStretch: OnClick    D2010                                 ***)
(******************************************************************************)

procedure TFRM_DobosLV.CBX_BildStretchClick(Sender: TObject);
begin

inherited;
if CBX_BildStretch.Checked then
   IMS_Bilder.ImageFitMode := ifmFit
else
   IMS_Bilder.ImageFitMode := ifmNormal;
end; //** procedure CBX_BildStretchClick


(******************************************************************************)
(***      CBX_LiefGesperrt: OnClick                                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.CBX_LiefGesperrtClick(Sender: TObject);
begin

inherited;

if AQY_Lieferant.Active then
   if AQY_LieferantGESPERRT.IsNull then
      CBX_LiefGesperrt.Caption := rs_LV_notGesperrt
   else
      if CBX_LiefGesperrt.State = cbGrayed then
         CBX_LiefGesperrt.Caption := rs_LV_BedingtGesperrt
      else
         if CBX_LiefGesperrt.State = cbUnChecked then
            CBX_LiefGesperrt.Caption := rs_LV_NotGesperrt
         else
            CBX_LiefGesperrt.Caption := rs_LV_Gesperrt;

end; //** procedure CBX_LiefGesperrtClick


(******************************************************************************)
(***   MNI_SichtenFehlmengenClick: OnClick                                  ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_SichtenFehlmengenClick(Sender: TObject);
var
   FSichtenFehlmengenParams : TSichtenFehlmengenParams;
   i : integer;

begin

inherited;

with FSichtenFehlmengenParams do
     begin
          AFunction := 0;
          AArtNrVon := '';
          AArtNrBis := 'ZZZZZZZZZZ';
          ABarcodeVon := 0;
          ABarcodeBis := 999999999;
          AForm := self;
     end; //** with FSichtenFehlmengenParams do

i := Call (dnDobosCommon, 'sichtenfehlmengen', @FSichtenFehlmengenParams);

end; //** procedure MNI_SichtenFehlmengenClick


(******************************************************************************)
(***      FormActivate                                                      ***)
(******************************************************************************)

procedure TFRM_DobosLV.FormActivate(Sender: TObject);
begin

inherited; 
if (not WindowReady) then
   Exit;
//** bei manchen Rechnern Grafikfehler beim Wechseln in active Module, daher mal neu zeichnen
if not (Clipboard.HasFormat(SHBArrayClipBoardFormat)) then
   Exit;

UpdateButtons;

end; //** procedure FormActivate


(******************************************************************************)
(***     MNI_Bereinigungslauf: OnClick                                      ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_BereinigungslaufClick(Sender: TObject);
begin

inherited;

if (not (Artikelbereinigung(self, KeyList))) then
   ShowMessage (rs_LV_ABnichtGestartet)
else
   begin
        if KeyList.Count > 0 then
           BTN_SelNavFirstClick(nil)
        else
           begin
                BGP_SelNavBarGruppe.Visible := ivNever;
                KeyList.Clear;
                KeyIndex := -1;
                UpdateButtons;
                BTN_NavFirstClick(BTN_NavFirst);
           end;
   end; //** Else-Zweig

end; //** procedure MNI_BereinigungslaufClick


(******************************************************************************)
(***     function ArtikelinM02Yamaichi                                      ***)
(******************************************************************************)

function TFRM_DobosLV.ArtikelinM02Yamaichi: boolean;
var
   AValues : array [0..0] of Variant;
   SQLString : string;
   i : integer;
   inMandant,
   vonMandant  : string;

begin

result := false;
SQLString := '';
i := 0;

inMandant := 'M02';
vonMandant := 'M01';
if GetLinkagePointer^.MRecord.Mandant = 2 then
   begin
        inMandant := 'M01';
        vonMandant := 'M02';
   end; //** if GetLinkagePointer^.MRecord.Mandant = 2 then

//** ArtikelStamm
try
   with AQY_Divers do
        begin
             if Active then
                Close;
             Connection := GetDobosADB;
             SQL.Clear;

             if ReadAnyFields (GetDobosADB,
                         inMandant +'.dbo.ARTIKEL_STAMM',   //** 'M02.dbo.ARTIKEL_STAMM',
                         'WHERE ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''' ',
                         ['COUNT(*)'],
                         AValues) then
             try
                //!!EditMark!!:ArtikelStammänderungen
                if AValues[0] > 0 then
                   SQLString := 'UPDATE '+inMandant+'.dbo.ARTIKEL_STAMM SET ' //** 'UPDATE M02.dbo.ARTIKEL_STAMM SET '
                                +'KB = b.KB, '
                                +'ZN = b.ZN, '
                                +'BN = b.BN, '
                                +'BEZ_1 = b.BEZ_1, '
                                +'BEZ_2 = b.BEZ_2, '
                                +'BEZ_3 = b.BEZ_3, '
                                +'BEZ_4 = b.BEZ_4, '
                                +'BEZ_5 = b.BEZ_5, '
                                +'BEZ_6 = b.BEZ_6, '
                                +'BEZ_7 = b.BEZ_7, '
                                +'BEZ_8 = b.BEZ_8, '
                                +'EAN_NUMMER = b.EAN_NUMMER, '
                                +'GEWICHT = b.GEWICHT, '
                                +'V_EINHEIT = b.V_EINHEIT, '
                                +'GUE_BEME = b.GUE_BEME, '
                                +'WG = b.WG, '
                              //  +'PE_VK = b.PE_VK, '
                                +'STATUS = b.STATUS, '
                                +'US = b.US, '
                              //  +'SL_JN = b.SL_JN, '
                              //  +'MS_JN = b.MS_JN, '
                              //  +'EM_JN = b.EM_JN, '
                                +'ME = b.ME, '
                                +'DK_1 = b.DK_1, '
                                +'DK_2 = b.DK_2, '
                              // +'DK_3 = b.DK_3, '
                                +'DK_4 = b.DK_4, '
                                +'DK_5 = b.DK_5, '
                               // +'C1 C1,
                               // +'C2 = b.C2, '  //** IB 15.07.2015
                               // +'C3 C3,
                               // +'C4 C4,
                                +'C5 = b.C5, '
                               // +'C6 C6,
                               // +'C7 C7,
                               // +'C8 C8,
                               // +'C9 C9,
                                +'C10 = b.C10, '  //** IB 15.07.2015
                               //** Fr. König 13.11.2013: kein Zeichn. Pfad übertragen *OB
                               // +'VIEWER_PFAD = b.VIEWER_PFAD, '
                               // +'WARENNUMMER = b.WARENNUMMER, ' //** !! FEHLER: DOPPELT ANGEGEBEN

                               // +'URSPRUNG_LAND = b.URSPRUNG_LAND,'        /** !! FEHLER: DOPPELT ANGEGEBEN
                              //  +'URSPRUNG_REGION = b.URSPRUNG_REGION, '   /** !! FEHLER: DOPPELT ANGEGEBEN
                              //  +'MASSEINHEIT = b.MASSEINHEIT, '           /** !! FEHLER: DOPPELT ANGEGEBEN
                                +'EM1_NUMMER = b.EM1_NUMMER, '
                                +'EM2_NUMMER = b.EM2_NUMMER, '
                                +'EM3_NUMMER = b.EM3_NUMMER, '
                                +'EM1_METHODE = b.EM1_METHODE, '
                                +'EM2_METHODE = b.EM2_METHODE, '
                                +'EM3_METHODE = b.EM3_METHODE, '
                                +'EM1_ANTEIL = b.EM1_ANTEIL, '
                                +'EM2_ANTEIL = b.EM2_ANTEIL, '
                                +'EM3_ANTEIL = b.EM3_ANTEIL, '
                                +'DURCHMESSER = b.DURCHMESSER, '
                                +'LAENGE = b.LAENGE, '
                                +'BREITE = b.BREITE, '
                                +'HOEHE = b.HOEHE, '
                               //+'SPEZ_GEWICHT = b.SPEZ_GEWICHT, '
                                +'B_BASIS = b.B_BASIS, '
                                +'P_BASIS = b.P_BASIS, '
                                //** neu Mail Frau König 26.9.2013
                                +'WARENNUMMER = b.WARENNUMMER, '
                                +'URSPRUNG_LAND = b.URSPRUNG_LAND, '
                                +'URSPRUNG_REGION = b.URSPRUNG_REGION, '
                                +'MASSEINHEIT = b.MASSEINHEIT, '
                                +'AL_NUMMER = b.AL_NUMMER, '
                                +'ECCN_NUMMER = b.ECCN_NUMMER, '
                                +'ZOLLTARIF_NUMMER = b.ZOLLTARIF_NUMMER, '
                                +'PRAEFERENZ = b.PRAEFERENZ, '
                                //** Ende neu

                                //** 11.1
                                +'PRAEFERENZ_ARTIKEL = b.PRAEFERENZ_ARTIKEL, '
                                +'PRAEFERENZ_ANTEIL = b.PRAEFERENZ_ANTEIL, '
                                +'PRAEFERENZ_UE_DATUM = b.PRAEFERENZ_UE_DATUM, '
                                +'VERPACKUNGSKOSTEN = b.VERPACKUNGSKOSTEN, '
                                +'KALK_AUFSCHLAG_GRUPPE = b.KALK_AUFSCHLAG_GRUPPE, '
                                +'HYPERLINK = b.HYPERLINK, '
                                //** 11.1 Ende

                                +'ANLAGE_DATUM = b.ANLAGE_DATUM, '
                                +'ANLAGE_USER_NR = b.ANLAGE_USER_NR, '
                                +'AENDERUNG_USER_NR = b.AENDERUNG_USER_NR, '
                               // +'KALK_KZ = b.KALK_KZ, ' C9 sollte auch nicht übertragen werden
                               // +'KALK_KZ_VK = b.KALK_KZ_VK, ' C9 sollte auch nicht übertragen werden
                               //** IB 29.01.2013: Anruf von Frau König - nicht übernehmen
                               // +'DISPO_STOP = b.DISPO_STOP, '
                                +'ZN_REV = b.ZN_REV '
                                +'FROM '+ inMandant + '.dbo.ARTIKEL_STAMM a, ' //** +'FROM M02.dbo.ARTIKEL_STAMM a, '
                                +vonMandant+'.dbo.ARTIKEL_STAMM b WHERE a.ARTNR = b.ARTNR ' //** +'M01.dbo.ARTIKEL_STAMM b WHERE a.ARTNR = b.ARTNR '
                                +'AND a.ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''''
                                //+'JOIN M01.dbo.ARTIKEL_STAMM AS b ON a.ARTNR = b.ARTNR '
                                //+'WHERE a.ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''''

                else
                   //!!EditMark!!:ArtikelStammänderungen
                   SQLString := 'INSERT INTO '+inMandant+'.dbo.ARTIKEL_STAMM ' //** 'INSERT INTO M02.dbo.ARTIKEL_STAMM '
                               +'( '
                               +'ARTNR, KB, ZN, BN, BEZ_1, BEZ_2, BEZ_3, BEZ_4, BEZ_5, BEZ_6, '
                               +'BEZ_7, BEZ_8, EAN_NUMMER, INFO, PRL_POS, GEWICHT, V_EINHEIT, '
                               +'ARBEITSPREIS, GUE_BEME, EK, DURCH_EK, MIN_DB, WG, RG, GARANTIE_ZEIT, '
                               +'RASTER_VK, PE_VK, STATUS, US, SL_JN, MS_JN, EM_JN, ME, DK_1, '
                               +'DK_2, DK_3, DK_4, DK_5, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, '
                               +'SACHMERKMAL, VIEWER_PFAD, WARENNUMMER, URSPRUNG_LAND, URSPRUNG_REGION, '
                               +'MASSEINHEIT, EM1_NUMMER, EM2_NUMMER, EM3_NUMMER, EM1_METHODE, EM2_METHODE, '
                               +'EM3_METHODE, EM1_ANTEIL, EM2_ANTEIL, EM3_ANTEIL, DURCHMESSER, '
                               +'LAENGE, BREITE, HOEHE, SPEZ_GEWICHT, B_BASIS, P_BASIS, LEAB, LEZU, '
                               +'ANLAGE_DATUM, AENDERUNG_DATUM, ANLAGE_USER_NR, AENDERUNG_USER_NR, KALK_KZ, DISPO_STOP, KALK_KZ_VK, ZN_REV, '
                               //** 10.0
                               +'MASSE_SIND_MM, MASSE_FUER_FA, AMM_PRINT, '
                               +'AMM_ART_KEY1, AMM_ART_KEY2, AMM_ART_KEY3, AMM_ART_KEY4, AMM_ART_KEY5, '
                               +'AMM_INHALT_KEY1, AMM_INHALT_KEY2, AMM_INHALT_KEY3, '
                               +'AMM_INHALT_FREI4, AMM_INHALT_FREI5, BV_PLAN_NUMMER, BV_SI_TAGE, '
                               //** 10.1
                               +'PRUEF_PFLICHTIG, MASSE_FREITEXT, PDM_GEPFLEGT, AL_NUMMER, PACKMITTEL, '
                               +'PACKMITTEL_VERSION, PACKMITTEL_STUECK_IN_PM, PACKMITTEL_IST_PM, '
                               +'ECCN_NUMMER, ZOLLTARIF_NUMMER, PRAEFERENZ, FEINPLANUNG, '
                               //** 10.2
                               +'VORGABELAGER_ZU, VORGABELAGER_ZU_DV, VORGABELAGER_AB, VORGABELAGER_AB_DV, '
                               +'ALTERNATE_ARTNR_1, ALTERNATE_ARTNR_2, ALTERNATE_ARTNR_3, '
                               //** 11.0
                               +'CHARGENPFLICHTIG, PREISAENDERUNG_BEMERKUNG, '

                               //** 11.1
                               +'PRAEFERENZ_ARTIKEL, PRAEFERENZ_ANTEIL, PRAEFERENZ_UE_DATUM, '
                               +'VERPACKUNGSKOSTEN, KALK_AUFSCHLAG_GRUPPE, HYPERLINK, HIDE_BESTAND '
                               +' )'
                               +'SELECT '
                               +'ARTNR, KB, ZN, BN, BEZ_1, BEZ_2, BEZ_3, BEZ_4, BEZ_5, BEZ_6, '
                               +'BEZ_7, BEZ_8, EAN_NUMMER, '''', 0, GEWICHT, V_EINHEIT, '
                               +'0.0, GUE_BEME, 0.0, 0.0, 0.0, WG, 0, 0, '
  //** IB 02.12.2015 PEVK,EMJN +'0, PE_VK, STATUS, US, ''N'', ''N'', EM_JN, ME, DK_1, '
                               +'0, 1, STATUS, US, ''N'', ''N'', ''N'', ME, DK_1, '
     //** IB 15.07.2015        +'DK_2, DK_3, DK_4, DK_5, '''', C2, '''', '''', C5, '''', '''', '''', '''', '''', '
     //** IB 02.12.2015 DK3    +'DK_2, DK_3, DK_4, DK_5, '''', '''', '''', '''', C5, '''', '''', '''', '''', C10, '
                               +'DK_2, 1, DK_4, DK_5, '''', '''', '''', '''', C5, '''', '''', '''', '''', C10, '
                               +'''00000000000000000000'', '''', WARENNUMMER, URSPRUNG_LAND, URSPRUNG_REGION, '
                               +'MASSEINHEIT, EM1_NUMMER, EM2_NUMMER, EM3_NUMMER, EM1_METHODE, EM2_METHODE, '
                               +'EM3_METHODE, EM1_ANTEIL, EM2_ANTEIL, EM3_ANTEIL, DURCHMESSER, '
  //** IB 02.12.2015 SpezGew   +'LAENGE, BREITE, HOEHE, SPEZ_GEWICHT, B_BASIS, P_BASIS, ''01.01.1950'', ''01.01.1950'', '
                               +'LAENGE, BREITE, HOEHE, 0.00, B_BASIS, P_BASIS, ''01.01.1950'', ''01.01.1950'', '
  //** IB 02.12.2015 DispoStop +'ANLAGE_DATUM, ''01.01.1950'', ANLAGE_USER_NR, AENDERUNG_USER_NR, KALK_KZ, DISPO_STOP, KALK_KZ_VK, ZN_REV, '
                               +'ANLAGE_DATUM, ''01.01.1950'', ANLAGE_USER_NR, AENDERUNG_USER_NR, KALK_KZ, ''N'', KALK_KZ_VK, ZN_REV, '
                               //** 10.0
//** 02.06.2017 SM             +'MASSE_SIND_MM, MASSE_FUER_FA, AMM_PRINT, '
//** 02.06.2017 SM             +'AMM_ART_KEY1, AMM_ART_KEY2, AMM_ART_KEY3, AMM_ART_KEY4, AMM_ART_KEY5, '
//** 02.06.2017 SM             +'AMM_INHALT_KEY1, AMM_INHALT_KEY2, AMM_INHALT_KEY3, '
//** 02.06.2017 SM             +'AMM_INHALT_FREI4, AMM_INHALT_FREI5, BV_PLAN_NUMMER, BV_SI_TAGE,  '
                               //** 01.06.2017 SM - keine Übergabe der Kategorien und Merkmale
                               +'MASSE_SIND_MM, MASSE_FUER_FA, '                 //** 02.06.2017 SM
                               +'''N'', 0, 0, 0, 0, 0, 0, 0, 0, '''', '''', '    //** 02.06.2017 SM
                               +'BV_PLAN_NUMMER, BV_SI_TAGE, '                   //** 02.06.2017 SM
                               //** 10.1
                               +'PRUEF_PFLICHTIG, MASSE_FREITEXT, PDM_GEPFLEGT, AL_NUMMER, PACKMITTEL, '
                               +'PACKMITTEL_VERSION, PACKMITTEL_STUECK_IN_PM, PACKMITTEL_IST_PM, '
                               +'ECCN_NUMMER, ZOLLTARIF_NUMMER, PRAEFERENZ, FEINPLANUNG, '
                               //** 10.2
                               +'-1, -1, -1, -1, '  //**  +'VORGABELAGER_ZU, VORGABELAGER_ZU_DV, VORGABELAGER_AB, VORGABELAGER_AB_DV, '
                               +'ALTERNATE_ARTNR_1, ALTERNATE_ARTNR_2, ALTERNATE_ARTNR_3, '
                               //** 11.0
                               +'CHARGENPFLICHTIG, '''', ' //** PREISAENDERUNG_BEMERKUNG leer
                               //** 11.1
                               +'PRAEFERENZ_ARTIKEL, PRAEFERENZ_ANTEIL, PRAEFERENZ_UE_DATUM, '
                               +'VERPACKUNGSKOSTEN, KALK_AUFSCHLAG_GRUPPE, HYPERLINK, HIDE_BESTAND '
                               //** 11.1 Ende
                               +'FROM '+vonMandant+'.dbo.ARTIKEL_STAMM WHERE ARTNR = '''+Trim(EDT_ArtNr.Text)+''' '; //'FROM M01.dbo.ARTIKEL_STAMM WHERE ARTNR = '''+Trim(EDT_ArtNr.Text)+''' ';

                SQL.Add(SQLString);
                UCExecSQL(AQY_Divers);
                result := true;
                //Showmessage('Zeilen: ' +IntToStr(i))

             except
                on E:Exception do
                   begin
                        result := false;
                        ShowMessage(E.Message);
                   end; //** on E:Exception do
             end; //** try..except

        end; //** with AQY_Divers do
except
   on E:Exception do
      ShowMessage(E.Message);
end; //** try..except

//** 25.05.2021 PI - wenn Status von 1 oder 2 auf x gesetzt wird - Wichtige Hinweise löschen
//** 25.05.2021 PI - wenn Status von x auf 1 oder 2 gesetzt wird - Wichtige Hinweise löschen und im Anschluss übernehmen
if (EDT_STATUS.AsInteger <> YamaichiSaveStatus) and ((YamaichiSaveStatus IN [1,2]) or (EDT_STATUS.AsInteger IN [1,2])) then
   begin
        with AQY_Divers do
             try
                if Active then
                   Close;
                Connection := GetDobosADB;
                SQL.Clear;
                SQLString := ' DELETE '+inMandant+'.dbo.INFOBLATT WHERE ART = ''w'' AND SCHLUESSEL = '''+Trim(EDT_ArtNr.Text)+''' ';
                SQL.Add(SQLString);
                UCExecSQL(AQY_Divers);
                result := true;
             except
                on E:Exception do
                   begin
                        result := false;
                        ShowMessage(E.Message);
                   end; //** on E:Exception do
             end; //** try..except

   end; //** (EDT_STATUS.AsInteger <> YamaichiSaveStatus) and

//** 25.05.2021 PI - wenn Status von x auf 1 oder 2 gesetzt wird - Wichtige Hinweise übernehmen
if (EDT_STATUS.AsInteger <> YamaichiSaveStatus) and (EDT_STATUS.AsInteger IN [1,2]) then
   begin
        with AQY_Divers do
             try
                if Active then
                   Close;
                Connection := GetDobosADB;
                SQL.Clear;
                SQLString := ' INSERT INTO '+inMandant+'.dbo.INFOBLATT '
                           + ' SELECT ART, SCHLUESSEL, ''LAbf'', SCHLAGWORT_2, SCHLAGWORT_3, INHALT '
                           + ' FROM '+vonMandant+'.dbo.INFOBLATT WHERE ART = ''w'' AND SCHLUESSEL = '''+Trim(EDT_ArtNr.Text)+''' ';
                SQL.Add(SQLString);
                UCExecSQL(AQY_Divers);
                result := true;
             except
                on E:Exception do
                   begin
                        result := false;
                        ShowMessage(E.Message);
                   end; //** on E:Exception do
             end; //** try..except

   end; //** (EDT_STATUS.AsInteger <> YamaichiSaveStatus) and

if (EDT_STATUS.AsInteger <> YamaichiSaveStatus) then
   YamaichiSaveStatus := EDT_STATUS.AsInteger;

//** IB 19.02.2014 Übernahme FremdsprachenTexte
try
   with AQY_Divers do
        begin
             if Active then
                Close;
             Connection := GetDobosADB;
             SQL.Clear;

             if ReadAnyFields (GetDobosADB,
                         vonMandant +'.dbo.ARTIKEL_TEXTE',
                         'WHERE ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''' ',
                         ['COUNT(*)'],
                         AValues) then
                begin
                     if AValues[0] < 1 then
                        Exit;
                end;  //** if ReadAnyFields (GetDobosADB,


             if ReadAnyFields (GetDobosADB,
                         inMandant +'.dbo.ARTIKEL_TEXTE',
                         'WHERE ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''' ',
                         ['COUNT(*)'],
                         AValues) then
             try
                if AValues[0] > 0 then
                   begin
                        SQLString := 'DELETE '+inMandant+'.dbo.ARTIKEL_TEXTE WHERE ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''' ';
                        SQLString := SQLString + ' INSERT INTO '+inMandant+'.dbo.ARTIKEL_TEXTE SELECT * '
                                               + ' FROM '+vonMandant+'.dbo.ARTIKEL_TEXTE WHERE ARTNR = '''+Trim(EDT_ArtNr.Text)+''' ';
                   end
                else
                   SQLString := 'INSERT INTO '+inMandant+'.dbo.ARTIKEL_TEXTE '
                               +'SELECT * FROM '+vonMandant+'.dbo.ARTIKEL_TEXTE WHERE ARTNR = '''+Trim(EDT_ArtNr.Text)+''' ';

                SQL.Add(SQLString);
                UCExecSQL(AQY_Divers);
                result := true;

             except
                on E:Exception do
                   begin
                        result := false;
                        ShowMessage(E.Message);
                   end; //** on E:Exception do
             end; //** try..except

        end; //** with AQY_Divers do

except
   on E:Exception do
      ShowMessage(E.Message);
end; //** try..except

end; //** ArtikelinM02Yamaichi


(******************************************************************************)
(***     function ArtikelinM03Yamaichi                                      ***)
(******************************************************************************)

function TFRM_DobosLV.ArtikelinM03Yamaichi: boolean;
var
   AValues : array [0..0] of Variant;
   SQLString : string;
   i : integer;
   inMandant,
   vonMandant  : string;

begin

result := false;
SQLString := '';
i := 0;

inMandant := 'M03';
vonMandant := 'M01';
if GetLinkagePointer^.MRecord.Mandant = 2 then
   begin
        inMandant := 'M03';
        vonMandant := 'M02';
   end; //** if GetLinkagePointer^.MRecord.Mandant = 2 then

//** ArtikelStamm
try
   with AQY_Divers do
        begin
             if Active then
                Close;
             Connection := GetDobosADB;
             SQL.Clear;

             if ReadAnyFields (GetDobosADB,
                         inMandant +'.dbo.ARTIKEL_STAMM',   //** 'M02.dbo.ARTIKEL_STAMM',
                         'WHERE ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''' ',
                         ['COUNT(*)'],
                         AValues) then
             try
                //!!EditMark!!:ArtikelStammänderungen
                if AValues[0] > 0 then
                   SQLString := 'UPDATE '+inMandant+'.dbo.ARTIKEL_STAMM SET ' //** 'UPDATE M02.dbo.ARTIKEL_STAMM SET '
                                +'KB = b.KB, '
                                +'ZN = b.ZN, '
                                +'BN = b.BN, '
                                +'BEZ_1 = b.BEZ_1, '
                                +'BEZ_2 = b.BEZ_2, '
                                +'BEZ_3 = b.BEZ_3, '
                                +'BEZ_4 = b.BEZ_4, '
                                +'BEZ_5 = b.BEZ_5, '
                                +'BEZ_6 = b.BEZ_6, '
                                +'BEZ_7 = b.BEZ_7, '
                                +'BEZ_8 = b.BEZ_8, '
                                +'EAN_NUMMER = b.EAN_NUMMER, '
                                +'GEWICHT = b.GEWICHT, '
                                +'V_EINHEIT = b.V_EINHEIT, '
                              //  +'GUE_BEME = b.GUE_BEME, '   //** Unterschied zu M02
                                +'WG = b.WG, '
                              //  +'PE_VK = b.PE_VK, '
                                +'STATUS = b.STATUS, '
                                +'US = b.US, '
                              //  +'SL_JN = b.SL_JN, '
                              //  +'MS_JN = b.MS_JN, '
                              //  +'EM_JN = b.EM_JN, '
                                +'ME = b.ME, '
                                +'DK_1 = b.DK_1, '
                                +'DK_2 = b.DK_2, '
                                +'DK_3 = b.DK_3, '     //** Unterschied zu M02
                                +'DK_4 = b.DK_4, '
                                +'DK_5 = b.DK_5, '
                               // +'C1 C1,
                               // +'C2 = b.C2, '  //** IB 15.07.2015
                               // +'C3 C3,
                               // +'C4 C4,
                                +'C5 = b.C5, '
                               // +'C6 C6,
                               // +'C7 C7,
                               // +'C8 C8,
                               // +'C9 C9,
                                +'C10 = b.C10, '  //** IB 15.07.2015
                               //** Fr. König 13.11.2013: kein Zeichn. Pfad übertragen *OB
                               // +'VIEWER_PFAD = b.VIEWER_PFAD, '
                               // +'WARENNUMMER = b.WARENNUMMER, ' //** !! FEHLER: DOPPELT ANGEGEBEN

                               // +'URSPRUNG_LAND = b.URSPRUNG_LAND,'        /** !! FEHLER: DOPPELT ANGEGEBEN
                              //  +'URSPRUNG_REGION = b.URSPRUNG_REGION, '   /** !! FEHLER: DOPPELT ANGEGEBEN
                              //  +'MASSEINHEIT = b.MASSEINHEIT, '           /** !! FEHLER: DOPPELT ANGEGEBEN
                                +'EM1_NUMMER = b.EM1_NUMMER, '
                                +'EM2_NUMMER = b.EM2_NUMMER, '
                                +'EM3_NUMMER = b.EM3_NUMMER, '
                                +'EM1_METHODE = b.EM1_METHODE, '
                                +'EM2_METHODE = b.EM2_METHODE, '
                                +'EM3_METHODE = b.EM3_METHODE, '
                                +'EM1_ANTEIL = b.EM1_ANTEIL, '
                                +'EM2_ANTEIL = b.EM2_ANTEIL, '
                                +'EM3_ANTEIL = b.EM3_ANTEIL, '
                                +'DURCHMESSER = b.DURCHMESSER, '
                                +'LAENGE = b.LAENGE, '
                                +'BREITE = b.BREITE, '
                                +'HOEHE = b.HOEHE, '
                               //+'SPEZ_GEWICHT = b.SPEZ_GEWICHT, '
                                +'B_BASIS = b.B_BASIS, '
                                +'P_BASIS = b.P_BASIS, '
                                //** neu Mail Frau König 26.9.2013
                                +'WARENNUMMER = b.WARENNUMMER, '
                                +'URSPRUNG_LAND = b.URSPRUNG_LAND, '
                                +'URSPRUNG_REGION = b.URSPRUNG_REGION, '
                                +'MASSEINHEIT = b.MASSEINHEIT, '
                                +'AL_NUMMER = b.AL_NUMMER, '
                                +'ECCN_NUMMER = b.ECCN_NUMMER, '
                                +'ZOLLTARIF_NUMMER = b.ZOLLTARIF_NUMMER, '
                                +'PRAEFERENZ = b.PRAEFERENZ, '
                                //** Ende neu

                                //** 11.1
                                +'PRAEFERENZ_ARTIKEL = b.PRAEFERENZ_ARTIKEL, '
                                +'PRAEFERENZ_ANTEIL = b.PRAEFERENZ_ANTEIL, '
                                +'PRAEFERENZ_UE_DATUM = b.PRAEFERENZ_UE_DATUM, '
                                +'VERPACKUNGSKOSTEN = b.VERPACKUNGSKOSTEN, '
                                //+'KALK_AUFSCHLAG_GRUPPE = b.KALK_AUFSCHLAG_GRUPPE, '  //** Unterschied zu M02
                                //+'HYPERLINK = b.HYPERLINK, '                          //** Unterschied zu M02
                                //** 11.1 Ende

                                +'ANLAGE_DATUM = b.ANLAGE_DATUM, '
                                +'ANLAGE_USER_NR = b.ANLAGE_USER_NR, '
                                +'AENDERUNG_USER_NR = b.AENDERUNG_USER_NR, '
                               // +'KALK_KZ = b.KALK_KZ, ' C9 sollte auch nicht übertragen werden
                               // +'KALK_KZ_VK = b.KALK_KZ_VK, ' C9 sollte auch nicht übertragen werden
                               //** IB 29.01.2013: Anruf von Frau König - nicht übernehmen
                               // +'DISPO_STOP = b.DISPO_STOP, '
                                +'ZN_REV = b.ZN_REV '
                                +'FROM '+ inMandant + '.dbo.ARTIKEL_STAMM a, ' //** +'FROM M02.dbo.ARTIKEL_STAMM a, '
                                +vonMandant+'.dbo.ARTIKEL_STAMM b WHERE a.ARTNR = b.ARTNR ' //** +'M01.dbo.ARTIKEL_STAMM b WHERE a.ARTNR = b.ARTNR '
                                +'AND a.ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''''
                                //+'JOIN M01.dbo.ARTIKEL_STAMM AS b ON a.ARTNR = b.ARTNR '
                                //+'WHERE a.ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''''

                else
                   //!!EditMark!!:ArtikelStammänderungen
                   SQLString := 'INSERT INTO '+inMandant+'.dbo.ARTIKEL_STAMM ' //** 'INSERT INTO M02.dbo.ARTIKEL_STAMM '
                               +'( '
                               +'ARTNR, KB, ZN, BN, BEZ_1, BEZ_2, BEZ_3, BEZ_4, BEZ_5, BEZ_6, '
                               +'BEZ_7, BEZ_8, EAN_NUMMER, INFO, PRL_POS, GEWICHT, V_EINHEIT, '
                               +'ARBEITSPREIS, GUE_BEME, EK, DURCH_EK, MIN_DB, WG, RG, GARANTIE_ZEIT, '
                               +'RASTER_VK, PE_VK, STATUS, US, SL_JN, MS_JN, EM_JN, ME, DK_1, '
                               +'DK_2, DK_3, DK_4, DK_5, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, '
                               +'SACHMERKMAL, VIEWER_PFAD, WARENNUMMER, URSPRUNG_LAND, URSPRUNG_REGION, '
                               +'MASSEINHEIT, EM1_NUMMER, EM2_NUMMER, EM3_NUMMER, EM1_METHODE, EM2_METHODE, '
                               +'EM3_METHODE, EM1_ANTEIL, EM2_ANTEIL, EM3_ANTEIL, DURCHMESSER, '
                               +'LAENGE, BREITE, HOEHE, SPEZ_GEWICHT, B_BASIS, P_BASIS, LEAB, LEZU, '
                               +'ANLAGE_DATUM, AENDERUNG_DATUM, ANLAGE_USER_NR, AENDERUNG_USER_NR, KALK_KZ, DISPO_STOP, KALK_KZ_VK, ZN_REV, '
                               //** 10.0
                               +'MASSE_SIND_MM, MASSE_FUER_FA, AMM_PRINT, '
                               +'AMM_ART_KEY1, AMM_ART_KEY2, AMM_ART_KEY3, AMM_ART_KEY4, AMM_ART_KEY5, '
                               +'AMM_INHALT_KEY1, AMM_INHALT_KEY2, AMM_INHALT_KEY3, '
                               +'AMM_INHALT_FREI4, AMM_INHALT_FREI5, BV_PLAN_NUMMER, BV_SI_TAGE, '
                               //** 10.1
                               +'PRUEF_PFLICHTIG, MASSE_FREITEXT, PDM_GEPFLEGT, AL_NUMMER, PACKMITTEL, '
                               +'PACKMITTEL_VERSION, PACKMITTEL_STUECK_IN_PM, PACKMITTEL_IST_PM, '
                               +'ECCN_NUMMER, ZOLLTARIF_NUMMER, PRAEFERENZ, FEINPLANUNG, '
                               //** 10.2
                               +'VORGABELAGER_ZU, VORGABELAGER_ZU_DV, VORGABELAGER_AB, VORGABELAGER_AB_DV, '
                               +'ALTERNATE_ARTNR_1, ALTERNATE_ARTNR_2, ALTERNATE_ARTNR_3, '
                               //** 11.0
                               +'CHARGENPFLICHTIG, PREISAENDERUNG_BEMERKUNG, '

                               //** 11.1
                               +'PRAEFERENZ_ARTIKEL, PRAEFERENZ_ANTEIL, PRAEFERENZ_UE_DATUM, '
                               +'VERPACKUNGSKOSTEN, KALK_AUFSCHLAG_GRUPPE, HYPERLINK, HIDE_BESTAND '
                               +' )'
                               +'SELECT '
                               +'ARTNR, KB, ZN, BN, BEZ_1, BEZ_2, BEZ_3, BEZ_4, BEZ_5, BEZ_6, '
                               +'BEZ_7, BEZ_8, EAN_NUMMER, '''', 0, GEWICHT, V_EINHEIT, '
     //** Unterschied zu M02   +'0.0, GUE_BEME, 0.0, 0.0, 0.0, WG, 0, 0, '
                               +'0.0, 0.0, 0.0, 0.0, 0.0, WG, 0, 0, '
  //** IB 02.12.2015 PEVK,EMJN +'0, PE_VK, STATUS, US, ''N'', ''N'', EM_JN, ME, DK_1, '
                               +'0, 1, STATUS, US, ''N'', ''N'', ''N'', ME, DK_1, '
     //** IB 15.07.2015        +'DK_2, DK_3, DK_4, DK_5, '''', C2, '''', '''', C5, '''', '''', '''', '''', '''', '
     //** IB 02.12.2015 DK3    +'DK_2, DK_3, DK_4, DK_5, '''', '''', '''', '''', C5, '''', '''', '''', '''', C10, '
     //** Unterschied zu M02   +'DK_2, 1, DK_4, DK_5, '''', '''', '''', '''', C5, '''', '''', '''', '''', C10, '
                               +'DK_2, DK_3, DK_4, DK_5, '''', '''', '''', '''', C5, '''', '''', '''', '''', C10, '
                               +'''00000000000000000000'', '''', WARENNUMMER, URSPRUNG_LAND, URSPRUNG_REGION, '
                               +'MASSEINHEIT, EM1_NUMMER, EM2_NUMMER, EM3_NUMMER, EM1_METHODE, EM2_METHODE, '
                               +'EM3_METHODE, EM1_ANTEIL, EM2_ANTEIL, EM3_ANTEIL, DURCHMESSER, '
  //** IB 02.12.2015 SpezGew   +'LAENGE, BREITE, HOEHE, SPEZ_GEWICHT, B_BASIS, P_BASIS, ''01.01.1950'', ''01.01.1950'', '
                               +'LAENGE, BREITE, HOEHE, 0.00, B_BASIS, P_BASIS, ''01.01.1950'', ''01.01.1950'', '
  //** IB 02.12.2015 DispoStop +'ANLAGE_DATUM, ''01.01.1950'', ANLAGE_USER_NR, AENDERUNG_USER_NR, KALK_KZ, DISPO_STOP, KALK_KZ_VK, ZN_REV, '
                               +'ANLAGE_DATUM, ''01.01.1950'', ANLAGE_USER_NR, AENDERUNG_USER_NR, KALK_KZ, ''N'', KALK_KZ_VK, ZN_REV, '
                               //** 10.0
//** 02.06.2017 SM             +'MASSE_SIND_MM, MASSE_FUER_FA, AMM_PRINT, '
//** 02.06.2017 SM             +'AMM_ART_KEY1, AMM_ART_KEY2, AMM_ART_KEY3, AMM_ART_KEY4, AMM_ART_KEY5, '
//** 02.06.2017 SM             +'AMM_INHALT_KEY1, AMM_INHALT_KEY2, AMM_INHALT_KEY3, '
//** 02.06.2017 SM             +'AMM_INHALT_FREI4, AMM_INHALT_FREI5, BV_PLAN_NUMMER, BV_SI_TAGE,  '
                               //** 01.06.2017 SM - keine Übergabe der Kategorien und Merkmale
                               +'MASSE_SIND_MM, MASSE_FUER_FA, '                 //** 02.06.2017 SM
                               +'''N'', 0, 0, 0, 0, 0, 0, 0, 0, '''', '''', '    //** 02.06.2017 SM
                               +'BV_PLAN_NUMMER, BV_SI_TAGE, '                   //** 02.06.2017 SM
                               //** 10.1
                               +'PRUEF_PFLICHTIG, MASSE_FREITEXT, PDM_GEPFLEGT, AL_NUMMER, PACKMITTEL, '
                               +'PACKMITTEL_VERSION, PACKMITTEL_STUECK_IN_PM, PACKMITTEL_IST_PM, '
                               +'ECCN_NUMMER, ZOLLTARIF_NUMMER, PRAEFERENZ, FEINPLANUNG, '
                               //** 10.2
                               +'-1, -1, -1, -1, '  //**  +'VORGABELAGER_ZU, VORGABELAGER_ZU_DV, VORGABELAGER_AB, VORGABELAGER_AB_DV, '
                               +'ALTERNATE_ARTNR_1, ALTERNATE_ARTNR_2, ALTERNATE_ARTNR_3, '
                               //** 11.0
                               +'CHARGENPFLICHTIG, '''', ' //** PREISAENDERUNG_BEMERKUNG leer
                               //** 11.1
                               +'PRAEFERENZ_ARTIKEL, PRAEFERENZ_ANTEIL, PRAEFERENZ_UE_DATUM, '
     //** Unterschied zu M02   +'VERPACKUNGSKOSTEN, KALK_AUFSCHLAG_GRUPPE, HYPERLINK, HIDE_BESTAND '
                               +'VERPACKUNGSKOSTEN, 0, '''', HIDE_BESTAND '
                               //** 11.1 Ende
                               +'FROM '+vonMandant+'.dbo.ARTIKEL_STAMM WHERE ARTNR = '''+Trim(EDT_ArtNr.Text)+''' '; //'FROM M01.dbo.ARTIKEL_STAMM WHERE ARTNR = '''+Trim(EDT_ArtNr.Text)+''' ';

                SQL.Add(SQLString);
                UCExecSQL(AQY_Divers);
                result := true;
                //Showmessage('Zeilen: ' +IntToStr(i))

             except
                on E:Exception do
                   begin
                        result := false;
                        ShowMessage(E.Message);
                   end; //** on E:Exception do
             end; //** try..except

        end; //** with AQY_Divers do
except
   on E:Exception do
      ShowMessage(E.Message);
end; //** try..except

//** 25.05.2021 PI - wenn Status von 1 oder 2 auf x gesetzt wird - Wichtige Hinweise löschen
//** 25.05.2021 PI - wenn Status von x auf 1 oder 2 gesetzt wird - Wichtige Hinweise löschen und im Anschluss übernehmen
if (EDT_STATUS.AsInteger <> YamaichiSaveStatus) and ((YamaichiSaveStatus IN [1,2]) or (EDT_STATUS.AsInteger IN [1,2])) then
   begin
        with AQY_Divers do
             try
                if Active then
                   Close;
                Connection := GetDobosADB;
                SQL.Clear;
                SQLString := ' DELETE '+inMandant+'.dbo.INFOBLATT WHERE ART = ''w'' AND SCHLUESSEL = '''+Trim(EDT_ArtNr.Text)+''' ';
                SQL.Add(SQLString);
                UCExecSQL(AQY_Divers);
                result := true;
             except
                on E:Exception do
                   begin
                        result := false;
                        ShowMessage(E.Message);
                   end; //** on E:Exception do
             end; //** try..except

   end; //** (EDT_STATUS.AsInteger <> YamaichiSaveStatus) and

//** 25.05.2021 PI - wenn Status von x auf 1 oder 2 gesetzt wird - Wichtige Hinweise übernehmen
if (EDT_STATUS.AsInteger <> YamaichiSaveStatus) and (EDT_STATUS.AsInteger IN [1,2]) then
   begin
        with AQY_Divers do
             try
                if Active then
                   Close;
                Connection := GetDobosADB;
                SQL.Clear;
                SQLString := ' INSERT INTO '+inMandant+'.dbo.INFOBLATT '
                           + ' SELECT ART, SCHLUESSEL, ''LAbf'', SCHLAGWORT_2, SCHLAGWORT_3, INHALT '
                           + ' FROM '+vonMandant+'.dbo.INFOBLATT WHERE ART = ''w'' AND SCHLUESSEL = '''+Trim(EDT_ArtNr.Text)+''' ';
                SQL.Add(SQLString);
                UCExecSQL(AQY_Divers);
                result := true;
             except
                on E:Exception do
                   begin
                        result := false;
                        ShowMessage(E.Message);
                   end; //** on E:Exception do
             end; //** try..except

   end; //** (EDT_STATUS.AsInteger <> YamaichiSaveStatus) and

if (EDT_STATUS.AsInteger <> YamaichiSaveStatus) then
   YamaichiSaveStatus := EDT_STATUS.AsInteger;

//** IB 19.02.2014 Übernahme FremdsprachenTexte
try
   with AQY_Divers do
        begin
             if Active then
                Close;
             Connection := GetDobosADB;
             SQL.Clear;

             if ReadAnyFields (GetDobosADB,
                         vonMandant +'.dbo.ARTIKEL_TEXTE',
                         'WHERE ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''' ',
                         ['COUNT(*)'],
                         AValues) then
                begin
                     if AValues[0] < 1 then
                        Exit;
                end;  //** if ReadAnyFields (GetDobosADB,


             if ReadAnyFields (GetDobosADB,
                         inMandant +'.dbo.ARTIKEL_TEXTE',
                         'WHERE ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''' ',
                         ['COUNT(*)'],
                         AValues) then
             try
                if AValues[0] > 0 then
                   begin
                        SQLString := 'DELETE '+inMandant+'.dbo.ARTIKEL_TEXTE WHERE ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''' ';
                        SQLString := SQLString + ' INSERT INTO '+inMandant+'.dbo.ARTIKEL_TEXTE SELECT * '
                                               + ' FROM '+vonMandant+'.dbo.ARTIKEL_TEXTE WHERE ARTNR = '''+Trim(EDT_ArtNr.Text)+''' ';
                   end
                else
                   SQLString := 'INSERT INTO '+inMandant+'.dbo.ARTIKEL_TEXTE '
                               +'SELECT * FROM '+vonMandant+'.dbo.ARTIKEL_TEXTE WHERE ARTNR = '''+Trim(EDT_ArtNr.Text)+''' ';

                SQL.Add(SQLString);
                UCExecSQL(AQY_Divers);
                result := true;

             except
                on E:Exception do
                   begin
                        result := false;
                        ShowMessage(E.Message);
                   end; //** on E:Exception do
             end; //** try..except

        end; //** with AQY_Divers do

except
   on E:Exception do
      ShowMessage(E.Message);
end; //** try..except

end; //** ArtikelinM03Yamaichi


(******************************************************************************)
(***     function ArtikelinM02Famec                                         ***)
(******************************************************************************)

function TFRM_DobosLV.ArtikelinM02Famec: boolean;
var
   AValues    : array [0..0] of Variant;
   SQLString  : string;
   i          : integer;
   inMandant,
   vonMandant : string;

begin

result := false;
SQLString := '';
i := 0;

inMandant := 'M02';
vonMandant := 'M01';
if GetLinkagePointer^.MRecord.Mandant = 2 then
   begin
        inMandant := 'M01';
        vonMandant := 'M02';
   end; //** if GetLinkagePointer^.MRecord.Mandant = 2 then

try
   with AQY_Divers do
        begin
             if Active then
                Close;
             Connection := GetDobosADB;
             SQL.Clear;

             if ReadAnyFields (GetDobosADB,
                         inMandant +'.dbo.ARTIKEL_STAMM',
                         'WHERE ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''' ',
                         ['COUNT(*)'],
                         AValues) then
             try
                if AValues[0] > 0 then
                   //!!EditMark!!:ArtikelStammänderungen
                   SQLString := 'UPDATE '+inMandant+'.dbo.ARTIKEL_STAMM SET '
                                +'KB = b.KB, '
                                +'ZN = b.ZN, '
                                +'BN = b.BN, '
                                +'BEZ_1 = b.BEZ_1, '
                                +'BEZ_2 = b.BEZ_2, '
                                +'BEZ_3 = b.BEZ_3, '
                                +'BEZ_4 = b.BEZ_4, '
                                +'BEZ_5 = b.BEZ_5, '
                                +'BEZ_6 = b.BEZ_6, '
                                +'BEZ_7 = b.BEZ_7, '
                                +'BEZ_8 = b.BEZ_8, '
                                +'EAN_NUMMER = b.EAN_NUMMER, '
                                +'GEWICHT = b.GEWICHT, '
                                +'V_EINHEIT = b.V_EINHEIT, '
                                +'GUE_BEME = b.GUE_BEME, '
                                +'INFO = b.INFO, '
                                +'GARANTIE_ZEIT = b.GARANTIE_ZEIT, '
                                +'SACHMERKMAL = b.SACHMERKMAL, '
                                +'PRL_POS = b.PRL_POS, '
                                +'WG = b.WG, '
                                +'RG = b.RG, '
                                +'PE_VK = b.PE_VK, '
                                +'STATUS = b.STATUS, '
                                +'US = b.US, '
                                +'SL_JN = b.SL_JN, '
                                +'MS_JN = b.MS_JN, '
                                +'EM_JN = b.EM_JN, '
                                +'ME = b.ME, '
                                +'DK_1 = b.DK_1, '
                                +'DK_2 = b.DK_2, '
                                +'DK_3 = b.DK_3, '
                                +'DK_4 = b.DK_4, '
                                +'DK_5 = b.DK_5, '
                                +'C1 = b.C1, '
                                +'C2 = b.C2, '
                                +'C3 = b.C3, '
                                +'C4 = b.C4, '
                                +'C5 = b.C5, '
                                +'C6 = b.C6, '
                                +'C7 = b.C7, '
                                +'C8 = b.C8, '
                                +'C9 = b.C9, '
                                +'C10 = b.C10, '
                                +'VIEWER_PFAD = b.VIEWER_PFAD, '
                                +'WARENNUMMER = b.WARENNUMMER, '
                                +'URSPRUNG_LAND = b.URSPRUNG_LAND,'
                                +'URSPRUNG_REGION = b.URSPRUNG_REGION, '
                                +'MASSEINHEIT = b.MASSEINHEIT, '
                                +'EM1_NUMMER = b.EM1_NUMMER, '
                                +'EM2_NUMMER = b.EM2_NUMMER, '
                                +'EM3_NUMMER = b.EM3_NUMMER, '
                                +'EM1_METHODE = b.EM1_METHODE, '
                                +'EM2_METHODE = b.EM2_METHODE, '
                                +'EM3_METHODE = b.EM3_METHODE, '
                                +'EM1_ANTEIL = b.EM1_ANTEIL, '
                                +'EM2_ANTEIL = b.EM2_ANTEIL, '
                                +'EM3_ANTEIL = b.EM3_ANTEIL, '
                                +'DURCHMESSER = b.DURCHMESSER, '
                                +'LAENGE = b.LAENGE, '
                                +'BREITE = b.BREITE, '
                                +'HOEHE = b.HOEHE, '
                                +'SPEZ_GEWICHT = b.SPEZ_GEWICHT, '
                                +'B_BASIS = b.B_BASIS, '
                                +'P_BASIS = b.P_BASIS, '

                                //** Version 10.0
                                +'MASSE_SIND_MM = b.MASSE_SIND_MM, '
                                +'MASSE_FUER_FA = b.MASSE_FUER_FA, '
                                +'AMM_PRINT = b.AMM_PRINT, '
                                +'AMM_ART_KEY1 = b.AMM_ART_KEY1, '
                                +'AMM_ART_KEY2 = b.AMM_ART_KEY2, '
                                +'AMM_ART_KEY3 = b.AMM_ART_KEY3, '
                                +'AMM_ART_KEY4 = b.AMM_ART_KEY4, '
                                +'AMM_ART_KEY5 = b.AMM_ART_KEY5, '
                                +'AMM_INHALT_KEY1 = b.AMM_INHALT_KEY1, '
                                +'AMM_INHALT_KEY2 = b.AMM_INHALT_KEY2, '
                                +'AMM_INHALT_KEY3 = b.AMM_INHALT_KEY3, '
                                +'AMM_INHALT_FREI4 = b.AMM_INHALT_FREI4, '
                                +'AMM_INHALT_FREI5 = b.AMM_INHALT_FREI5, '
                                +'BV_PLAN_NUMMER = b.BV_PLAN_NUMMER, '
                                +'BV_SI_TAGE = b.BV_SI_TAGE, '
                                //**
                                +'AENDERUNG_DATUM = b.AENDERUNG_DATUM, '
                                +'AENDERUNG_USER_NR = b.AENDERUNG_USER_NR, '
                                // +'KALK_KZ = b.KALK_KZ, '
                                // +'KALK_KZ_VK = b.KALK_KZ_VK, '
                                // +'ARBEITSPREIS = b.ARBEITSPREIS, '
                                // +'EK = b.EK, '
                                // +'DURCH_EK = b.DURCH_EK, '
                                // +'MIN_DB = b.MIN_DB, '
                                // +'RASTER_VK = b.RASTER_VK, '

                                //** 10.1
                                +'PRUEF_PFLICHTIG = b.PRUEF_PFLICHTIG, '
                                +'MASSE_FREITEXT = b.MASSE_FREITEXT, '
                                +'PDM_GEPFLEGT = b.PDM_GEPFLEGT, '
                                +'AL_NUMMER = b.AL_NUMMER, '
                                +'PACKMITTEL = b.PACKMITTEL, '
                                +'PACKMITTEL_VERSION = b.PACKMITTEL_VERSION, '
                                +'PACKMITTEL_STUECK_IN_PM = b.PACKMITTEL_STUECK_IN_PM, '
                                +'PACKMITTEL_IST_PM = b.PACKMITTEL_IST_PM, '
                                +'ECCN_NUMMER = b.ECCN_NUMMER, '
                                +'ZOLLTARIF_NUMMER = b.ZOLLTARIF_NUMMER, '
                                +'PRAEFERENZ = b.PRAEFERENZ, '
                                +'FEINPLANUNG = b.FEINPLANUNG, '
                                //** 10.1 Ende

                                //** 10.2
                                +'VORGABELAGER_ZU = b.VORGABELAGER_ZU, '
                                +'VORGABELAGER_ZU_DV = b.VORGABELAGER_ZU_DV, '
                                +'VORGABELAGER_AB = b.VORGABELAGER_AB, '
                                +'VORGABELAGER_AB_DV = b.VORGABELAGER_AB_DV, '
                                +'ALTERNATE_ARTNR_1 = b.ALTERNATE_ARTNR_1, '
                                +'ALTERNATE_ARTNR_2 = b.ALTERNATE_ARTNR_2, '
                                +'ALTERNATE_ARTNR_3 = b.ALTERNATE_ARTNR_3, '
                                //** 10.2 Ende

                                //** 11.0
                                +'CHARGENPFLICHTIG = ''N'', '
                                //** 11.0 Ende
                                //** 11.1
                                +'PRAEFERENZ_ARTIKEL = b.PRAEFERENZ_ARTIKEL, '
                                +'PRAEFERENZ_ANTEIL = b.PRAEFERENZ_ANTEIL, '
                                +'PRAEFERENZ_UE_DATUM = b.PRAEFERENZ_UE_DATUM, '
                                +'VERPACKUNGSKOSTEN = b.VERPACKUNGSKOSTEN, '
                                +'KALK_AUFSCHLAG_GRUPPE = b.KALK_AUFSCHLAG_GRUPPE, '
                                +'HYPERLINK = b.HYPERLINK, '
                                //** 11.1 Ende

                                +'DISPO_STOP = b.DISPO_STOP, '
                                +'ZN_REV = b.ZN_REV '
                                +'FROM '+ inMandant + '.dbo.ARTIKEL_STAMM a, '
                                +vonMandant+'.dbo.ARTIKEL_STAMM b WHERE a.ARTNR = b.ARTNR '
                                +'AND a.ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''''
                else
                   //!!EditMark!!:ArtikelStammänderungen
                   SQLString := 'INSERT INTO '+inMandant+'.dbo.ARTIKEL_STAMM '
                               +'SELECT '
                               +'ARTNR, KB, ZN, BN, BEZ_1, BEZ_2, BEZ_3, BEZ_4, BEZ_5, BEZ_6, '
                               +'BEZ_7, BEZ_8, EAN_NUMMER, INFO, PRL_POS, GEWICHT, V_EINHEIT, '
                               +'ARBEITSPREIS, GUE_BEME, EK, DURCH_EK, MIN_DB, WG, RG, GARANTIE_ZEIT, '
                               +'RASTER_VK, PE_VK, STATUS, US, SL_JN, MS_JN, EM_JN, ME, DK_1, '
                               +'DK_2, DK_3, DK_4, DK_5, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, '
                               +'SACHMERKMAL, VIEWER_PFAD, WARENNUMMER, URSPRUNG_LAND, URSPRUNG_REGION, '
                               +'MASSEINHEIT, EM1_NUMMER, EM2_NUMMER, EM3_NUMMER, EM1_METHODE, EM2_METHODE, '
                               +'EM3_METHODE, EM1_ANTEIL, EM2_ANTEIL, EM3_ANTEIL, DURCHMESSER, '
                               +'LAENGE, BREITE, HOEHE, SPEZ_GEWICHT, B_BASIS, P_BASIS, ''01.01.1950'', ''01.01.1950'', '
                               +'ANLAGE_DATUM, ''01.01.1950'', ANLAGE_USER_NR, '
                               +'0, '' '', DISPO_STOP, '' '', ZN_REV, '
                               //** 10.0
                               +'MASSE_SIND_MM, MASSE_FUER_FA, AMM_PRINT, '
                               +'AMM_ART_KEY1, AMM_ART_KEY2, '
                               +'AMM_ART_KEY3, AMM_ART_KEY4, AMM_ART_KEY5, '
                               +'AMM_INHALT_KEY1, AMM_INHALT_KEY2, '
                               +'AMM_INHALT_KEY3, AMM_INHALT_FREI4, AMM_INHALT_FREI5, BV_PLAN_NUMMER, BV_SI_TAGE, '
                               //** 10.1
                               +'PRUEF_PFLICHTIG, MASSE_FREITEXT, PDM_GEPFLEGT, AL_NUMMER, PACKMITTEL, '
                               +'PACKMITTEL_VERSION, PACKMITTEL_STUECK_IN_PM, PACKMITTEL_IST_PM, '
                               +'ECCN_NUMMER, ZOLLTARIF_NUMMER, PRAEFERENZ, FEINPLANUNG, '
                               //** 10.2
                               +'VORGABELAGER_ZU, VORGABELAGER_ZU_DV, VORGABELAGER_AB, VORGABELAGER_AB_DV, '
                               +'ALTERNATE_ARTNR_1, ALTERNATE_ARTNR_2, ALTERNATE_ARTNR_3, '
                               //** 11.0
                               +'CHARGENPFLICHTIG, '''', ' //** PREISAENDERUNG_BEMERKUNG leer
                               //** 11.0 Ende
                               //** 11.1
                               +'PRAEFERENZ_ARTIKEL, PRAEFERENZ_ANTEIL, PRAEFERENZ_UE_DATUM, '
                               +'VERPACKUNGSKOSTEN, KALK_AUFSCHLAG_GRUPPE, HYPERLINK '
                               //** 12.1
                               +', HIDE_BESTAND '

                               +'FROM '+vonMandant+'.dbo.ARTIKEL_STAMM WHERE ARTNR = '''+Trim(EDT_ArtNr.Text)+''' ';

                SQL.Add(SQLString);
                UCExecSQL(AQY_Divers);
                result := true;

             except
                on E:Exception do
                   begin
                        result := false;
                        ShowMessage(E.Message);
                   end; //** on E:Exception do
             end; //** try..except

        end; //** with AQY_Divers do

except
   on E:Exception do
      ShowMessage(E.Message);
end; //** try..except

end; //** function ArtikelinM02Famec


(******************************************************************************)
(***     function ArtikelinM02Plaschka                                      ***)
(******************************************************************************)

function TFRM_DobosLV.ArtikelinM02Plaschka: boolean;
var
   AValues    : array [0..0] of Variant;
   SQLString  : string;
   i          : integer;
   inMandant,
   vonMandant : string;

begin

result := false;
SQLString := '';
i := 0;

inMandant := 'M02';
vonMandant := 'M01';
if GetLinkagePointer^.MRecord.Mandant = 2 then
   begin
        inMandant := 'M01';
        vonMandant := 'M02';
   end; //** if GetLinkagePointer^.MRecord.Mandant = 2 then

try
   with AQY_Divers do
        begin
             if Active then
                Close;
             Connection := GetDobosADB;
             SQL.Clear;

             if ReadAnyFields (GetDobosADB,
                         inMandant +'.dbo.ARTIKEL_STAMM',
                         'WHERE ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''' ',
                         ['COUNT(*)'],
                         AValues) then
             try
                if AValues[0] > 0 then
                   //!!EditMark!!:ArtikelStammänderungen
                   SQLString := 'UPDATE '+inMandant+'.dbo.ARTIKEL_STAMM SET '
                                +'KB = b.KB, '
                                +'ZN = b.ZN, '
                                +'BN = b.BN, '
                                +'BEZ_1 = b.BEZ_1, '
                                +'BEZ_2 = b.BEZ_2, '
                                +'BEZ_3 = b.BEZ_3, '
                                +'BEZ_4 = b.BEZ_4, '
                                +'BEZ_5 = b.BEZ_5, '
                                +'BEZ_6 = b.BEZ_6, '
                                +'BEZ_7 = b.BEZ_7, '
                                +'BEZ_8 = b.BEZ_8, '
                                +'EAN_NUMMER = b.EAN_NUMMER, '
                                +'INFO = b.INFO, '
                                +'PRL_POS = b.PRL_POS, '
                                +'GEWICHT = b.GEWICHT, '
                                +'V_EINHEIT = b.V_EINHEIT, '
//**                            +'ARBEITSPREIS = b.ARBEITSPREIS, '
                                +'GUE_BEME = b.GUE_BEME, '
//**                            +'EK = b.EK, '
//**                            +'DURCH_EK = b.DURCH_EK, '
//**                            +'MIN_DB = b.MIN_DB, '
                                +'WG = b.WG, '
                                +'RG = b.RG, '
                                +'GARANTIE_ZEIT = b.GARANTIE_ZEIT, '
//**                            +'RASTER_VK = b.RASTER_VK, '
//**                            +'PE_VK = b.PE_VK, '
                                +'STATUS = b.STATUS, '
                                +'US = b.US, '
//**                            +'SL_JN = b.SL_JN, '
                                +'MS_JN = b.MS_JN, '
                                +'EM_JN = b.EM_JN, '
                                +'ME = b.ME, '
                                +'DK_1 = b.DK_1, '
                                +'DK_2 = b.DK_2, '
                                +'DK_3 = b.DK_3, '
                                +'DK_4 = b.DK_4, '
                                +'DK_5 = b.DK_5, '
                                +'C1 = b.C1, '
                                +'C2 = b.C2, '
                                +'C3 = b.C3, '
                                +'C4 = b.C4, '
                                +'C5 = b.C5, '
                                +'C6 = b.C6, '
                                +'C7 = b.C7, '
                                +'C8 = b.C8, '
                                +'C9 = b.C9, '
                                +'C10 = b.C10, '
                                +'SACHMERKMAL = b.SACHMERKMAL, '
                                +'VIEWER_PFAD = b.VIEWER_PFAD, '
                                +'WARENNUMMER = b.WARENNUMMER, '
                                +'URSPRUNG_LAND = b.URSPRUNG_LAND,'
                                +'URSPRUNG_REGION = b.URSPRUNG_REGION, '
                                +'MASSEINHEIT = b.MASSEINHEIT, '
                                +'EM1_NUMMER = b.EM1_NUMMER, '
                                +'EM2_NUMMER = b.EM2_NUMMER, '
                                +'EM3_NUMMER = b.EM3_NUMMER, '
                                +'EM1_METHODE = b.EM1_METHODE, '
                                +'EM2_METHODE = b.EM2_METHODE, '
                                +'EM3_METHODE = b.EM3_METHODE, '
                                +'EM1_ANTEIL = b.EM1_ANTEIL, '
                                +'EM2_ANTEIL = b.EM2_ANTEIL, '
                                +'EM3_ANTEIL = b.EM3_ANTEIL, '
                                +'DURCHMESSER = b.DURCHMESSER, '
                                +'LAENGE = b.LAENGE, '
                                +'BREITE = b.BREITE, '
                                +'HOEHE = b.HOEHE, '
                                +'SPEZ_GEWICHT = b.SPEZ_GEWICHT, '
//**                            +'B_BASIS = b.B_BASIS, '
//**                            +'P_BASIS = b.P_BASIS, '
//**                            +'LEAB = b.LEAB, '
//**                            +'LEZU = b.LEZU, '
//**                            +'ANLAGE_DATUM = b.ANLAGE_DATUM, '
                                +'AENDERUNG_DATUM = b.AENDERUNG_DATUM, '
//**                            +'ANLAGE_USER_NR = b.ANLAGE_USER_NR, '
                                +'AENDERUNG_USER_NR = b.AENDERUNG_USER_NR, '
//**                            +'KALK_KZ = b.KALK_KZ, '
                                +'DISPO_STOP = b.DISPO_STOP, '
//**                            +'KALK_KZ_VK = b.KALK_KZ_VK, '
                                +'ZN_REV = b.ZN_REV, '

                                //** Version 10.0
                                +'MASSE_SIND_MM = b.MASSE_SIND_MM, '
                                +'MASSE_FUER_FA = b.MASSE_FUER_FA, '
                                +'AMM_PRINT = b.AMM_PRINT, '
                                +'AMM_ART_KEY1 = b.AMM_ART_KEY1, '
                                +'AMM_ART_KEY2 = b.AMM_ART_KEY2, '
                                +'AMM_ART_KEY3 = b.AMM_ART_KEY3, '
                                +'AMM_ART_KEY4 = b.AMM_ART_KEY4, '
                                +'AMM_ART_KEY5 = b.AMM_ART_KEY5, '
                                +'AMM_INHALT_KEY1 = b.AMM_INHALT_KEY1, '
                                +'AMM_INHALT_KEY2 = b.AMM_INHALT_KEY2, '
                                +'AMM_INHALT_KEY3 = b.AMM_INHALT_KEY3, '
                                +'AMM_INHALT_FREI4 = b.AMM_INHALT_FREI4, '
                                +'AMM_INHALT_FREI5 = b.AMM_INHALT_FREI5, '
                                +'BV_PLAN_NUMMER = b.BV_PLAN_NUMMER, '
                                +'BV_SI_TAGE = b.BV_SI_TAGE, '

                                //** Version 10.1
                                +'PRUEF_PFLICHTIG = b.PRUEF_PFLICHTIG, '
                                +'MASSE_FREITEXT = b.MASSE_FREITEXT, '
                                +'PDM_GEPFLEGT = b.PDM_GEPFLEGT, '
                                +'AL_NUMMER = b.AL_NUMMER, '
                                +'PACKMITTEL = b.PACKMITTEL, '
                                +'PACKMITTEL_VERSION = b.PACKMITTEL_VERSION, '
                                +'PACKMITTEL_STUECK_IN_PM = b.PACKMITTEL_STUECK_IN_PM, '
                                +'PACKMITTEL_IST_PM = b.PACKMITTEL_IST_PM, '
                                +'ECCN_NUMMER = b.ECCN_NUMMER, '
                                +'ZOLLTARIF_NUMMER = b.ZOLLTARIF_NUMMER, '
                                +'PRAEFERENZ = b.PRAEFERENZ, '
                                +'FEINPLANUNG = b.FEINPLANUNG, '

                                //** Version 10.2
//**                            +'VORGABELAGER_ZU = b.VORGABELAGER_ZU, '
//**                            +'VORGABELAGER_ZU_DV = b.VORGABELAGER_ZU_DV, '
//**                            +'VORGABELAGER_AB = b.VORGABELAGER_AB, '
//**                            +'VORGABELAGER_AB_DV = b.VORGABELAGER_AB_DV, '
                                +'ALTERNATE_ARTNR_1 = b.ALTERNATE_ARTNR_1, '
                                +'ALTERNATE_ARTNR_2 = b.ALTERNATE_ARTNR_2, '
                                +'ALTERNATE_ARTNR_3 = b.ALTERNATE_ARTNR_3, '

                                //** Version 11.0
                                +'CHARGENPFLICHTIG = b.CHARGENPFLICHTIG, '
                                +'PREISAENDERUNG_BEMERKUNG = b.PREISAENDERUNG_BEMERKUNG, '

                                //** Version 11.1
                                +'PRAEFERENZ_ARTIKEL = b.PRAEFERENZ_ARTIKEL, '
                                +'PRAEFERENZ_ANTEIL = b.PRAEFERENZ_ANTEIL, '
                                +'PRAEFERENZ_UE_DATUM = b.PRAEFERENZ_UE_DATUM, '
//**                            +'VERPACKUNGSKOSTEN = b.VERPACKUNGSKOSTEN, '
//**                            +'KALK_AUFSCHLAG_GRUPPE = b.KALK_AUFSCHLAG_GRUPPE, '
                                +'HYPERLINK = b.HYPERLINK '
                                //** 11.1 Ende

                                +'FROM '+ inMandant + '.dbo.ARTIKEL_STAMM a, '
                                +vonMandant+'.dbo.ARTIKEL_STAMM b WHERE a.ARTNR = b.ARTNR '
                                +'AND a.ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''''
                else
                   //!!EditMark!!:ArtikelStammänderungen
                   SQLString := 'INSERT INTO '+inMandant+'.dbo.ARTIKEL_STAMM '
                               +'SELECT '
                               +'ARTNR, KB, ZN, BN, BEZ_1, BEZ_2, BEZ_3, BEZ_4, BEZ_5, BEZ_6, '
                               +'BEZ_7, BEZ_8, EAN_NUMMER, INFO, PRL_POS, GEWICHT, V_EINHEIT, '
                               +'ARBEITSPREIS, GUE_BEME, EK, DURCH_EK, MIN_DB, WG, RG, GARANTIE_ZEIT, '
                               +'RASTER_VK, PE_VK, STATUS, US, SL_JN, MS_JN, EM_JN, ME, DK_1, '
                               +'DK_2, DK_3, DK_4, DK_5, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, '
                               +'SACHMERKMAL, VIEWER_PFAD, WARENNUMMER, URSPRUNG_LAND, URSPRUNG_REGION, '
                               +'MASSEINHEIT, EM1_NUMMER, EM2_NUMMER, EM3_NUMMER, EM1_METHODE, EM2_METHODE, '
                               +'EM3_METHODE, EM1_ANTEIL, EM2_ANTEIL, EM3_ANTEIL, DURCHMESSER, '
                               +'LAENGE, BREITE, HOEHE, SPEZ_GEWICHT, B_BASIS, P_BASIS, ''01.01.1950'', ''01.01.1950'', '
                               +'ANLAGE_DATUM, ''01.01.1950'', ANLAGE_USER_NR, '
                               +'0, '' '', DISPO_STOP, '' '', ZN_REV, '
                               //** Version 10.0
                               +'MASSE_SIND_MM, MASSE_FUER_FA, AMM_PRINT, '
                               +'AMM_ART_KEY1, AMM_ART_KEY2, '
                               +'AMM_ART_KEY3, AMM_ART_KEY4, AMM_ART_KEY5, '
                               +'AMM_INHALT_KEY1, AMM_INHALT_KEY2, '
                               +'AMM_INHALT_KEY3, AMM_INHALT_FREI4, AMM_INHALT_FREI5, BV_PLAN_NUMMER, BV_SI_TAGE, '
                               //** Version 10.1
                               +'PRUEF_PFLICHTIG, MASSE_FREITEXT, PDM_GEPFLEGT, AL_NUMMER, PACKMITTEL, '
                               +'PACKMITTEL_VERSION, PACKMITTEL_STUECK_IN_PM, PACKMITTEL_IST_PM, '
                               +'ECCN_NUMMER, ZOLLTARIF_NUMMER, PRAEFERENZ, FEINPLANUNG, '
                               //** Version 10.2
                               +'VORGABELAGER_ZU, VORGABELAGER_ZU_DV, VORGABELAGER_AB, VORGABELAGER_AB_DV, '
                               +'ALTERNATE_ARTNR_1, ALTERNATE_ARTNR_2, ALTERNATE_ARTNR_3, '
                               //** Version 11.0
                               +'CHARGENPFLICHTIG, '''', ' //** PREISAENDERUNG_BEMERKUNG leer
                               //** Version 11.1
                               +'PRAEFERENZ_ARTIKEL, PRAEFERENZ_ANTEIL, PRAEFERENZ_UE_DATUM, '
                               +'VERPACKUNGSKOSTEN, KALK_AUFSCHLAG_GRUPPE, HYPERLINK '
                               //** 12.1
                               +', HIDE_BESTAND '

                               +'FROM '+vonMandant+'.dbo.ARTIKEL_STAMM WHERE ARTNR = '''+Trim(EDT_ArtNr.Text)+''' ';

                SQL.Add(SQLString);
                UCExecSQL(AQY_Divers);
                result := true;

             except
                on E:Exception do
                   begin
                        result := false;
                        ShowMessage(E.Message);
                   end; //** on E:Exception do
             end; //** try..except

        end; //** with AQY_Divers do

except
   on E:Exception do
      ShowMessage(E.Message);
end; //** try..except

end; //** function ArtikelinM02Plaschka


(******************************************************************************)
(***                     ArtikelinM04Klotz                                  ***)
(******************************************************************************)

function TFRM_DobosLV.ArtikelinM04Klotz: boolean;
var
   AValues : array [0..0] of Variant;
   SQLString : string;

begin

//** ArtikelStamm
try
   with AQY_Divers do
        begin
             if Active then
                Close;
             Connection := GetDobosADB;
             SQL.Clear;

             if ReadAnyFields (GetDobosADB,
                         'M04.dbo.ARTIKEL_STAMM',   //** 'M02.dbo.ARTIKEL_STAMM',
                         'WHERE ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''' ',
                         ['COUNT(*)'],
                         AValues) then
             try
                //!!EditMark!!:ArtikelStammänderungen
                if AValues[0] > 0 then
                   SQLString := 'UPDATE M04.dbo.ARTIKEL_STAMM SET '
                                +'KB = b.KB, '
                                +'ZN = b.ZN, '
                                +'BN = b.BN, '
                                +'EAN_NUMMER = b.EAN_NUMMER, '
                                +'GEWICHT = b.GEWICHT, '
                                +'GUE_BEME = b.GUE_BEME, '
                                +'WG = b.WG, '
                                +'RG = b.RG, '
                                +'MS_JN = b.MS_JN, '
                                +'GARANTIE_ZEIT = b.GARANTIE_ZEIT, '
                                +'RASTER_VK = b.RASTER_VK, '
                                +'STATUS = b.STATUS, '
                                +'VIEWER_PFAD = b.VIEWER_PFAD, '
                                +'WARENNUMMER = b.WARENNUMMER, '
                                +'URSPRUNG_LAND = b.URSPRUNG_LAND, '
                                +'URSPRUNG_REGION = b.URSPRUNG_REGION, '
                                +'MASSEINHEIT = b.MASSEINHEIT, '
                                +'DURCHMESSER = b.DURCHMESSER, '
                                +'LAENGE = b.LAENGE, '
                                +'BREITE = b.BREITE, '
                                +'HOEHE = b.HOEHE, '
                                +'SPEZ_GEWICHT = b.SPEZ_GEWICHT, '
                                +'ALTERNATE_ARTNR_1 = b.ALTERNATE_ARTNR_1, '
                                +'ALTERNATE_ARTNR_2 = b.ALTERNATE_ARTNR_2, '
                                +'ALTERNATE_ARTNR_3 = b.ALTERNATE_ARTNR_3, '
                                +'HYPERLINK = b.HYPERLINK, '
                                +'ANLAGE_DATUM = b.ANLAGE_DATUM, '
                                +'ANLAGE_USER_NR = b.ANLAGE_USER_NR, '
                                +'AENDERUNG_USER_NR = b.AENDERUNG_USER_NR '
                                +'FROM M04.dbo.ARTIKEL_STAMM a, '
                                +'M01.dbo.ARTIKEL_STAMM b WHERE a.ARTNR = b.ARTNR '
                                +'AND a.ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''''
                                //+'JOIN M01.dbo.ARTIKEL_STAMM AS b ON a.ARTNR = b.ARTNR '
                                //+'WHERE a.ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''''
                else
                   //!!EditMark!!:ArtikelStammänderungen
                   SQLString := 'INSERT INTO M04.dbo.ARTIKEL_STAMM ' //** 'INSERT INTO M02.dbo.ARTIKEL_STAMM '
                               +'( '
                               +'ARTNR, KB, ZN, BN, BEZ_1, BEZ_2, BEZ_3, BEZ_4, BEZ_5, BEZ_6, '
                               +'BEZ_7, BEZ_8, EAN_NUMMER, INFO, PRL_POS, GEWICHT, V_EINHEIT, '
                               +'ARBEITSPREIS, GUE_BEME, EK, DURCH_EK, MIN_DB, WG, RG, GARANTIE_ZEIT, '
                               +'RASTER_VK, PE_VK, STATUS, US, SL_JN, MS_JN, EM_JN, ME, DK_1, '
                               +'DK_2, DK_3, DK_4, DK_5, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, '
                               +'SACHMERKMAL, VIEWER_PFAD, WARENNUMMER, URSPRUNG_LAND, URSPRUNG_REGION, '
                               +'MASSEINHEIT, EM1_NUMMER, EM2_NUMMER, EM3_NUMMER, EM1_METHODE, EM2_METHODE, '
                               +'EM3_METHODE, EM1_ANTEIL, EM2_ANTEIL, EM3_ANTEIL, DURCHMESSER, '
                               +'LAENGE, BREITE, HOEHE, SPEZ_GEWICHT, B_BASIS, P_BASIS, LEAB, LEZU, '
                               +'ANLAGE_DATUM, AENDERUNG_DATUM, ANLAGE_USER_NR, AENDERUNG_USER_NR, KALK_KZ, DISPO_STOP, KALK_KZ_VK, ZN_REV, '
                               //** 10.0
                               +'MASSE_SIND_MM, MASSE_FUER_FA, AMM_PRINT, '
                               +'AMM_ART_KEY1, AMM_ART_KEY2, AMM_ART_KEY3, AMM_ART_KEY4, AMM_ART_KEY5, '
                               +'AMM_INHALT_KEY1, AMM_INHALT_KEY2, AMM_INHALT_KEY3, '
                               +'AMM_INHALT_FREI4, AMM_INHALT_FREI5, BV_PLAN_NUMMER, BV_SI_TAGE, '
                               //** 10.1
                               +'PRUEF_PFLICHTIG, MASSE_FREITEXT, PDM_GEPFLEGT, AL_NUMMER, PACKMITTEL, '
                               +'PACKMITTEL_VERSION, PACKMITTEL_STUECK_IN_PM, PACKMITTEL_IST_PM, '
                               +'ECCN_NUMMER, ZOLLTARIF_NUMMER, PRAEFERENZ, FEINPLANUNG, '
                               //** 10.2
                               +'VORGABELAGER_ZU, VORGABELAGER_ZU_DV, VORGABELAGER_AB, VORGABELAGER_AB_DV, '
                               +'ALTERNATE_ARTNR_1, ALTERNATE_ARTNR_2, ALTERNATE_ARTNR_3, '
                               //** 11.0
                               +'CHARGENPFLICHTIG, PREISAENDERUNG_BEMERKUNG, '

                               //** 11.1
                               +'PRAEFERENZ_ARTIKEL, PRAEFERENZ_ANTEIL, PRAEFERENZ_UE_DATUM, '
                               +'VERPACKUNGSKOSTEN, KALK_AUFSCHLAG_GRUPPE, HYPERLINK, HIDE_BESTAND '
                               +' )'
                               +'SELECT '
                               //**                 BEZ_1 BEZ_2 BEZ_3 BEZ_4 BEZ_5 BEZ_6,
                               +'ARTNR, KB, ZN, BN, '''', '''', '''', '''', '''', '''', '
                              //BEZ_7  BEZ_8  EAN_NUMMER  INFO PRL_POS,GEWICHT,V_EINHEIT,
                               +''''', '''', EAN_NUMMER, '''', 0, GEWICHT, 1.0000, '
                       //ARBEITSPREIS GUE_BEME  EK DURCH_EK MIN_DB WG, RG GARANTIE_ZEIT
                               +'0.0, GUE_BEME, 0.0, 0.0,    0.0,  WG, RG, GARANTIE_ZEIT, '
                       //RASTER_VK RASTER_VK PE_VK
                               +'RASTER_VK, 1, STATUS, 2, ''N'', MS_JN, ''N'', '''', 8, '
     //** IB 15.07.2015        +'DK_2, DK_3, DK_4, DK_5, '''', C2, '''', '''', C5, '''', '''', '''', '''', '''', '
     //** IB 02.12.2015 DK3    +'DK_2, DK_3, DK_4, DK_5, '''', '''', '''', '''', C5, '''', '''', '''', '''', C10, '
                               +'8, 0, 0, 1, '''', '''', '''', '''', '''', '''', '''', '''', '''', '''', '
                               +'''00000000000000000000'', VIEWER_PFAD, WARENNUMMER, URSPRUNG_LAND, URSPRUNG_REGION, '
                              //MASSEINHEIT ...
                               +'MASSEINHEIT, 0, 0, 0, '''', '''', '
                               +''''', 0.0000, 0.0000, 0.0000, DURCHMESSER, '
  //** IB 02.12.2015 SpezGew   +'LAENGE, BREITE, HOEHE, SPEZ_GEWICHT, B_BASIS, P_BASIS, ''01.01.1950'', ''01.01.1950'', '
                               +'LAENGE, BREITE, HOEHE, SPEZ_GEWICHT, 0, 0, ''01.01.1950'', ''01.01.1950'', '
  //** IB 02.12.2015 DispoStop +'ANLAGE_DATUM, ''01.01.1950'', ANLAGE_USER_NR, AENDERUNG_USER_NR, KALK_KZ, DISPO_STOP, KALK_KZ_VK, ZN_REV, '
                               +'ANLAGE_DATUM, ''01.01.1950'', ANLAGE_USER_NR, AENDERUNG_USER_NR, ''D'', ''N'', ''S'', '''', '
                               //** 10.0
//** 02.06.2017 SM             +'MASSE_SIND_MM, MASSE_FUER_FA, AMM_PRINT, '
//** 02.06.2017 SM             +'AMM_ART_KEY1, AMM_ART_KEY2, AMM_ART_KEY3, AMM_ART_KEY4, AMM_ART_KEY5, '
//** 02.06.2017 SM             +'AMM_INHALT_KEY1, AMM_INHALT_KEY2, AMM_INHALT_KEY3, '
//** 02.06.2017 SM             +'AMM_INHALT_FREI4, AMM_INHALT_FREI5, BV_PLAN_NUMMER, BV_SI_TAGE,  '
                               //** 01.06.2017 SM - keine Übergabe der Kategorien und Merkmale
                               +'''N'', ''N'', '                 //** 02.06.2017 SM
                               +'''N'', 0, 0, 0, 0, 0, 0, 0, 0, '''', '''', '    //** 02.06.2017 SM
                               +'0, 0, '                   //** 02.06.2017 SM
                               //** 10.1
                               +'''N'', '''', ''N'', '''', '''', '
                               //PACKMITTEL_VERSION ...
                               +'0, 0.00, ''N'', '
                               // ECCN_NUMMER ...
                               +''''', '''', ''N'', ''N'', '
                               //** 10.2
                               +'-1, -1, -1, -1, '  //**  +'VORGABELAGER_ZU, VORGABELAGER_ZU_DV, VORGABELAGER_AB, VORGABELAGER_AB_DV, '
                               +'ALTERNATE_ARTNR_1, ALTERNATE_ARTNR_2, ALTERNATE_ARTNR_3, '
                               //** 11.0
                               +'CHARGENPFLICHTIG, '''', ' //** PREISAENDERUNG_BEMERKUNG leer
                               //** 11.1
                               //PRAEFERENZ_ARTIKEL ...
                               +'''N'', 0.00, ''01.01.1950'', '
                               //VERPACKUNGSKOSTEN ...
                               +'0.00, 9, HYPERLINK, ''N'' '
                               //** 11.1 Ende
                               +'FROM M01.dbo.ARTIKEL_STAMM WHERE ARTNR = '''+Trim(EDT_ArtNr.Text)+''' '; //'FROM M01.dbo.ARTIKEL_STAMM WHERE ARTNR = '''+Trim(EDT_ArtNr.Text)+''' ';

                SQL.Add(SQLString);
                UCExecSQL(AQY_Divers);
                result := true;
                //Showmessage('Zeilen: ' +IntToStr(i))

             except
                on E:Exception do
                   begin
                        result := false;
                        ShowMessage(E.Message);
                   end; //** on E:Exception do
             end; //** try..except

        end; //** with AQY_Divers do
except
   on E:Exception do
      ShowMessage(E.Message);
end; //** try..except


//** Artikel-Texte
try
   with AQY_Divers do
        begin
             if Active then
                Close;
             Connection := GetDobosADB;
             SQL.Clear;

             //** Überprüfen obs die im Quellmandant gibt
             if ReadAnyFields (GetDobosADB,
                         'M01.dbo.ARTIKEL_TEXTE',
                         'WHERE ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''' AND SPRACHE = 1 ',
                         ['COUNT(*)'],
                         AValues) then
                if AValues[0] > 0 then
                   begin
                        if ReadAnyFields (GetDobosADB,
                                    'M04.dbo.ARTIKEL_TEXTE',
                                    'WHERE ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''' AND SPRACHE = 1 ',
                                    ['COUNT(*)'],
                                    AValues) then
                           try
                              if AValues[0] > 0 then
                                 begin
                                      SQLString := 'DELETE M04.dbo.ARTIKEL_TEXTE WHERE ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''' AND SPRACHE = 1 ';
                                      SQLString := SQLString + ' INSERT INTO M04.dbo.ARTIKEL_TEXTE SELECT * '
                                                             + ' FROM M01.dbo.ARTIKEL_TEXTE WHERE ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''' AND SPRACHE = 1 ';
                                 end
                              else
                                 SQLString := 'INSERT INTO M04.dbo.ARTIKEL_TEXTE '
                                             +'SELECT * FROM M01.dbo.ARTIKEL_TEXTE WHERE ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''' AND SPRACHE = 1';

                              SQL.Add(SQLString);
                              UCExecSQL(AQY_Divers);
                              result := true;
                           except
                              on E:Exception do
                                 begin
                                      result := false;
                                      ShowMessage(E.Message);
                                 end; //** on E:Exception do
                           end; //** try..except

                   end; //** if AValues[0] > 0
        end; //** with AQY_Divers do

except
   on E:Exception do
      ShowMessage(E.Message);
end; //** try..except


//** Artikel-Miniset
try
   with AQY_Divers do
        begin
             if Active then
                Close;
             Connection := GetDobosADB;
             SQL.Clear;

             //** Überprüfen obs die im Quellmandant gibt
             if ReadAnyFields (GetDobosADB,
                         'M01.dbo.ARTIKEL_MINISET',
                         'WHERE ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+'''',
                         ['COUNT(*)'],
                         AValues) then
                if AValues[0] > 0 then
                   begin
                        if ReadAnyFields (GetDobosADB,
                                    'M04.dbo.ARTIKEL_MINISET',
                                    'WHERE ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+'''',
                                    ['COUNT(*)'],
                                    AValues) then
                           try
                              if AValues[0] > 0 then
                                 begin
                                      SQLString := 'DELETE M04.dbo.ARTIKEL_MINISET WHERE ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''' ';
                                      SQLString := SQLString + ' INSERT INTO M04.dbo.ARTIKEL_MINISET SELECT * '
                                                             + ' FROM M01.dbo.ARTIKEL_MINISET WHERE ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''' ';
                                 end
                              else
                                 SQLString := 'INSERT INTO M04.dbo.ARTIKEL_MINISET '
                                             +'SELECT * FROM M01.dbo.ARTIKEL_MINISET WHERE ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''' ';

                              SQL.Add(SQLString);
                              UCExecSQL(AQY_Divers);
                              result := true;
                           except
                              on E:Exception do
                                 begin
                                      result := false;
                                      ShowMessage(E.Message);
                                 end; //** on E:Exception do
                           end; //** try..except
                   end; //** if AValues[0] > 0
        end; //** with AQY_Divers
except
   on E:Exception do
      ShowMessage(E.Message);
end; //** try..except


//** Hauptlieferant anlegen
//!!EditMark!!:ArtikelLieferantÄnderungen
try
   with AQY_Divers do
        begin
             if Active then
                Close;
             Connection := GetDobosADB;
             SQL.Clear;
             SQL.Add('IF NOT EXISTS (SELECT * FROM M04.dbo.ARTIKEL_LIEFERANT '
                     + 'WHERE ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''' AND NUMMER = 1) '
                     + 'INSERT INTO M04.dbo.ARTIKEL_LIEFERANT '
                     + '(ARTNR, NUMMER, KUNU, BESTELL_NR, WS, RABATT, WBZ, PE, RASTER, STAFFEL_BP, ZOLL_BP, FRACHT_BP, EK_1, EK_2, EK_3, EK_4, EK_5, EK_6, EK_7, EK_8, EK_9, EK_10, '
                     + 'ZOLL, FRACHT, LE_PREIS_UPDATE, MIAB, BEM, GESPERRT, HYPERLINK, ZUSCHLAGSART1, ZUSCHLAG1, ZUSCHLAGSART2, ZUSCHLAG2, ZUSCHLAGSART3, ZUSCHLAG3, RABATTIERT) '
                     + 'VALUES ( '
                     + ''''+Trim(SQLTextString(EDT_ArtNr.Text))+''', ' //** ARTNR
                     +' 1, '                                           //** NUMMER
                     +'70000, '                                        //** KUNU
                     +'''' + Trim(SQLTextString(EDT_ArtNr.Text))+''', '//** BESTELL_NR
                     +'1, '                                            //** WS
                     +'0.00, '                                         //** RABATT
                     +'0, '                                            //** WBZ
                     +'1, '                                            //** PE
                     +'0, '                                            //** RASTER
                     +'''B'', '                                        //** STAFFEL_BP
                     +'''P'', '                                        //** ZOLL_BP
                     +'''B'', '                                        //** FRACHT_BP
                     +'0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, '//** EK_1-EK_10
                     +'2.00, '                                         //** ZOLL
                     +'0.00, '                                         //** FRACHT
                     +'''01.01.1950'', '                               //** LE_PREIS_UPDATE
                     +'0.00, '                                         //** MIAB
                     +''''', '                                         //** BEM
                     +'0, '                                            //** GESPERRT
                     +'0, '                                            //** HYPERLINK
                     +'0, '                                            //** ZUSCHLAGSART1
                     +'0.00, '                                         //** ZUSCHLAG1
                     +'0, '                                            //** ZUSCHLAGSART2
                     +'0.00, '                                         //** ZUSCHLAG2
                     +'0, '                                            //** ZUSCHLAGSART3
                     +'0.00, '                                         //** ZUSCHLAG3
                     +'''N'') '                                        //** RABATTIERT
                     );

             UCExecSQL(AQY_Divers);
             result := true;
        end; //** with AQY_Divers do
except
   on E:Exception do
      begin
           ShowMessage(E.Message);
           Result := false;
      end; //** on E:Exception do
end; //** try..except

end; //** function ArtikelinM04Klotz


(******************************************************************************)
(***                   CheckIfM04ExistsKlotz                                ***)
(******************************************************************************)

function TFRM_DobosLV.CheckIfM04ExistsKlotz: boolean;
begin

with AQY_Divers do
     begin
          if Active then
             Close;
          Connection := GetDobosADB;
          SQL.Clear;
          SQL.Add('IF DB_ID(''M04'') IS NOT NULL SELECT 1 ELSE SELECT 0');
          UCOpenSQL(AQY_Divers);
          First;
          result := Fields[0].AsInteger = 1;
     end; //** with AQY_Divers

end; //** function CheckIfM04ExistsKlotz


(******************************************************************************)
(***      CheckHinweise                                                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.CheckHinweise(const AShow: boolean);
begin

//UIA_AdornerLVBadgeWichtigeHinweise.Visible := false;
try
   with AQY_HinweiseExists do
        begin
             if Active then
                Close;
             Parameters.Items[0].Value := AQY_ArtikelStammARTNR.AsString;
             Open; //** Parametrisierte Query ohne Literale kein UCChange machen!
             if (not EOF) then
                begin
                     if pos('L', FieldByName('SCHLAGWORT_1').AsString) > 0 then
                        begin
                             ShowWH := true;
                             if AShow then
                                if LastHinweisArtNr <> AQY_ArtikelStammARTNR.AsString then
                                   begin
                                        LastHinweisArtNr := AQY_ArtikelStammARTNR.AsString;
                                        CallInfoBlatt('w', AQY_ArtikelStammARTNR.AsString, Format('%s / %s',[AQY_ArtikelStammARTNR.AsString, AQY_ArtikelStammBEZ_1.AsString]),iblSichten);
                                   end; //** LastHinweisArtNr <> AQY_ArtikelStammARTNR.AsString
                        end
                     else
                        ShowWH := false;

                     BTN_LoadWichtigeHinweise.Down := true;
                    //UIA_AdornerLVBadgeWichtigeHinweise.Visible := (BTN_LoadWichtigeHinweise.VisibleForUser);
                end //** if (not EOF)
             else
                begin
                     BTN_LoadWichtigeHinweise.Down := false;
                     ShowWH := false;
                end;

             SetInfoButtonGlyphs;
             Close;
        end; //** with AQY_HinweiseExists do

except  //** nix, nur schaun
   on E:Exception do
      ShowMessage(E.Message);

end; //** try..except

end; //** procedure CheckHinweise


(******************************************************************************)
(***      EDT_DispoStop: OnLookupClick                                      ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_DispoStopLookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkJN, Sender, Self);

end; //** procedure EDT_DispoStopLookupClick


(******************************************************************************)
(***         EDT_HideBestand: OnLookupClick                                 ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_HideBestandLookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkJN, Sender, Self);

end; //** procedure EDT_HideBestandLookupClick


(******************************************************************************)
(***      EDT_KalkKZ: OnLookupClick                                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_KalkKZLookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkKalkKZ, Sender, Self);

end; //** procedure EDT_KalkKZLookupClick


(******************************************************************************)
(***      EDT_KALKKZ_VK: OnLookupClick                                      ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_KALKKZ_VKLookupClick(Sender: TObject);
begin

inherited;
GetListItem(lkKalkKZVK, Sender, Self);

end; //**procedure EDT_KALKKZ_VKLookupClick


(******************************************************************************)
(***      MNI_FCPOutput: OnClick                                            ***)
(******************************************************************************)
procedure TFRM_DobosLV.MNI_FCPOutputClick(Sender: TObject);
var
   sName : string;
   r     : boolean;

               (******************************************************************************)
               (***     ProcessSql                                                         ***)
               (******************************************************************************)

               function ProcessSql(AQuery: TADOQuery; AFileName: string): boolean;
               var
                  SL  : TStringList;
                  i,j : integer;

               begin

               result := true;
               i := 0;
               J := 0;

               try
                  SL := TStringList.Create;
                  SL.Clear;
                  SL.LoadFromFile(AFileName);
                  if SL.Count < 1 then
                     raise EAbort.Create('');

                  with AQuery do
                       try
                          if Active then
                             Close;
                          Connection := GetDobosADB;
                          SQL.Clear;
                          repeat
                                if AnsiUpperCase(copy(SL.Strings[i],1,2)) = 'GO' then
                                   begin
                                        inc(i);
                                        ExecSQL; //** muß bleiben, Script aus Datei
                                        Application.ProcessMessages;
                                        SQL.Clear;
                                        Continue;
                                   end; //** if AnsiUpperCase(copy(SL.Strings[i],1,2)) = 'GO'
                                if SL.Strings[i] <> '' then
                                   SQL.Add(SL.Strings[i]);
                                inc(i);
                          until i >= SL.Count;
                       except
                          on E:Exception do
                             ShowMessage(E.Message);
                       end; //** with AQuery do

               finally
                  if assigned(SL) then
                     SL.Free;
                  if AQuery.Active then
                     AQuery.Close;
               end; //** outer try..finally

               end; //** function ProcessSql

(******************************************************************************)
(***  Start der procedure MNI_FCPOutputClick                                ***)
(******************************************************************************)

begin

inherited;

if not (GetLinkagePointer^.PRIV_ERFASSEN in ['J', 'L', 'l','b','x','y']) then
   begin
        NoPrivilege;
        Exit;
   end; //** if not (GetLinkagePointer^.PRIV_LOESCHEN in ['J', 'L'])

if (MessageDlg(rs_LV_QOutputFCPStart,
		 mtConfirmation,[mbYes,mbNo],0)) <> mrYes then
	   Exit;

sName := ExtractFilePath(Application.ExeName)+Format('OutputToFCP%2.2d.sql',[GetLinkagePointer^.MRecord.Mandant]);
if not BIOSFileExists(sName) then
   sName := ExtractFilePath(Application.ExeName)+'OutputToFCP.sql';
   if not BIOSFileExists(sName) then
      begin
           ShowMessage(Format(rs_LV_FCPFileFehlt,[sName]));
           Exit;
      end; //** if not BIOSFileExists(sName)

try
   ShowSQLWait;
   try
      r := ProcessSql(AQY_Divers, sName);
   except
      on E: Exception do
         ShowMessage(E.Message);
   end; //** try..except


finally
   UnShowSQLWait;
   if not r then
      ShowMessage(rs_LV_FCPOutFailed)
   else
      ShowMessage(rs_LV_FCPOutSuccess);

end; //** try..finally

end; //** procedure MNI_FCPOutputClick


(******************************************************************************)
(***   MNI_MegamatArtikelExport: OnClick                                    ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_MegamatArtikelExportClick(Sender: TObject);
const
   //** Megamat bleibt Ansi
   AnlageMegamatT1 = 'if not exists (select * from B2000_MEGAMAT.dbo.sysobjects where id = object_id(''';
   AnlageMegamatT2 = ''') and sysstat & 0xf = 3) BEGIN CREATE TABLE ';
   TabelleMegamat = ' (ID      INTEGER IDENTITY(1,1), '
                  + '  DONE    INTEGER DEFAULT (0), '
                  + '  TOPP    INTEGER DEFAULT (0), '
                  + '  ISORDER INTEGER DEFAULT (0), '
                  + '  LINE    VARCHAR(100) NOT NULL '
                  + '  PRIMARY KEY (ID) ) ';

var
   c           : integer;
   MegamatName : string;

begin
inherited;

if (MessageDlg(rs_LV_QMegamat, mtConfirmation,[mbYes,mbNo],0)) <> mrYes then
   Exit;

MegamatName := 'B2000_MEGAMAT.dbo.'+Format('M%2.2d',[GetLinkagePointer^.MRecord.Mandant])+'_MEGAMAT';

try
   try
      with AQY_Divers do
           try
              if Active then
                 Close;
              Connection := GetDobosADB;
              ShowSQLWait;
              AQY_Divers.Connection.BeginTrans;

              //** Erstanlage der Tabelle Megamat, wenn noch nicht vorhanden
              SQL.Clear;
              SQL.Add(AnlageMegamatT1 + MegamatName + AnlageMegamatT2 + MegamatName + TabelleMegamat+ 'END ');
              UCExecSQL(AQY_Divers);

              //** Löschen bzw. Leeren der Tabelle
              //** ISORDER = 0 - löschen der Stammdaten; DONE = 1 - von Megamat gelesen
              SQL.Clear;
              SQL.Add('DELETE FROM ' + MegamatName + ' WHERE DONE = 1 OR ISORDER = 0');
              UCExecSQL(AQY_Divers);

              //** Count nach Löschen ermitteln
              //** wenn 0 dann Drop und Create der Tabelle, damit ID wieder bei 1 beginnt
              SQL.Clear;
              SQL.Add('SELECT COUNT(*) FROM ' + MegamatName);
              UCOpenSQL(AQY_Divers);
              c := Fields[0].AsInteger;
              Close;
              if c = 0 then   //** Tabelle leer - Drop und Create
                 try
                    SQL.Clear;
                    SQL.Add('DROP TABLE ' + MegamatName);
                    UCExecSQL(AQY_Divers);

                    SQL.Clear;
                    SQL.Add('CREATE TABLE ' + MegamatName + TabelleMegamat);
                    UCExecSQL(AQY_Divers);
                 except
                 end; //** try..except

              //** Insert aller Artikel mit Status <> 9 und PRL_pos > 0; Klasse wird leer übergeben
              //** C7 = Codierung für Platzgröße; PrlPos = Max.Belegung pro Platz
              SQL.Clear;
              //** Megamat bleibt Ansi VARCHAR
              SQL.Add('INSERT INTO ' + MegamatName + ' (DONE, TOPP, ISORDER, LINE) '
                     +'SELECT 0,1,0, ' //** Done = 0 - Datensatz geschrieben; Topp = 1 - Import; IsOrder = 0 - Artikeldaten
//** 01.09.2015      +'ARTNR+''||''+BEZ_1+''|''+BEZ_2+''|''+ME+''|''+C10+''|''+(CONVERT(VARCHAR(10),PRL_POS))+''|'' '
//** 01.09.2015      +'FROM ARTIKEL_STAMM WHERE STATUS <> 9 AND PRL_POS > 0');
                     +'s.ARTNR+''||''+s.BEZ_1+''|''+s.BEZ_2+''|''+s.ME+''|''+s.C10+''|''+(CONVERT(VARCHAR(10),s.PRL_POS))+''|'' '
                     +'FROM ARTIKEL_STAMM s LEFT JOIN ARTIKEL_LAGER l ON s.ARTNR = l.ARTNR '                //** 01.09.2015
                     +'WHERE (s.STATUS <> 9) AND (l.LAGER = 1) AND ((l.ORT = ''L'') or (l.ORT = ''S''))');  //** 01.09.2015
              UCExecSQL(AQY_Divers);

              AQY_Divers.Connection.CommitTrans;
              UnShowSQLWait;
              ShowMessage(rs_LV_Megamaterfolg);

           except
               on E:Exception do
                 ShowMessage(E.Message);
           end; //** try..except
   except
         AQY_Divers.Connection.RollbackTrans;
         ShowMessage(rs_LV_MegamatGescheitert);
   end;  //** try..except

finally
   UnShowSQLWait;
   with AQY_Divers do
        if Active then
           Close;
   UpdateButtons;
end; //** try..finally

end; //** procedure MNI_MegamatArtikelExportClick


(******************************************************************************)
(***                 LYI_SummeDispoCaption: OnClick                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.LYI_SummeDispoCaptionClick(Sender: TObject);
begin

inherited;

DispoAktuellSw := (not (DispoAktuellSw));
if DispoAktuellSw then
   LYI_SummeDispo.Caption := rs_LV_DispoAkt
else
   LYI_SummeDispo.Caption := rs_LV_DispoTot;

ReadAllData;

end; //** procedure LYI_SummeDispoCaptionClick


(******************************************************************************)
(***      MNI_LoadSLExplorer: OnClick                                       ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_LoadSLExplorerClick(Sender: TObject);
begin

inherited;
with GetLinkagePointer^ do
     begin
          if ((Priv_Dobos <> Ja) or (Priv_SL <> Ja)) then
             begin
                  NoPrivilege;
                  Exit;
             end; //** if ((Priv..
     end; //** with MainLinkage^ do

if (not GetLinkagePointer^.Module[imSL]) then
   begin
        NotInstalled(rs_StuecklistenModul);
        Exit;
   end; //** if (not MainLinkage^.Module[imSL])

//** 11.1 SM Screen.Cursor := crHourGlass;
//** 11.1 SM LoadDll(dnDobosSX, ctyNormal, ' ');

if ((IsSpace(EDT_ArtNr.Text)) or (not BTN_LoadSX.Enabled)) then  //** 11.1 SM - a
   begin
        Screen.Cursor := crHourGlass;
        LoadDll(dnDobosSX, ctyNormal, ' ');
   end  //** if IsSpace(EDT_ArtNr.Text) then
else
   if BTN_LoadSX.Enabled then
      begin
           GetLinkagePointer^.LinkString128 := Trim(EDT_ArtNr.Text);
           LoadDll(dnDobosSX, ctyNormal, 'L');
      end; //** if BTN_LoadSX.Enabled then              //** 11.1 SM - e

end; //** procedure MNI_LoadSLExplorerClick


(******************************************************************************)
(***     CopySTDAP                                                          ***)
(******************************************************************************)

function TFRM_DobosLV.CopySTDAP (const AArtNr : string) : boolean;
var
   c : integer;
   res,
   mPos,
   mAPIdIndex : integer;


begin

result := false;
//** Test - Standardarbeitsplan vorhanden
with AQY_Divers do
     try
        if Active then
           Close;
        Connection := GetDobosADB;
        SQL.Clear;
        SQL.Add('SELECT count(*) FROM DV_STD_KOPF WHERE HAUPT_ARTNR = ''XXX-99999'' '
               +'AND REVISION = '''' ');
        UCOpenSQL(AQY_Divers);
        if not EOF then
           c := Fields[0].AsInteger;
        Close;
     except
       on E:Exception do
          ShowMessage(E.Message);
     end; //** try..except

if c < 1 then
   begin
        ShowMessage(rs_LV_NoStdAP);
        Exit;
   end;  //** if c < 1

//** Standardarbeitsplan kopieren
res := -1;

with AQY_Divers do
     try
        if Active then
           Close;
        Connection := GetDOBOSADB;

        Connection.BeginTrans;
        SQL.Clear;
        //** kopieren Kopf - Anlagedatum, AnlageUser wird mit aktuellen Daten versorgt
        //**                 Änderungsdatum wird mit Nulldatum und ÄnderungsUser mit 0 versorgt
        //**                 RZ_SEK := 0 LZ_SEK := 0 SUMME_RK := 0.0 SUMME_SK := 0.0 SUMME_MK := 0.0
        //!!EditMark!!:STDKopfTabellenänderungen
        SQL.Add('INSERT INTO DV_STD_KOPF (HAUPT_ARTNR, REVISION, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, '
               +'SL_JN, RZ_SEK, LZ_SEK, SUMME_RK, SUMME_SK, SUMME_MK, ERSTELLER, TYP, BEMERKUNG, ANLAGE_DATUM, '
               +'AENDERUNG_DATUM, ANLAGE_USER, AENDERUNG_USER, VARIANTE, SW1, SW2, SW3, SPERR_KZ, '
               +'VORGABE_ZUGANG_LAGER, D2_PRIORITAET, BDE_VERTEILTE_MELDUNGEN, '
               //** neue Felder 9.5 und 10.0
               +'SUMME_GK_PLAN_EINMAL, SUMME_GK_PLAN_FERT, SUMME_GK_PLAN_MAT, SUMME_GK_PLAN_FREMD, SUMME_GK_PLAN_RUEST, '
               +'SUMME_GK_LE_EINMAL, SUMME_GK_LE_FERT, SUMME_GK_LE_MAT, SUMME_GK_LE_FREMD, SUMME_GK_LE_RUEST, '
               +'SUMME_GK_DURCH_EINMAL, SUMME_GK_DURCH_FERT, SUMME_GK_DURCH_MAT, SUMME_GK_DURCH_FREMD, SUMME_GK_DURCH_RUEST, '
               +'DURCHSCHNITTS_ZAEHLER, STATUS, '
               //** sämtliche Felder bis 11.1 fehlten! DB 29.2.2016
               +'D2_MAN_OPT_ZIEL, WERKZEUGKOSTEN, SL_EINZELMODE, FE_AUFTRAG_NOPRINT, '
               //** 12.1
               +'UZ_SEK '
               +') '
               +'SELECT ''' + SQLTextString(AArtNr)+''', c.REVISION, c.C1, c.C2, c.C3, c.C4, c.C5, '
               +'c.C6, c.C7, c.C8, c.C9, c.C10, c.SL_JN, '
               +'0, 0, 0, 0, 0,' //**c .RZ_SEK, c.LZ_SEK, c.SUMME_RK, c.SUMME_SK, c.SUMME_MK,
               +'c.ERSTELLER, c.TYP, c.BEMERKUNG, '''+SHBDateToStr(GetLinkagePointer^.TagesDatum)+''', '''
               +NullDatum+''', '+IntToStr(GetLinkagePointer^.UserNummer)+', 0, c.VARIANTE, c.SW1, c.SW2, '
               +'c.SW3, c.SPERR_KZ, c.VORGABE_ZUGANG_LAGER, c.D2_PRIORITAET, c.BDE_VERTEILTE_MELDUNGEN, '
               //** neue Felder 9.5 und 10.0
               +'0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, '
               +'0, 0, ' //** Status nicht mitkopieren

               //** sämtliche Felder bis 11.1 fehlten! DB 29.2.2016
               +'c.D2_MAN_OPT_ZIEL, c.WERKZEUGKOSTEN, c.SL_EINZELMODE, c.FE_AUFTRAG_NOPRINT, '
               //** 12.1
               +'c.UZ_SEK '
               +'FROM DV_STD_KOPF c (NOLOCK) WHERE c.HAUPT_ARTNR = ''XXX-99999'' AND c.REVISION = '''' AND '
               +'NOT EXISTS (SELECT x.HAUPT_ARTNR FROM DV_STD_KOPF x WHERE x.HAUPT_ARTNR = '''
               +SQLTextString(AArtNr)+''' AND x.REVISION = '''') ');

         res := 1; //** Fehler beim Insert vom Kopf
         UCExecSQL(AQY_Divers);

         //!!EditMark!!:STDPostenTabellenänderungen
         SQL.Clear;
         //** kopieren Posten - DurchMenge, Zaehler, DurchWert, LeWert mit 0 übergeben
         SQL.Add('INSERT INTO DV_STD_POSTEN (HAUPT_ARTNR, REVISION, POS, ARTNR, ART, REFA, DRUCK_FLAG, '
                +'FB_KOPIE, MEHR_PLATZ, MENGE, DURCH_MENGE, ZAEHLER, WERT, DURCH_WERT, LE_WERT, C1, C2, '
                +'C3, C4, C5, C6, C7, C8, C9, C10, TEXT_1, TEXT_2, TEXT_3, TEXT_4, TEXT_5, TEXT_6, TEXT_7, '
                +'BEMERKUNG, V_KZ, HM1_NUMMER, HM2_NUMMER, HM3_NUMMER, HM4_NUMMER, HM5_NUMMER, HM1_TEXT, '
                +'HM2_TEXT, HM3_TEXT, HM4_TEXT, HM5_TEXT, BERECHNUNGS_ART, DURCHMESSER, LAENGE, BREITE, '
                +'HOEHE, ENTNAHME, RZ_SEK, LZ_SEK, UZ_SEK, DURCH_RZ_SEK, DURCH_LZ_SEK, LE_RZ_SEK, LE_LZ_SEK, '
                +'VORGABE_ENTNAHME_LAGER, APID_INDEX, ZUSCHLAG, ZUSCHLAG_BP, TERMNR_AV, D2_UEBERLAPPEN, '
                +'D2_UEBERLAPPEN_PROZ, PLAN_BZ_SEK, MEILENSTEIN, D2_RK1, D2_RK2, ANZAHL_BEDIENER, MMB, '
                +'EINMALKOSTEN, DISPO2000_PM_ANZAHL_PALETTEN, DISPO2000_PM_ANZAHL_TEILE, FF_ME, FF_ME_FAKTOR, '
               //** neue Felder 10.0
                +'FUELLMENGE, D2_PERSONALQUOTE, D2_BEVORZUGTE_SCHICHT, D2_ALTERNATE_KAP1, D2_ALTERNATE_KAP2, D2_ALTERNATE_KAP3, '
                //** sämtliche Felder bis 11.1 fehlten! DB 29.2.2016
                +'D2_PLANUNGS_KZ, D2_AG_FOLGE, PRUEF_PFLICHTIG, EK, EK_FLAG, HM_1_FEINPLANUNG, HM_2_FEINPLANUNG, '
                +'HM_3_FEINPLANUNG, HM_4_FEINPLANUNG, HM_5_FEINPLANUNG, FF_PLAN_WERT_FIX, FF_PLAN_WERT_VAR, '
                +'FF_PLAN_WERT_MINDEST, FERTIGUNGSFOLGE, '
                //** 12.0
                +'MMB_PLAN_PROZENTSATZ, '
                //** 12.1
                +'EINSTELLTEIL, LE_MDELZSEK, DURCH_MDELZSEK '
                +') '
                +'SELECT ''' + SQLTextString(AArtNr)+''', c.REVISION, c.POS, c.ARTNR, c.ART, c.REFA, c.DRUCK_FLAG, '
                +'c.FB_KOPIE, c.MEHR_PLATZ, c.MENGE, 0 , 0, c.WERT, 0, 0, c.C1, c.C2, c.C3, c.C4, c.C5, c.C6, c.C7, '
                +'c.C8, c.C9, c.C10, c.TEXT_1, c.TEXT_2, c.TEXT_3, c.TEXT_4, c.TEXT_5, c.TEXT_6, c.TEXT_7, c.BEMERKUNG, '
                +'c.V_KZ, c.HM1_NUMMER, c.HM2_NUMMER, c.HM3_NUMMER, c.HM4_NUMMER, c.HM5_NUMMER, c.HM1_TEXT, c.HM2_TEXT, '
                +'c.HM3_TEXT, c.HM4_TEXT, c.HM5_TEXT, c.BERECHNUNGS_ART, c.DURCHMESSER, c.LAENGE, c.BREITE, c.HOEHE, '
                +'c.ENTNAHME, c.RZ_SEK, c.LZ_SEK, c.UZ_SEK, c.DURCH_RZ_SEK, c.DURCH_LZ_SEK, c.LE_RZ_SEK, c.LE_LZ_SEK, '
                +'c.VORGABE_ENTNAHME_LAGER, 0, ' //** APID_INDEX - wird später versorgt
                +'c.ZUSCHLAG, c.ZUSCHLAG_BP, c.TERMNR_AV, c.D2_UEBERLAPPEN, c.D2_UEBERLAPPEN_PROZ, c.PLAN_BZ_SEK, '
                +'c.MEILENSTEIN, c.D2_RK1, c.D2_RK2, c.ANZAHL_BEDIENER, c.MMB, c.EINMALKOSTEN, c.DISPO2000_PM_ANZAHL_PALETTEN, '
                +'c.DISPO2000_PM_ANZAHL_TEILE, c.FF_ME, c.FF_ME_FAKTOR, '
               //** neue Felder 10.0
                +'c.FUELLMENGE, D2_PERSONALQUOTE, D2_BEVORZUGTE_SCHICHT, D2_ALTERNATE_KAP1, D2_ALTERNATE_KAP2, D2_ALTERNATE_KAP3, '

                //** sämtliche Felder bis 11.1 fehlten! DB 29.2.2016
                +'c.D2_PLANUNGS_KZ, c.D2_AG_FOLGE, c.PRUEF_PFLICHTIG, c.EK, c.EK_FLAG, c.HM_1_FEINPLANUNG, c.HM_2_FEINPLANUNG, '
                +'c.HM_3_FEINPLANUNG, c.HM_4_FEINPLANUNG, c.HM_5_FEINPLANUNG, c.FF_PLAN_WERT_FIX, c.FF_PLAN_WERT_VAR, '
                +'c.FF_PLAN_WERT_MINDEST, c.FERTIGUNGSFOLGE, '
                //** 12.0
                +'c.MMB_PLAN_PROZENTSATZ, '
                //** 12.1
                +'c.EINSTELLTEIL, '
                +'0, 0 '  //** LE_MDELZSEK, DURCH_MDELZSEK

                +'FROM DV_STD_POSTEN c (NOLOCK) WHERE c.HAUPT_ARTNR = ''XXX-99999'' AND c.REVISION = '''' AND '
                +'NOT EXISTS (SELECT x.HAUPT_ARTNR FROM DV_STD_POSTEN x WHERE x.HAUPT_ARTNR = '''
                +SQLTextString(AArtNr)+''' AND x.REVISION = '''') ');

         res := 2; //** Fehler beim Insert der Posten
         UCExecSQL(AQY_Divers);

         //** Ermittlung der Anzahl der Posten mit APID_Index = 0
         SQL.Clear;
         SQL.Add('SELECT * FROM DV_STD_POSTEN WHERE HAUPT_ARTNR = '''+SQLTextString(AArtNr)+''' '
                +'AND REVISION = '''' AND APID_INDEX = 0');
         UCOpenSQL(AQY_Divers);
         First;
         while not EOF do
               begin
                    mAPIdIndex := FieldByName('APID_INDEX').AsInteger;
                    if mAPIdIndex = 0 then
                       CallNummern(GetDobosADB, nil, numLitNEXTDVAPIDNR, numGetNext, mAPIdIndex);
                    mPos := FieldByName('POS').AsInteger;

                    //** Update des APID_Index
                    with AQY_Divers2 do
                         begin
                              if Active then
                                 Close;
                              Connection := GetDOBOSADB;
                              SQL.Clear;
                              SQL.Add('UPDATE DV_STD_POSTEN SET APID_INDEX = '+IntToStr(mAPIdIndex)
                                     +'WHERE HAUPT_ARTNR = '''+SQLTextString(AArtNr)+''' AND REVISION = '''' '
                                     +'AND POS = '+IntToStr(mPos)+' ');
                              res := 3; //** Fehler beim Versorgen des APID_Index
                              UCExecSQL(AQY_Divers2);
                        end; //** with AQY_Divers2 do
                    Next;
               end; //** while not EOF do

         Connection.CommitTrans;
         res := 0; //** Alles OK

   except
       on E:Exception do
          begin
               if AQY_Divers.Active then
                  AQY_Divers.Close;
               if AQY_Divers2.Active then
                  AQY_Divers2.Close;
               ShowMessage(E.Message);
               Connection.RollbackTrans;
          end;
   end; //** with AQY_Divers do

if res = 1 then
   ShowMessage(rs_LV_ReadAPKopfFailed)
else
   if res = 2 then
     ShowMessage(rs_LV_ReadAPPostenFailed)
   else
      if res = 3 then
         ShowMessage(rs_LV_WriteAPIndexFailed)
      else
         if res = 0 then
            result := true; //** alles OK

end; //** function CopySTDAP


(******************************************************************************)
(***                    UebersteuerungHoehne                                ***)
(******************************************************************************)

procedure TFRM_DobosLV.UebersteuerungHoehne;
begin

//** 21.10.2009 Änderung Höhne, Anfrage tel. Lieferantenpreise sollen editierbar sein, wenn
//** C8 des Artikels = 'M' oder 'W' oder 'H'
if (EDT_C8.Text = 'M') or (EDT_C8.Text = 'W') or (EDT_C8.Text = 'H') then
   begin
        EDT_LiefEK_1.DeActivated:= false;
        EDT_LiefEK_2.DeActivated:= false;
        EDT_LiefEK_3.DeActivated:= false;
        EDT_LiefEK_4.DeActivated:= false;
        EDT_LiefEK_5.DeActivated:= false;
        EDT_LiefEK_6.DeActivated:= false;
        EDT_LiefEK_7.DeActivated:= false;
        EDT_LiefEK_8.DeActivated:= false;
        EDT_LiefEK_9.DeActivated:= false;
        EDT_LiefEK_10.DeActivated:= false;
        EDT_LiefRabatt.DeActivated:= false;
        EDT_LiefZoll.DeActivated:= false;
        EDT_LiefFracht.DeActivated:= false;

        SBT_LiefInsert.Enabled :=   ((not (isSpace(EDT_ArtNr.Text))) and
                                    (AQY_Lieferant.Active) and
                                    (AQY_Lieferant.State = dsBrowse));

        SBT_LiefDelete.Enabled := ((AQY_Lieferant.Active) and
                                   (AQY_Lieferant.State = dsBrowse) and
                                   (AQY_Lieferant.RecordCount > 0));

        SBT_LiefEdit.Enabled :=   ((AQY_Lieferant.Active) and
                                  (AQY_Lieferant.State = dsBrowse) and
                                  (AQY_Lieferant.RecordCount > 0));
   end //**
else
   begin
        EDT_LiefEK_1.DeActivated:= not ek;
        EDT_LiefEK_2.DeActivated:= not ek;
        EDT_LiefEK_3.DeActivated:= not ek;
        EDT_LiefEK_4.DeActivated:= not ek;
        EDT_LiefEK_5.DeActivated:= not ek;
        EDT_LiefEK_6.DeActivated:= not ek;
        EDT_LiefEK_7.DeActivated:= not ek;
        EDT_LiefEK_8.DeActivated:= not ek;
        EDT_LiefEK_9.DeActivated:= not ek;
        EDT_LiefEK_10.DeActivated:= not ek;
        EDT_LiefRabatt.DeActivated:= not ek;
        EDT_LiefZoll.DeActivated:= not ek;
        EDT_LiefFracht.DeActivated:= not ek;

        SBT_LiefInsert.Enabled := (((GetlinkagePointer^.PRIV_ERFASSEN = ja) or
                                    (GetlinkagePointer^.PRIV_ERFASSEN = 'L') or
                                    (GetlinkagePointer^.PRIV_ERFASSEN = 'l') or
                                    (GetlinkagePointer^.PRIV_ERFASSEN = 'b') or
                                    (GetlinkagePointer^.PRIV_ERFASSEN = 'x') or
                                    (GetlinkagePointer^.PRIV_ERFASSEN = 'y')) and
                                    (not (isSpace(EDT_ArtNr.Text))) and
                                    (AQY_Lieferant.Active) and
                                    (AQY_Lieferant.State = dsBrowse));

        SBT_LiefDelete.Enabled := (((GetlinkagePointer^.PRIV_LOESCHEN = ja) or (GetlinkagePointer^.PRIV_LOESCHEN = 'L')) and
                                   (AQY_Lieferant.Active) and
                                   (AQY_Lieferant.State = dsBrowse) and
                                   (AQY_Lieferant.RecordCount > 0));

        SBT_LiefEdit.Enabled := (((GetlinkagePointer^.PRIV_AENDERN = ja) or
                                  (GetlinkagePointer^.PRIV_AENDERN = 'L')) and
                                  (AQY_Lieferant.Active) and
                                  (AQY_Lieferant.State = dsBrowse) and
                                  (AQY_Lieferant.RecordCount > 0));

   end;

SBT_LiefSave.Enabled   := ((AQY_Lieferant.Active) and (AQY_Lieferant.State <> dsBrowse));
SBT_LiefCancel.Enabled := ((AQY_Lieferant.Active) and (AQY_Lieferant.State <> dsBrowse));

end; //** procedure UebersteuerungHoehne

{
(******************************************************************************)
(***                 UIA_AdornerLVBadgeInfoblatt: OnClick                   ***)
(******************************************************************************)

procedure TFRM_DobosLV.UIA_AdornerLVBadgeInfoblattClick(
  AManager: TdxUIAdornerManager; AAdorner: TdxCustomAdorner);
begin

inherited;

BTN_LoadIBClick(nil);

end; //** procedure UIA_AdornerLVBadgeInfoblattClick


(******************************************************************************)
(***               UIA_AdornerLVBadgeWichtigeHinweise: OnClick              ***)
(******************************************************************************)

procedure TFRM_DobosLV.UIA_AdornerLVBadgeWichtigeHinweiseClick(
  AManager: TdxUIAdornerManager; AAdorner: TdxCustomAdorner);
begin

inherited;

BTN_LoadWichtigeHinweiseClick(nil);

end; //** procedure UIA_AdornerLVBadgeWichtigeHinweiseClick
}

(******************************************************************************)
(***      VorbelegungBezMentec                                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.VorbelegungBezMentec;
var HelpBez,
    HelpBez2 : string;
    HelpInt  : integer;
begin

HelpBez := 'K-Box'+#0174;
HelpBez2 := 'Steinhorst'+#0174;

if (Erfassen) and (not ArtNrEntryZwang) then
   begin
        if (copy(EDT_ARTNR.Text,1,3) = 'KB-') then
           try
              HelpInt := StrToInt(copy(EDT_ARTNR.Text,4,5));
              if ((Helpint > 0) and (HelpInt <= 99999)) then
                 EDT_Bez_1.Text := HelpBez;
           except
           end;

        if (copy(EDT_ARTNR.Text,1,5) = 'KBGK-') then
           try
              HelpInt := StrToInt(copy(EDT_ARTNR.Text,6,5));
              if ((Helpint > 0) and (HelpInt <= 99999)) then
                 EDT_Bez_1.Text := HelpBez;
           except
           end;

        if (copy(EDT_ARTNR.Text,1,3) = 'BG-') then
           try
              HelpInt := StrToInt(copy(EDT_ARTNR.Text,4,5));
              if ((Helpint > 0) and (HelpInt <= 99999)) then
                 EDT_Bez_1.Text := HelpBez;
           except
           end;

        if (copy(EDT_ARTNR.Text,1,2) = 'T-') then
           try
              HelpInt := StrToInt(copy(EDT_ARTNR.Text,3,5));
              if ((Helpint > 0) and (HelpInt <= 99999)) then
                 EDT_Bez_1.Text := HelpBez;
           except
           end;

        if (copy(EDT_ARTNR.Text,1,3) = 'SH-') then
           try
              HelpInt := StrToInt(copy(EDT_ARTNR.Text,4,5));
              if ((Helpint > 0) and (HelpInt <= 99999)) then
                 EDT_Bez_1.Text := HelpBez2;
           except
           end;


   end; //** if (Erfassen) and (not ArtNrEntryZwang) then

end; //** procedure VorbelegungBezMentec;


(******************************************************************************)
(***     EDT_ZusatzTextSprache: OnChange                                    ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_ZusatzTextSpracheChange(Sender: TObject);
var
  B: Boolean;
  arec: TSchlRec;

begin
inherited;

arec := CallSys('SP',EDT_ZusatztextSprache.AsInteger , B);
if (B) then
   LAB_ZusatztexteSprache.Caption := arec.TEXT;

end; //** procedure: EDT_ZusatzTextSpracheChange


(******************************************************************************)
(***                 EDT_ZuschlagArt1: OnLookupClick                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_ZuschlagArt1LookupClick(Sender: TObject);
begin

inherited;

GetListItem(lkZU, Sender, Self);

end; //** procedure EDT_ZuschlagArt1LookupClick


(******************************************************************************)
(***                EDT_ZuschlagRabattiert: OnValidate                      ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_ZuschlagRabattiertValidate(var Text: string;
  var Continue: Boolean);
begin

inherited;

if not (AQY_Lieferant.State in [dsEdit, dsInsert]) then
   Exit;

if Text <> 'J' then
   Text := 'N';
Continue := true;

end; //** procedure EDT_ZuschlagRabattiertValidate


(******************************************************************************)
(***     MNI_DrDocSichten: OnClick                                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_DrDocSichtenClick(Sender: TObject);
var
   mArtNr : string;

begin
inherited;

if (not (AQY_ArtikelStamm.Active)) then
   Exit;

if GetLinkagePointer^.Module[imDrDoc] then
   begin
        mArtNr := TrimRight(AQY_ArtikelStammARTNR.AsString);
        if isSpace(mArtNr) then
           Exit;
        CallDrDoc(-1, mArtNr, -3);
   end; //** if GetLinkagePointer^.Module[imDrDoc]

end; //** procedure MNI_DrDocSichtenClick


(******************************************************************************)
(***     MNI_DrDocArchivieren: OnClick                                      ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_DrDocArchivierenClick(Sender: TObject);
var
   mSB    : integer;
   mArtNr : string;

begin
inherited;

mArtNr := TrimRight(AQY_ArtikelStammARTNR.AsString);
if isSpace(mArtNr) then
   Exit;

if GetLinkagePointer^.IsSBNr > -1 then
   mSB := GetLinkagePointer^.IsSBNr
else
   mSB := -1;

try
   WriteDrDocNew(0, '', mArtNr, 0, 0, '', '', mSB);
except
    on E: Exception do
       ShowMessage(E.Message);
end;

end; //** procedure MNI_DrDocArchivierenClick


(******************************************************************************)
(***      EDT_AMMPrintValidate: OnValidate                                  ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_AMMPrintValidate(var Text: string; var Continue: Boolean);
begin

inherited;

if not (AQY_ArtikelStamm.State in [dsEdit, dsInsert]) then
   Exit;

if ((Text <> 'A') and (Text <> 'B') and (Text <> 'I') and (Text <> 'L')) then
   Text := 'N';
Continue := true;

end; //** procedure EDT_AMMPrintValidate


(******************************************************************************)
(***      MNI_Translate: OnClick                                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_TranslateClick(Sender: TObject);
var
   FPflegeDictionaryParams : TPflegeDictionaryParams;

begin

inherited;

with FPflegeDictionaryParams do
     begin
          if PUM_AMM.PopupComponent = EDT_AMM_InhaltFrei4 then
             AString := EDT_AMM_InhaltFrei4.Text
          else
             AString := EDT_AMM_InhaltFrei5.Text;
          if IsSpace(AString) then
             Exit;
          ASprache := 4; //** Default Spanisch
          AForm := self;
     end; //** with FPflegeDictionaryParams do

Call (dnCommon, 'editdictionary', @FPflegeDictionaryParams);

end; //** procedure MNI_TranslateClick


(******************************************************************************)
(***             MNI_TexteUebersetzenDeepL: OnClick                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_TexteUebersetzenDeepLClick(Sender: TObject);
var
   s: TList<string>;
   ADeeplFensterParams :  TDeeplFensterParams;
   ASaveState : TDataSetState;
begin

inherited;
try
   s := TList<string>.Create;
   s.Add(EDT_BEZ_1.Text);
   s.Add(EDT_BEZ_2.Text);
   s.Add(EDT_BEZ_3.Text);
   s.Add(EDT_BEZ_4.Text);
   s.Add(EDT_BEZ_5.Text);
   s.Add(EDT_BEZ_6.Text);
   s.Add(EDT_BEZ_7.Text);
   s.Add(EDT_BEZ_8.Text);

   ADeeplFensterParams.AOwner    := self;
   ADeeplFensterParams.ATexte    := s;
   ADeeplFensterParams.AFunction := dlfArtikelTexte;
   ADeeplFensterParams.AArtNr    := CurrArtNr;

   ASaveState := DTS_ArtikelStamm.State;
   if ASaveState in [dsEdit, dsInsert] then
      begin
           Erfassen := false;
           Aendern  := false;
           if BTN_AllgNeuKopieren.Down then
              BTN_AllgNeuKopieren.Down := false;
           BTN_DBNavPostClick(BTN_DBNavPost);
      end; //** if ASaveState in [dsEdit, dsInsert]

   StartDeepl(ADeeplFensterParams);

   BTN_NavRefreshClick(BTN_NavRefresh);
   if ASaveState in [dsEdit, dsInsert] then
      begin
           BTN_AllgEditDauerEdit.Down := true;
           BTN_AllgEditDauerEditClick(BTN_AllgEditDauerEdit);
      end; //** if ASaveState in [dsEdit, dsInsert]

finally
   if Assigned(s) then
      FreeAndNil(s);
end; //** try..finally

end; //** procedure MNI_TexteUebersetzenDeepLClick


(******************************************************************************)
(***      BTN_LoadArtikelArchiv: OnClick                                    ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadArtikelArchivClick(Sender: TObject);
var
   FStammArchivSucheParams : TStammArchivSucheParams;
   iFunction,
   i : integer;
   s, s1 : string;
   j : integer;

begin

inherited;
s := '';
s1 := '';
iFunction := 0;

if Assigned(Self.ActiveControl) then
   if Self.ActiveControl = EDT_KB then
      s1 := 'KB'
   else
      if Self.ActiveControl = EDT_ZN then
         s1 := 'ZN'
      else
         if Self.ActiveControl = EDT_BN then
            s1 := 'BN'
         else
            if Self.ActiveControl = EDT_Bez_1 then
               s1 := 'BEZ_1'
            else
               try
                  if shbHasProp('DataField', Self.ActiveControl) then
                     if Self.ActiveControl is TSHBDBNumEdit then
                        s := TSHBDBNumEdit(Self.ActiveControl).DataField
                     else
                        if Self.ActiveControl is TSHBDBIntEdit then
                           s := TSHBDBIntEdit(Self.ActiveControl).DataField
                        else
                           if Self.ActiveControl is TSHBDBDateEdit then
                              s := TSHBDBDateEdit(Self.ActiveControl).DataField
                           else
                              if Self.ActiveControl is TSHBDBDateEdit then
                                 s := TSHBDBDateEdit(Self.ActiveControl).DataField
                              else
                                 if Self.ActiveControl is TDBCheckBox then
                                    s := TDBCheckBox(Self.ActiveControl).DataField
                                 else
                                    s := TSHBDBEdit(Self.ActiveControl).DataField;

                  if Self.ActiveControl = EDT_PreisBem then
                     s1 := EDT_PreisBem.DataField
                  else
                     if ((Self.ActiveControl = EDT_VK_1) or
                         (Self.ActiveControl = EDT_VK_2) or
                         (Self.ActiveControl = EDT_VK_3) or
                         (Self.ActiveControl = EDT_VK_4) or
                         (Self.ActiveControl = EDT_VK_5) or
                         (Self.ActiveControl = EDT_VK_6) or
                         (Self.ActiveControl = EDT_VK_7) or
                         (Self.ActiveControl = EDT_VK_8) or
                         (Self.ActiveControl = EDT_VK_9) or
                         (Self.ActiveControl = EDT_VK_10)) then
                        begin
                             for i := 0 to AQY_Preise.FieldCount -1 do
                                 if s = AQY_Preise.Fields[i].FieldName then
                                    begin
                                         s1 := s;
                                         iFunction := 1;
                                         Break;
                                    end; //** for i := 0 to AQY_Preise.FieldCount -1 do
                        end
                     else
                        if ((Self.ActiveControl = EDT_LiefKuNu) or
                            (Self.ActiveControl = EDT_LiefBestellNr) or
                            (Self.ActiveControl = EDT_LiefWS) or
                            (Self.ActiveControl = EDT_LiefRabatt) or
                            (Self.ActiveControl = EDT_LiefWBZ) or
                            (Self.ActiveControl = EDT_LiefPE) or
                            (Self.ActiveControl = EDT_LiefRaster) or
                            (Self.ActiveControl = EDT_LiefStaffelBP) or
                            (Self.ActiveControl = EDT_LiefZoll) or
                            (Self.ActiveControl = EDT_LiefZOLL_BP) or
                            (Self.ActiveControl = EDT_LiefFracht) or
                            (Self.ActiveControl = EDT_LiefFracht_BP) or
                            (Self.ActiveControl = EDT_LiefBemerkung) or
                            (Self.ActiveControl = EDT_LiefMiAb) or
                            (Self.ActiveControl = EDT_LiefPE) or
                            (Self.ActiveControl = EDT_LiefRaster) or
                            (Self.ActiveControl = EDT_LiefStaffelBP) or
                            (Self.ActiveControl = EDT_LiefZoll) or
                            (Self.ActiveControl = EDT_LiefEK_1) or
                            (Self.ActiveControl = EDT_LiefEK_2) or
                            (Self.ActiveControl = EDT_LiefEK_3) or
                            (Self.ActiveControl = EDT_LiefEK_4) or
                            (Self.ActiveControl = EDT_LiefEK_5) or
                            (Self.ActiveControl = EDT_LiefEK_6) or
                            (Self.ActiveControl = EDT_LiefEK_7) or
                            (Self.ActiveControl = EDT_LiefEK_8) or
                            (Self.ActiveControl = EDT_LiefEK_9) or
                            (Self.ActiveControl = EDT_LiefEK_10) or
                            (Self.ActiveControl = EDT_ZuschlagArt1) or
                            (Self.ActiveControl = EDT_Zuschlag1Proz) or
                            (Self.ActiveControl = EDT_ZuschlagArt2) or
                            (Self.ActiveControl = EDT_Zuschlag2Proz) or
                            (Self.ActiveControl = EDT_ZuschlagArt3) or
                            (Self.ActiveControl = EDT_Zuschlag3Proz) or
                            (Self.ActiveControl = EDT_ZuschlagRabattiert)) then
                           begin
                                for i := 0 to AQY_Lieferant.FieldCount -1 do
                                    if s = AQY_Lieferant.Fields[i].FieldName then
                                       begin
                                            s1 := s;
                                            iFunction := 2;
                                            Break;
                                       end; //** for i := 0 to AQY_Lieferant.FieldCount -1 do
                           end //** if Self.ActiveControl Lieferanten Edits
                     else
                        if ((Self.ActiveControl = EDT_DVKalk_EK_Einmalkosten) or
                            (Self.ActiveControl = EDT_DVKalk_EK_Fertigung) or
                            (Self.ActiveControl = EDT_DVKalk_EK_Fremdarbeit_Fix) or
                            (Self.ActiveControl = EDT_DVKalk_EK_Fremdarbeit_Mindest) or
                            (Self.ActiveControl = EDT_DVKalk_EK_FremdarbeitVar) or
                            (Self.ActiveControl = EDT_DVKalk_EK_Material) or
                            (Self.ActiveControl = EDT_DVKalk_EK_Ruestkosten) or
                            (Self.ActiveControl = EDT_DVKalk_EK_Werkzeugkosten) or
                            (Self.ActiveControl = EDT_DVKalk_EK_Zuschlag) or
                            (Self.ActiveControl = EDT_DVKalk_KalkDatum) or
                            (Self.ActiveControl = EDT_DVKalk_KalkUser) or
                            (Self.ActiveControl = EDT_DVKalk_Menge) or
                            (Self.ActiveControl = EDT_DVKalk_KalkUser) or
                            (Self.ActiveControl = EDT_DVKalk_VK_Einmalkosten) or
                            (Self.ActiveControl = EDT_DVKalk_VK_Fertigung) or
                            (Self.ActiveControl = EDT_DVKalk_VK_Fremdarbeit_Fix) or
                            (Self.ActiveControl = EDT_DVKalk_VK_Fremdarbeit_Mindest) or
                            (Self.ActiveControl = EDT_DVKalk_VK_Fremdarbeit_Var) or
                            (Self.ActiveControl = EDT_DVKalk_VK_Material) or
                            (Self.ActiveControl = EDT_DVKalk_VK_Ruestkosten) or
                            (Self.ActiveControl = EDT_DVKalk_VK_Werkzeugkosten) or
                            (Self.ActiveControl = EDT_DVKalk_VK_Zuschlag) or
                            (Self.ActiveControl = EDT_DVKalkNummer)) then
                           begin
                                for i := 0 to AQY_DVKalk.FieldCount -1 do
                                    if s = AQY_DVKalk.Fields[i].FieldName then
                                       begin
                                            s1 := s;
                                            iFunction := 3;
                                            Break;
                                       end; //** for i := 0 to AQY_DVKalk.FieldCount -1 do
                           end
                     else
                        if ((Self.ActiveControl = EDT_FBez_1) or
                            (Self.ActiveControl = EDT_FBez_2) or
                            (Self.ActiveControl = EDT_FBez_3) or
                            (Self.ActiveControl = EDT_FBez_4) or
                            (Self.ActiveControl = EDT_FBez_5) or
                            (Self.ActiveControl = EDT_FBez_6) or
                            (Self.ActiveControl = EDT_FBez_7) or
                            (Self.ActiveControl = EDT_FBez_8)) then
                           begin
                                for i := 0 to AQY_FremdTexte.FieldCount -1 do
                                    if s = AQY_FremdTexte.Fields[i].FieldName then
                                       begin
                                            s1 := s;
                                            iFunction := 4;
                                            Break;
                                       end; //** for i := 0 to AQY_FremdTexte.FieldCount -1 do
                           end
                     else
                        if (Self.ActiveControl is TcxGridSite) then
                           begin
                                if (Pos('_Sonderpreise', TcxGridSite(Self.ActiveControl).GridView.Name) > 0) then
                                   begin
                                        s1 := TcxGridDBColumn(GRD_SonderpreiseDBTableView1.Controller.FocusedColumn).DataBinding.FieldName;
                                        if (s1 = GRD_SonderpreiseDBTableView1KUNU.DataBinding.FieldName) or
                                           (s1 = GRD_SonderpreiseDBTableView1NAME.DataBinding.FieldName) then //** Spalte "NAME" nicht im Archiv
                                           s1 := '';
                                        iFunction := 5;
                                   end; //** if (Pos('_Sonderpreise', TcxGridSite(Self.ActiveControl).GridView.Name) > 0)
                           end
                     else
                        for i := 0 to AQY_ArtikelStamm.FieldCount -1 do
                            if s = AQY_ArtikelStamm.Fields[i].FieldName then
                               begin
                                    s1 := s;
                                    Break;
                               end; //** for i := 0 to AQY_ArtikelStamm.FieldCount -1 do

               except
                  s1 := '';
               end; //**

if iFunction = 1 then
   begin
        MNI_ArtikelPreisArchivClick(MNI_ArtikelPreisArchiv);
        Exit;
   end; //** if iFunction = 1

with FStammArchivSucheParams do
     begin
          ACallingProg := 1;
          AFunction := iFunction;
          APreisArt := '';
          APreisWs := 0;
          AKuNu := 0;
          AForm := Self;
          ASuchSpalte := s1;
          AArtNr := CurrArtNr;
          APreisArt := '';
          APreisWs := 0;
          ANummer := 0;

          case iFunction of
             2: ANummer := AQY_LieferantNUMMER.AsInteger;
             3: ANummer := AQY_DVKalkNUMMER.AsInteger;
             4: ANummer := AQY_FremdTexteSPRACHE.AsInteger;
             5: AKuNu := AQY_SoPreiseKUNU.AsInteger;
          end;

     end; //** with FStammArchivSucheParams do

ShowDataArchive(@FStammArchivSucheParams);

end; //** procedure BTN_LoadArtikelArchivClick


(******************************************************************************)
(***      MNI_ArtikelArchiv: OnClick                                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_ArtikelArchivClick(Sender: TObject);
var
   FStammArchivSucheParams : TStammArchivSucheParams;
begin

inherited;
with FStammArchivSucheParams do
     begin
          ACallingProg := 1;
          AFunction := 0;
          APreisArt := '';
          APreisWs := 0;
          AKuNu := 0;
          AForm := Self;
          ASuchSpalte := '';
          AArtNr := CurrArtNr;
          APreisArt := '';
          APreisWs := 0;
          ANummer := 0;
     end; //** with FStammArchivSucheParams do

ShowDataArchive(@FStammArchivSucheParams);

end; //** procedure MNI_ArtikelArchivClick


(******************************************************************************)
(***      MNI_ArtikelPreisArchiv: OnClick                                   ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_ArtikelPreisArchivClick(Sender: TObject);
var
   FStammArchivSucheParams : TStammArchivSucheParams;
   mArt : Char;
   s : string;

begin

inherited;

s := '';

if ((Self.ActiveControl = EDT_VK_1) or
    (Self.ActiveControl = EDT_VK_2) or
    (Self.ActiveControl = EDT_VK_3) or
    (Self.ActiveControl = EDT_VK_4) or
    (Self.ActiveControl = EDT_VK_5) or
    (Self.ActiveControl = EDT_VK_6) or
    (Self.ActiveControl = EDT_VK_7) or
    (Self.ActiveControl = EDT_VK_8) or
    (Self.ActiveControl = EDT_VK_9) or
    (Self.ActiveControl = EDT_VK_10)) then
   begin
        s := Self.ActiveControl.Name;
        if Length(s) > 7 then
           s := Trim(Copy(s, 5, Length(s)-4));
   end;

if RBT_PreiseNetto.Checked then
   if RBT_PreiseAktuell.Checked then
      mArt := 'A'
   else
      mArt := 'N'
else
   if RBT_PreiseAktuell.Checked then
      mArt := 'a'
   else
      mArt := 'n';

with FStammArchivSucheParams do
     begin
          ACallingProg := 1;
          AFunction := 1;
          AKuNu := 0;
          AForm := Self;
          ASuchSpalte := s;
          AArtNr := CurrArtNr;
          APreisArt := mArt;
          APreisWs := EDT_PreiseWS.AsInteger;
          ANummer := 0;
     end; //** with FStammArchivSucheParams do

ShowDataArchive(@FStammArchivSucheParams);

end; //** procedure MNI_ArtikelPreisArchivClick


(******************************************************************************)
(***      MNI_ArtikelTab: OnClick                                           ***)
(******************************************************************************)


procedure TFRM_DobosLV.MNI_ArtikelTabClick(Sender: TObject);
var
   i : Integer ;
   ArtNr            : string;
   FSuchLVErwParams : TSuchLVErwParams;
   FStream          : TMemoryStream;
   WhereArtNrString,
   WhereString   : string;
   ATabellenFunc : integer;
   Station,
   Anz,
   fNummer,
   n,
   fRes          : integer;
   dummy1,
   dummy2        : boolean;
   s             : string;
   AValues       : array [0..0] of Variant;
   AOrderStr     : string;
begin

inherited;
with GetLinkagePointer^ do
     if ((Priv_Nur_Sichten = ja) or
         (not (PRIV_SCHNELL_AENDERN in [ja, 'L']))) then
        begin
             NoPrivilege;
             Exit;
        end; //** if (GetLinkagePointer.Priv_Nur_Sichten = ja)

WhereArtNrString := '';
WhereString := '';
AOrderStr := '';

ATabellenFunc := -1;

with DLG_SelektionVorhanden do
        begin
             DLG_SelektionVorhanden.Caption := rs_TabBearbeitungCaption;
             DLG_SelektionVorhanden.Text    := rs_TabSelektionModus;
             DLG_SelektionVorhanden.Title   := rs_TabSelektionModusFrage;
             DLG_SelektionVorhanden.MainIcon := tdiInformation;
             Buttons[0].Caption := rs_TabSelektion;
             Buttons[1].Caption := rs_TabArtikelSet;
             DLG_SelektionVorhanden.Execute;
        end; //** with DLG_SelektionVorhanden do

if DLG_SelektionVorhanden.ModalResult = mrYes then
   ATabellenFunc := 0;
if DLG_SelektionVorhanden.ModalResult = mrNo then
   ATabellenFunc := 1;
if DLG_SelektionVorhanden.ModalResult = mrCancel then
   Exit;

case ATabellenFunc of
     0 : begin
              FStream := TMemoryStream.Create;
              try
                 try
                    FStream.Position := 0;
                    ArtNr := '';
                    with FSuchLVErwParams do
                         begin
                              ASortOrder := asArtNr;
                              AKeyList := nil;
                              ACallFunction := cfSuchLVErwNurAuswahl;
                              ASelectedArtNr := '';
                              AWhereArtNrString := '';
                              AWhereString := '';
                              AStream := FStream;
                         end; //** with FSuchLVErwParams do

                    FStream.Position := 0;
                    i := Call (dnDobosSuchen, 'suchenlverw', @FSuchLVErwParams);
                    if i <> 0 then
                       begin
                            FStream.Position := 0;
                            with FSuchLVErwParams do
                                 begin
                                      SortOrder := ASortOrder;
                                      WhereArtNrString := AWhereArtNrString;
                                      WhereString := AWhereString;
                                      
                                      case SortOrder of
                                           asArtNr:        AOrderStr := ' ORDER BY ARTNR ASC ';
                                           asKB:           AOrderStr := ' ORDER BY KB ASC ';
                                           asBN:           AOrderStr := ' ORDER BY BN ASC ';
                                           asZN:           AOrderStr := ' ORDER BY ZN ASC ';
                                           asBez_1:        AOrderStr := ' ORDER BY BEZ_1 ASC ';
                                           asSachmerkmal:  AOrderStr := ' ORDER BY SACHMERKMAL ASC ';
                                           desArtNr:       AOrderStr := ' ORDER BY ARTNR DESC ';
                                           desKB:          AOrderStr := ' ORDER BY KB DESC ';
                                           desBN:          AOrderStr := ' ORDER BY BN DESC ';
                                           desZN:          AOrderStr := ' ORDER BY ZN DESC ';
                                           desBez_1:       AOrderStr := ' ORDER BY BEZ_1 DESC ';
                                           desSachmerkmal: AOrderStr := ' ORDER BY SACHMERKMAL DESC ';
                                      end; //** case SortOrder of                                       

                                      if (not (GetLinkagePointer^.IsProfi)) then
                                         if (MessageDlg(Format(rs_LVnRecordsSelected,[i]),
                                              mtConfirmation,[mbYes,mbNo],0)) <> mrYes then
                                              Exit;
                                 end; //** with FSuchLVErwParams do
                       end //** if i <> 0
                     else
                        Exit;
                 except
                    raise EAbort.Create('');
                 end; //** try..except

              finally
                 if Assigned(FStream) then
                    FStream.Free;

              end; //** try..finally

         end; //** Suche

     1 : begin
              Station := GetLinkagePointer^.StationsNummer;
              n := GetVarRDGDlg (GetStdRes(frs_STD_SelektionssetLaden),
                     [GetStdRes(frs_STD_privatesSet), GetStdRes(frs_STD_OeffentlichesSet)],
                     0,
                     false,
                     dummy1,
                     dummy2);

              if n < 0 then
                 Exit;

              if n = 1 then
                 Station := 0;

              if Station = 0 then
                 s := GetStdRes(frs_STD_SetauswahlOeffentlich)
              else
                 s := Format(GetStdRes(frs_STD_SetauswahlPrivatStationx),[Station]);

              if n < 2 then
                 begin
                      //** Dialogauswahl
                      try
                         fRes := GetListItem(lkLSelSet, Sender, Self, Station, 0, s);
                         //** Close, abort?
                         if ((VarIsNull(fRes))) then
                            Exit;
                         fNummer := FRes;
                      except
                      end;
                 end;

              Anz := -1;
              if ReadAnyFields (GetDOBOSADB,
                                'ARTIKEL_SELEKTION',
                                'WHERE STATION = '+IntToStr(Station)+' AND NUMMER = '+IntToStr(fNummer)+' ',
                                ['count(*)'],
                                 AValues) then
                 try
                    Anz := AValues[0];
                 except
                 end; //** try..except

              if Anz = 0 then
                 begin
                      ShowMessage(rs_TabNoEntriesFound);
                      Exit;
                 end; //**

              if (MessageDlg(Format(rs_TabnRecordsSelected,[Anz]),
                  mtConfirmation,[mbYes,mbNo],0)) <> mrYes then
                  Exit;

              WhereArtNrString := ' EXISTS(SELECT m.ARTNR FROM ARTIKEL_SELEKTION m WHERE m.ARTNR = s.ARTNR AND '
                                 +'m.STATION = '+IntToStr(Station)+' AND m.NUMMER = '+IntToStr(fNummer)+' )';
              WhereString      := '';

         end; //** Set laden

end; //** case ATabellenFunc of

ArtikelTabellarisch(Self, WhereArtNrString, WhereString, AOrderStr);

end; //** procedure MNI_ArtikelTabClick


(******************************************************************************)
(***                EDT_ViewerPfad: OnLookupClick                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_ViewerPfadLookupClick(Sender: TObject);
var
   FName,
   ResultName : string;
   TempName : string;
   res      : integer;
   Code     : Cardinal;

begin

inherited;
FName := Trim(EDT_ViewerPfad.AsString);
if (not ((Erfassen) or (Aendern) or DauerAendern)) then
   begin
        //** neu 20.04.2021 *DB
        //** Pfad darf auch ein Verzeichnis sein, dann Explorer dort öffnen
        {Code := GetFileAttributes(PChar(FName));
        if (Code = FILE_ATTRIBUTE_DIRECTORY) then
           begin
                TempName := 'Explorer.exe';
                res := ShellExecute(Self.Handle, nil,PChar(TempName), PChar(' /e,'+'"'+FName+'"'), nil, SW_SHOW);
                Exit;
           end; //** if (Code = FILE_ATTRIBUTE_DIRECTORY) then }
        //** Geändert, weil WinApi Desktop nicht als Verzeichnis erkennt (angeblich auch kein Netzlaufwerk
        //** konnte ich aber nicht nachvollziehen *OB 12.05.2023
        try
           if TFileAttribute.faDirectory in TPath{|TFile|TDirectory}.GetAttributes(FName) then
              begin
                   // path is a folder ...
                   TempName := 'Explorer.exe';
                   res := ShellExecute(Self.Handle, nil,PChar(TempName), PChar(' /e,'+'"'+FName+'"'), nil, SW_SHOW);
                   Exit;
              end //** if TFileAttribute.faDirectory in
           else
              begin
                   // path is a file ...
                   if (IsSpace(FName) or not (FileExists(Trim(EDT_ViewerPfad.AsString)))) then
                       begin
                            Showmessage(Format(rs_FileNotFound,[FName]));
                            Exit;
                       end; //** if (IsSpace(FName)) ... then

                    TempName := FName;
                    res := ShellExecute(Self.Handle, nil, PChar(TempName), nil, nil, SW_SHOW);
              end; //** Else-Zweig also Datei
         except
           on E:Exception do
         	    begin
                   MessageDlg(E.Message,mtError,[mbOK],0);
                   Exit;
              end;
         end; //** try..except
   end //** if (not ((Erfassen) or (Aendern) or DauerAendern))
else
   with DLGO_FileOpenDialog do
        begin
             ResultName := '';
             FileName := FName;
             if Execute then
                begin
                     ResultName := FileName;
                     if FileExists(ResultName) then
                        EDT_ViewerPfad.AsString := ResultName;
                end; //** if Execute then
        end; //** with DLGO_FileOpenDialog do

end; //** procedure EDT_ViewerPfadLookupClick


(******************************************************************************)
(***                    MNI_NeueAufgabe: OnClick                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_NeueAufgabeClick(Sender: TObject);
var
   FNeueAufgabenParams : TNeueAufgabeParams;
   IDC : integer;

begin

inherited;
with FNeueAufgabenParams do
       try
          AIcon           := -1;
          AErledigtBis    := shbStrToDate(NullDatum);//+ shbStrToTime('12:00:00');
          AWVDatum        := shbStrToDate(NullDatum);// + shbStrToTime('00:00:00');
          APrioritaet     := 1; //** normal
          AVorgang        := 0;
          ABetreff        := '';
          AInhalt         := '';
          ASBNr           := GetLinkagePointer^.IsSBNr;
          ADelegieren     := false;
          AKommentar      := '';
          ACallValue      := 1;   //** 1 = Aufgabe erstellen / 2 = Verknuepfung ändern
          AAufgabeIDCol   := -1;   //** IDCol
          AUrsprungArt    := 'AR';
          AUrsprung       := CurrArtNr;
          AForm           := self;
          Call (dnCommon, 'starteanlageneueaufgabe', @FNeueAufgabenParams);
          IDC := FNeueAufgabenParams.AAufgabeIDCol;

          if IDC >= 0 then
             ShowNotification(naAufgabeAngelegt);

       except
          on E:Exception do
             Showmessage(E.Message)
       end; //** try..except

end; //** procedure MNI_NeueAufgabeClick


(******************************************************************************)
(***      MNI_InsertBPool: OnClick                                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_InsertBPoolClick(Sender: TObject);
var
   FBearbeitenBestellpoolParams : TBearbeitenBestellpoolParams;

begin

inherited;

with FBearbeitenBestellpoolParams do
     begin
          FBearbeitenBestellpoolParams.AArtNr := CurrArtNr;
          FBearbeitenBestellpoolParams.AKeyList := nil;
          FBearbeitenBestellpoolParams.AMassenanfrage := false;
          FBearbeitenBestellpoolParams.AForm := self;
          Call (dnDobosCommon, 'bearbeitenbestellpool', @FBearbeitenBestellpoolParams);
     end; //** with FBearbeitenBestellpoolParams do

end; //** procedure MNI_InsertBPoolClick


(******************************************************************************)
(***      MNI_MassenAnfrageInsertBPool_ OnClick                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_MassenAnfrageInsertBPoolClick(Sender: TObject);
var
   FBearbeitenBestellpoolParams : TBearbeitenBestellpoolParams;

begin

inherited;

with FBearbeitenBestellpoolParams do
     begin
          FBearbeitenBestellpoolParams.AArtNr := CurrArtNr;
          FBearbeitenBestellpoolParams.AKeyList := KeyList;
          FBearbeitenBestellpoolParams.AMassenanfrage := true;
          FBearbeitenBestellpoolParams.AForm := self;
          Call (dnDobosCommon, 'bearbeitenbestellpool', @FBearbeitenBestellpoolParams);
     end; //** with FBearbeitenBestellpoolParams do

end; //** procedure MNI_MassenAnfrageInsertBPoolClick


(******************************************************************************)
(***      MNI_Packmittel: OnClick                                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_PackmittelClick(Sender: TObject);
begin

inherited;

BTN_PackmittelverwaltungClick(self);

end; //** procedure MNI_PackmittelClick


(******************************************************************************)
(***      MNI_PackmittelKunde: OnClick                                      ***)
(******************************************************************************)

procedure TFRM_dobosLV.MNI_PackmittelKundeClick(Sender: TObject);
var
   FPflegenPMParams : TPflegenPMParams;

begin
inherited;

if ModalCallActive then
   Exit;

with FPflegenPMParams do
     begin
          AKuNu := 0;
          AKB := AQY_ArtikelStammKB.AsString;
          AArtNr := TrimRight(AQY_ArtikelStammARTNR.AsString);
          APMNr := '';
          AFunction := 1;
          AForm := Self;
     end; //** with FPflegenPMParams do

try
   ModalCallActive := true;
   Call (dnDobosCommon, 'sichtenpmkunde', @FPflegenPMParams);
finally
   ModalCallActive := false;

end; //** try..finally

end; //** procedure MNI_PackmittelKundeClick


(******************************************************************************)
(***      MNI_NeuerKontrakt: OnClick                                        ***)
(******************************************************************************)

procedure TFRM_dobosLV.MNI_NeuerKontraktClick(Sender: TObject);
var
   AKuNu : integer;

begin
inherited;
with GetLinkagePointer^ do
     begin
          if ((not ((PRIV_KLB = 'K') or (PRIV_KLB = 'B'))) or
              (PRIV_AU <> Ja)) then
             begin
                  NoPrivilege;
                  Exit;
             end; //** if ((not ((PRIV_KLB = 'K') or (PRIV_KLB = 'B'))) or
     end; //** with GetLinkagePointer^ do

AKuNu := 0;
if ((GetLinkagePointer^.LinkLastKuNu >= FirstDebitor) and
    (GetLinkagePointer^.LinkLastKuNu <= LastDebitor)) then
   AKuNu := GetLinkagePointer^.LinkLastKuNu;

AKuNu := GetAKuNu(nil, 1, AKuNu);
if ((AKuNu < FirstDebitor) or (AKunu > LastDebitor)) then
   Exit;

with GetLinkagePointer^ do
     begin
          LinkLastKuNu := AKuNu;
          LinkInteger1 := -1;
          LinkInteger2 := 1; //** AU/BE
          LinkString128 := AQY_ArtikelStammARTNR.AsString;
          LoadDll(dnDobosVD, ctyNormal, 'L');
     end; //** with GetLinkagePointer^ do

end; //** procedure MNI_NeuerKontraktClick


(******************************************************************************)
(***      MNI_OpenZeichDaten: OnClick                                       ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_OpenZeichDatenClick(Sender: TObject);
var
   FName,
   TempName : string;
   res      : integer;
   Executable,
   ext      : string;

begin
inherited;

FName := Trim(EDT_ViewerPfad.AsString);
if (IsSpace(FName) or not (FileExists(Trim(EDT_ViewerPfad.AsString)))) then
   begin
        Showmessage(Format(rs_FileNotFound,[FName]));
        Exit;
   end; //** if (IsSpace(FName)) ... then

TempName := FName;
{
//** 11.0 neue eigene Routine da FindExecutable nicht zuverlässig funktioniert...
ext := ExtractFileExt(TempName);
Executable := '';
Executable := FindExecutableBIOS(ext);
if IsSpace(Executable) then
   begin
        Showmessage(Format(rs_NoDisplayModulesDefines,[FName, TempName]));
        Exit;
   end; //** if IsSpace(Executable)
}
res := ShellExecute(Self.Handle, nil, PChar(TempName), nil, nil, SW_SHOW);

end; //** procedure MNI_OpenZeichDatenClick


(******************************************************************************)
(***      SBT_KalkMaske: OnClick                                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_DVKalkMaskeClick(Sender: TObject);
var
   KalkSw              : boolean;
   FDAVOSKalk101Params : TDAVOSFaSxKalk101Params;
   mKalkKz             : string;
   AktKalkArtNr        : string;
   AktKalkMethode      : integer;
   AktMenge            : currency;
   mKalkKzVK           : string;
   mKalkVariante       : integer;

begin

inherited;
if not (GetLinkagePointer^.PRIV_DV_GRENZKOSTEN in ['J']) then
   begin
        NoPrivilege;
        Exit;
   end; //** if not (GetLinkagePointer^.PRIV_DV_GRENZKOSTEN in ['J']) then

mKalkKz := Trim(EDT_KalkKZ.Text);
shbExpandString(mKalkKz, 1, ' ', false);
if (not (mKalkKz[1] in ['0'..'9', 'O', 'P', 'G', 'H', 'L', 'D'])) then
   begin
        ShowMessage(rs_LV_FABW_KalkKZNichtGesetzt);
        Exit;
   end; //** on E:Exception do

mKalkKzVK := Trim(EDT_KalkKZ_VK.Text);
shbExpandString(mKalkKzVK, 1, ' ', false);
if (not (mKalkKzVK[1] in ['X', 'E', 'V', 'S'])) then
   begin
        ShowMessage(rs_LV_FABW_KalkKZNichtGesetzt);
        Exit;
   end; //** on E:Exception do

case mKalkKzVK[1] of
'E' : mKalkvariante := 0;
'V' : mKalkvariante := 1;
'X' : mKalkvariante := 2;
'S' : mKalkVariante := 0;
else
   mKalkVariante := 0;
end; //** case mKalkKzVK of

AktMenge := EDT_DVKalk_Menge.AsCurrency;
if AktMenge < 1 then
   AktMenge := 1;

//** Save von EK-GK, VK-GK und VKs aus LV
with FDAVOSKalk101Params do
     try
        AQuelle := tkqEgal;
        if (Sender = SBT_DVKalkSchemaVgl)  then
            AInit  := 'X'       //** Übersichtsdarstellung aller Kalk-DAten
        else
            AInit  := 'A';      //** Kalkulationsmaske
        AArtNr := Trim(EDT_ARTNr.Text);
        AMenge := AktMenge;
        AKalkKZ := mKalkKz[1];
        AAutoSaveSW := false;

        //** AKalkArt bestimmt KalkAufschlagsgruppe und Quelle
        if (AKalkKZ in ['0'..'9', 'O', 'P', 'G']) then
            AKalkArt := EDT_DVKalkNummer.asInteger  //** Übernahme aus akt Anzeige
        else
           AKalkArt := -1;

        //** 11.1
        //** IB 14.07.2015
        //** hier muss die im Artikelstamm hinterlegte Kalkgruppe eingetragen werden
        //** DAVOS-Kalkgruppe (9..20) nur aktiv, wenn AKalkKZ in ['0'..'9', 'O', 'P', 'G']
        //** erst einmal 20 Kalk-AufschlagGruppen

        if EDT_AufschlagGruppe.AsInteger in [0..20] then
           AKalkGruppe := EDT_AufschlagGruppe.AsInteger //** DAVOS_KALKGruppe aus Artikelstamm holen
        else
           AKalkGruppe := 0;

        AWS := 0;
        AKurs := 1.00;
        AIsBrutto := false;
        AUstSatz := 0;
        if (Sender = SBT_DVKalkSchemaVgl) then
           ASilent := true
        else
           ASilent := false;

        AEKVKSW := mKalkvariante;
        //** Einmal und Werkzeugkosten immer true Mail von Maxi Berglmeir 10.05.2022 *OB
        AUseEinmalKosten := true;//false;
        AUseWerkzeugkosten := true;//false;
        AEK1_Einmalkosten := 0.00;          //** EinmalKosten
        AEK2_Fertigung := 0.00;             //** Fertigung
        AEK3_Material := 0.00;              //** Material
        AEK4_FremdFix := 0.00;              //** Fremdkosten fix
        AEK4_FremdVar := 0.00;              //** Fremdkosten var
        AEK4_FremdMindest := 0.00;          //** Fremdkosten Mindest
        AEK5_Ruestkosten := 0.00;           //** Rüstkosten
        AEK6_Zuschlag := 0.00;              //** Zuschlag
        AEK7_Werkzeugkosten := 0.00;        //** Werkzeugkosten
        AReturnEKPreis := 0.00;
        AReturnEPreis := 0.0;
        AReturnMaterial := 0.0;
        AReturnRuestKosten := 0.0;
        AReturnFremdarbeit := 0.0;
        AReturnStueckkosten := 0.0;
        AReturnZuschlag := 0.0;
        AReturnEinmalkosten := 0.0;
        AForm := Self;

        KalkSw := false;
        if ShowKalkData(@FDAVOSKalk101Params) then
           KalkSW := true;

        //** Wegen Bearbeitungsmodus Daten neu holen
        //** bei beiden Schaltflächen notwendig
        //** if (Sender = SBT_DVKalkSchemaVgl)  then
           with AQY_DVKalk do
                try
                   AktKalkArtNr := FieldByName('ARTNR').AsString;
                   AktKalkMethode := FieldByName('NUMMER').AsInteger;
                   Close;
                   Open; //** Einfaches ReOpen, kein UCChange machen!
                   Locate('ARTNR; NUMMER', VarArrayOf([AktKalkArtNr, AktKalkMethode]),[]);
                   UpdateDVKalkButtons;
                except
                   raise;
                end; //** try..except
     except
        raise;
     end; //** try..except

end; //** procedure SBT_KalkMaskeClick


(******************************************************************************)
(***  MNI_ChargeInsert: OnClick  - SM 2012                                  ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_ChargeInsertClick(Sender: TObject);
var
   i : integer;
   FEingabeChargenParams : TEingabeChargenParams;

begin
inherited;
ChargeInsert := false; //** 27.11.2013

with FEingabeChargenParams do
     begin
          AForm  := self;
          AFunction := 0;
          ACharge := '';
          AOrt := '';
          ALager := 0;
          AArtNr := TrimRight(AQY_ArtikelStammARTNR.AsString); //** 25.01.2017 SM vorher: '';
          ATitel := 0;   //** 11.03.2015 Eingabe des Chargenlagers
          if Call (dnCommon, 'eingabecharge', @FEingabeChargenParams) = 1 then
             begin
                  if Erfassen then
                     NeuEingabeAktiv := true;

                  with AQY_Lager do
                       try
                          if GRD_LagerContainer.CanFocus then
                             GRD_LagerContainer.SetFocus;                          
                          Last;
                          Insert;
                          SetLagerEditColors;
                          AQY_LagerARTNR.AsString := TrimRight(AQY_ArtikelStammARTNR.AsString);
                          AQY_LagerLAGER.AsInteger := ALager;
                          AQY_LagerORT.AsString := AOrt;
                       except
                          on E:Exception do
                             ShowMessage(E.Message);
                       end; //** try..except

                  UpdateLagerButtons;
                  ChargeInsert := true; //** 27.11.2013

             end; //** if Call (dnCommon, 'eingabecharge', @FEingabeChargenParams) = 1 then

     end; //** with FEingabeChargenParams do

end; //** procedure MNI_ChargeInsertClick


(******************************************************************************)
(***  MNI_SichtenChargen: OnClick  - SM 2012                                ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_ChargerecherchierenClick(Sender: TObject);
var
   FSichtenAKLagerParams : TSichtenAKLagerParams;
   i : integer;

begin

inherited;
if ModalCallActive then
   Exit;

with FSichtenAKLagerParams do
     begin
          AArtNr := ''; //AQY_ArtikelStammARTNR.AsString;
          ABez_1 := ''; //AQY_ArtikelStammBEZ_1.AsString;
          AKuNuVon := 0;
          AKuNuBis := LastKreditor;
          //** 24.02.10:
          //** when (PRIV_KLB <> 'B') dann würde ich hier generell
          //** eine Einschränkung der KD-Von-BIS machen
          with GetlinkagePointer^ do
               if (Serial = KSerial_AllColor) and (PRIV_KLB = 'K') then
                   AKuNuBis := LastDebitor;
          AMethode := 0;
          APos := 0;
          AForm := Self;
     end; //** with FSichtenAKParams do

try
   ModalCallActive := true;
   i := Call (dnDobosCommon, 'sichtenchargen', @FSichtenAKLagerParams);
finally
   ModalCallActive := false;
end; //** try..finally


end; //** procedure MNI_SichtenChargenClick


(******************************************************************************)
(***   UpdatePackmittel                                                     ***)
(******************************************************************************)

function TFRM_DobosLV.UpdatePackmittel (const APMNr : string; const AArtNr : string) : boolean;
begin

result := true;

if IsSpace(APMNr) then
   begin
        result := false;
        Exit;
   end; //** if IsSpace(APMNr) then

with AQY_Divers do
     try
        if Active then
           Close;
        Connection := GetDobosADB;
        SQL.Clear;

        SQL.Add('IF EXISTS (SELECT * FROM PACKMITTEL WHERE PMNR = '''
              + SQLTextString(Trim(APMNr)) + ''' AND ARTNR = '''') '
              + 'UPDATE PACKMITTEL SET ARTNR = ''' + SQLTextString(Trim(AArtNr)) + ''' '
              + 'WHERE PMNR = ''' +SQLTextString(Trim(APMNr)) + ''' ');

        UCExecSQL(AQY_Divers);

     except
        on E:Exception do
           begin
                ShowMessage(Format(rs_LV_FehlerBeimUpdate,[APMNr, APMNr, AArtNr]));
                result := false;
           end; //** //** on E:Exception do
     end; //** try..except

end; //** function UpdateArtikel


(******************************************************************************)
(***      DTS_DVKalkData: OnChange                                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.DTS_DVKalkDataChange(Sender: TObject; Field: TField);
begin

inherited;
UpdateDVKalkButtons;

end; //** procedure DTS_DVKalkDataChange

(******************************************************************************)
(***      DTS_DVKalkState: OnChange                                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.DTS_DVKalkStateChange(Sender: TObject);
begin

inherited;
UpdateDVKalkButtons;

end; //** procedure DTS_DVKalkStateChange


(******************************************************************************)
(***      CheckAndSetNavigatorList                                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.CheckAndSetNavigatorList;
var
   x : TLagerMemKey;
   i : integer;
   sl : TStringList;
   mlFlag : TMassenLoad;
   s      : string;

begin

//** Hier dann neuer MainIniValue für Auftrag mit Selektion laden
if ((MasterIniValue = 'Q') and (GetLinkagePointer^.LinkPointer2 <> nil)) then
   try
      //** Navi füllen
      SL := TStringList.Create;
      SL.Clear;
      SL.Text := ClipBoard.AsText;

      try
         ClipBoard.Open;
         ClipBoard.Clear;
      finally
         Clipboard.Close;
      end; //** try..finally

      //** Pointer zeigt auf Massenload-Typ (Typecast erforderlich)
      mlFlag := TMassenLoad(Integer(GetLinkagePointer^.LinkPointer2));
      GetLinkagePointer^.LinkPointer2 := nil;

      if (not (mlFlag in [mlLager])) then
         Exit;

      //** ab hier nur gültige ML-Flags
      try
         with SL do
              try
                 if Count < 3 then
                    Exit;
                 //** Do not localize
                 if ((Strings[0] <> 'START_LV') or
                     (Strings[Count -1] <> 'END_LV')) then
                     Exit;

                 for i := 1 to Count -2 do
                     begin
                          FillChar(x, SizeOf(x), #0);
                          x.MArtNr := Copy(Strings[i],1,LengthOfArtNr);
                          x.MVariante := 0;
                          KeyList.Add(@x, SizeOf(x));
                     end; //** for i := 1 to Count -2 do
              except
                 on E:Exception do
                    ShowMessage(E.Message);
              end; //** try..except

         BGP_SelNavBarGruppe.Visible := ivAlways;
         UpdateNavi;
         UpDateButtons;
         BTN_NavFirstClick(BTN_NavFirst);

       except
          on E:Exception do
             Showmessage(E.Message)
       end; //** try..except

    finally
       FreeAndNil(SL);
    end; //** try..finally

end; //** procedure CheckAndSetNavigatorList


(******************************************************************************)
(***      EDT_AlternateArtNr3: OnLookupClick                                ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_AlternateArtNr3LookupClick(Sender: TObject);
var
   FSuchLVParams : TSuchLVParams;
   ANr           : string;
   b             : boolean;

begin
inherited;

with FSuchLVParams  do
     begin
          AAskMode := false;
          AArtNr := '';
          ASuchText := EDT_AlternateArtNr3.Text;
          AOrderBy  := 0;
          ASuchFeld := 0;
          AComponent:= EDT_AlternateArtNr3;
     end; //** with FSuchLVParams do

if Call (dnDobosSuchen, 'suchenlv', @FSuchLVParams) = 1 then
   begin
        if not ((Erfassen) or (Aendern)) then
           Exit;

        if TrimRight(FSuchLVParams.AArtNr) = TrimRight(AQY_ArtikelStammARTNR.AsString) then
           AQY_ArtikelStammALTERNATE_ARTNR_3.AsString := ''
        else
           if AQY_ArtikelStammALTERNATE_ARTNR_3.AsString <> FSuchLVParams.AArtNr then
              AQY_ArtikelStammALTERNATE_ARTNR_3.AsString := FSuchLVParams.AArtNr;

        if AQY_ArtikelStamm.Active then
           EDT_AlternateArtNr3.Text := TrimRight(AQY_ArtikelStammALTERNATE_ARTNR_3.AsString)
        else
           EDT_AlternateArtNr3.Text := '';
   end; //** if Call (dnDobosSuchen, 'suchenlv', @FSuchLVParams) = 1 then

end; //** procedure EDT_AlternateArtNr3LookupClick


(******************************************************************************)
(***      EDT_AlternateArtNr3: OnExit                                       ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_AlternateArtNr3Exit(Sender: TObject);
var
   AValues : array [0..0] of Variant;

begin
inherited;

if not ((Erfassen) or (Aendern)) then
   Exit;

if TrimRight(AQY_ArtikelStammALTERNATE_ARTNR_3.AsString) = TrimRight(AQY_ArtikelStammARTNR.AsString) then
   begin
        AQY_ArtikelStammALTERNATE_ARTNR_3.AsString := '';
        EDT_AlternateArtNr3.Text := '';
   end  //** if TrimRight(AQY_ArtikelStammALTERNATE_ARTNR_3.AsString) = Tr.....
else
   begin
        //** Test, ob Artikel wirklich existiert
        if not IsSpace(EDT_AlternateArtNr3.Text) then
           if ReadAnyFields (GetDobosADB,
                            'ARTIKEL_STAMM',
                            'WHERE ARTNR = '''+Trim(EDT_AlternateArtNr3.Text)+''' ',
                            ['COUNT(*)'],
                            AValues) then
              try
                 if AValues[0] = 0 then
                    begin
                         ShowMessage (rs_LV_ArtNrExistiertnicht);
                         AQY_ArtikelStammALTERNATE_ARTNR_3.AsString := '';
                         EDT_AlternateArtNr3.Text := '';
                         if EDT_AlternateArtNr3.CanFocus then
                            EDT_AlternateArtNr3.SetFocus;

                    end; //** if AValues[0] = 0 then
              except
              end; //** try..except
   end; //** else: if TrimRight(AQY_ArtikelStammALTERNATE_ARTNR_3.AsString) = Tr.....

end; //** procedure EDT_AlternateArtNr3Exit


(******************************************************************************)
(*** MNI_ShowChargenlager: OnClick  - 27.11.2013                            ***)
(***                                                                        ***)
(*** nicht Chargenartikel : Anzeige aller Lager (wie bisher - ohne Filter)  ***)
(*** Chargenartikel : Anzeige aller Lager bei MNI_ShowChargenlager.Checked  ***)
(***                  (ohne Filter) sonst mit Filter                        ***)
(***                  Filter : Lager < 1000 (keine Chargenlager) und        ***)
(***                           Lager >= 1000 (Chargenlager) mit Beständen   ***)
(***                          (Bestand oder Bestellt oder Rückstand)        ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_ShowChargenlagerClick(Sender: TObject);
begin

inherited;

if not IsHasCharge then  //** nur zur Sicherheit
   Exit;

if Erfassen then
   begin
        AQY_Lager.Filtered := false;
        Exit;
   end; //** if Erfassen then

if Sender = MNI_ShowChargenlager then
   MNI_ShowChargenlager.Checked := (not MNI_ShowChargenlager.Checked);

if not DTS_Open then
   Exit;

with AQY_Lager do
     if Trim(AQY_ArtikelStammCHARGENPFLICHTIG.AsString) = 'J' then
        if MNI_ShowChargenlager.Checked then
           Filtered := false
        else
           Filtered := true
     else
        Filtered := false;

with AQY_Lager do    //** für neue Anzeige
     try
        if Active then
           Close;
        Parameters[0].Value := CurrArtNr;
        Open; //** Parametrisierte Query ohne Literale kein UCChange machen!
     except
         on E:Exception do
            ShowMessage(E.Message);
     end; //** try..except

//LockWindowUpdate(0); //** Auf alle Fälle zum Neuzeichnen freigeben

end; //** procedure MNI_ShowChargenlagerClick


(******************************************************************************)
(***      MNI_EnableBIOSSearch: OnClick                                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_EnableBIOSSearchClick(Sender: TObject);
var
   ARootKey   : HKEY;
   APath      : string;
   AKey       : string;
   AValue     : Integer;
   ASize      : integer;

begin

inherited;
MNI_EnableBIOSSearch.Checked := not (MNI_EnableBIOSSearch.Checked);

ARootKey := HKEY_CURRENT_USER;
APath := Registry_BiosPfad+'\QuickSearch';
//** Schlüssel ggfs anlegen
AKey := 'Lager';
AValue := 0;
if MNI_EnableBIOSSearch.Checked then
   AValue := 1;
ASize := SizeOf(AValue);
if not ReadWriteRegistry(wrInteger, true, ARootKey, APath, AKey, AValue, ASize) then
   ReadWriteRegistry(wrInteger, true, ARootKey, APath, AKey, AValue, ASize);

if MNI_EnableBIOSSearch.Checked then
   begin
        EDT_ArtNr.WriteMode := wrmInsert;
        EDT_ArtNr.EntryMode := emForceInsert;

   end
else
   begin
        EDT_ArtNr.WriteMode := wrmOverWrite;
        EDT_ArtNr.EntryMode := emForceOverWrite;
   end; //** if MNI_EnableBIOSSearch.Checked

UpdateButtons;

end; //** procedure MNI_EnableBIOSSearchClick


(******************************************************************************)
(***      MNI_BIOSSearchParams: OnClick                                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_BIOSSearchParamsClick(Sender: TObject);
var
   i : integer;
   ARootKey   : HKEY;
   APath      : string;
   AKey       : string;
   AValue     : Integer;
   ASize      : integer;
   FInputZahlParams    : TInputZahlParams;

begin

inherited;

if AQY_LookUp.Active then
   AQY_LookUp.Close;

with FInputZahlParams do
     begin
          AInteger := QuickSearchMaxRecords;
          ACurrency := 0;
          ACaption := rs_LV_ParameterSchnellsuche;
          ANurInteger := true;
          ATextInteger := rs_LV_MaximaleTreffer+'';
          ATextCurrency := '';
          AMinInt := 0;
          AMaxInt := 0;
          AMaxDigit := 9;
          AVorKomma := 5;
          ANachKomma := 0;
          AMinCurr := 0.0;
          AMaxCurr := 0.0;
          AForm := self;
          if Call(dnDobosCommon, 'acceptstdzahl', @FInputZahlParams) <> 1 then
             Exit;
          QuickSearchMaxRecords := AInteger;
     end; //** with FInputZahlParams do

ARootKey := HKEY_CURRENT_USER;
APath := Registry_BiosPfad+'\QuickSearch';
//** Schlüssel ggfs anlegen
AKey := 'LagerMXRecords';
AValue := QuickSearchMaxRecords;
ASize := SizeOf(AValue);
ReadWriteRegistry(wrInteger, true, ARootKey, APath, AKey, AValue, ASize);
QuickSearchMaxRecords := AValue;
AQY_LookUp.MaxRecords := QuickSearchMaxRecords;

end; //** procedure MNI_BIOSSearchParamsClick


(******************************************************************************)
(***      MNI_Kundensuche: OnClick - 03.2014                                ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_KundensucheClick(Sender: TObject);
var
   mKB,
   sKB           : string;
   mKunu         : integer;
   AValues       : array [0..0] of Variant;
   FSuchKLParams : TSuchKLParams;

begin

inherited;
if ((not Erfassen) and (not Aendern)) then
   Exit;

sKB := EDT_KB.Text;
mKunu := 0;
mKB := '';
//** Parameter: Start-Nummer, KLFlag, SuchText, Order by (0=KB, 1=Nr), SuchFeld(0=KB, 1=Bez), AlignControl
with FSuchKLParams do
     begin
          AKuNu := 0;
          AKLFlag := 0;
          AKLFlag := 1;
          ASuchText := '';
          AOrderBy  := 0;
          ASuchFeld := 0;
          AComponent:= EDT_KB;

          if Call (dnCommon, 'suchenkl', @FSuchKLParams) = 1 then
             begin
                  mKunu := AKuNu;

                  if ReadAnyFields (GetAdressenADB,
                                    'ADRESSEN',
                                    'WHERE KUNU = '+IntToStr(mKunu),
                                   ['KB'],
                                    AValues) then
                     try
                        mKB := AValues[0]
                     except
                     end
              end; //**  if Call (dnCommon, 'suchenkl', @FSuchKLParams) = 1 then

     end; //** with FSuchKLParams do

if mKunu <> 0 then
   if not IsSpace(mKB) then
      begin
           AQY_ArtikelStammKB.AsString := copy(mKB,1,10);
           EDT_KB.Text := copy(mKB,1,10);
      end; //** if not IsSpace(mKB) then

end; //** procedure MNI_KundensucheClick


(******************************************************************************)
(***      EDT_VorgabeLagerZu: OnLookupClick                                 ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_VorgabeLagerZuLookupClick(Sender: TObject);
begin

inherited;

GetListItem(lkLGName, Sender, Self);

end; //** procedure EDT_VorgabeLagerZuLookupClick


(******************************************************************************)
(***      ReadVorgabeLagerNamen                                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.ReadVorgabeLagerNamen;
begin

LYI_ZugangslagerFertigungName.Caption := rs_LV_kein;
LYI_AbgangslagerFertigungName.Caption := rs_LV_kein;
LYI_ZugangslagerName.Caption := rs_LV_kein;
LYI_Abgangslagername.Caption := rs_LV_kein;

if IsSpace(CurrArtNr) then
   Exit;

with AQY_Divers do
     try
        try
           if Active then
              Close;
           Connection := GetDobosADB;
           SQL.Clear;
           SQL.Add('SELECT '
                  +'"ZU" = (SELECT TEXT FROM SCHLUESSEL WHERE ART = ''LG'' AND NUMMER = '+IntToStr(AQY_ArtikelStammVORGABELAGER_ZU.AsInteger)+'), '
                  +'"ZUDV" = (SELECT TEXT FROM SCHLUESSEL WHERE ART = ''LG'' AND NUMMER = '+IntToStr(AQY_ArtikelStammVORGABELAGER_ZU_DV.AsInteger)+'), '
                  +'"AB" = (SELECT TEXT FROM SCHLUESSEL WHERE ART = ''LG'' AND NUMMER = '+IntToStr(AQY_ArtikelStammVORGABELAGER_AB.AsInteger)+'), '
                  +'"ABDV" = (SELECT TEXT FROM SCHLUESSEL WHERE ART = ''LG'' AND NUMMER = '+IntToStr(AQY_ArtikelStammVORGABELAGER_AB_DV.AsInteger)+') ');
           UCOpenSQL(AQY_Divers);
           if (not (VarIsNull(Fields[0].AsString))) then
              if AQY_ArtikelStammVORGABELAGER_ZU.AsInteger <> -1 then
                 if IsSpace(Fields[0].AsString) then
                    LYI_ZugangslagerName.Caption := rs_LV_NotDefined
                 else
                    LYI_ZugangslagerName.Caption := Fields[0].AsString
              else
           else
              LYI_ZugangslagerName.Caption := rs_LV_NotDefined;

           if (not (VarIsNull(Fields[1].AsString))) then
              if AQY_ArtikelStammVORGABELAGER_ZU_DV.AsInteger <> -1 then
                 if IsSpace(Fields[1].AsString) then
                    LYI_ZugangslagerFertigungName.Caption := rs_LV_NotDefined
                 else
                    LYI_ZugangslagerFertigungName.Caption := Fields[1].AsString
              else
           else
              LYI_ZugangslagerFertigungName.Caption := rs_LV_NotDefined;

           if (not (VarIsNull(Fields[2].AsString))) then
              if AQY_ArtikelStammVORGABELAGER_AB.AsInteger <> -1 then
                 if IsSpace(Fields[2].AsString) then
                    LYI_Abgangslagername.Caption := rs_LV_NotDefined
                 else
                    LYI_Abgangslagername.Caption := Fields[2].AsString
              else
           else
              LYI_Abgangslagername.Caption := rs_LV_NotDefined;

           if (not (VarIsNull(Fields[3].AsString))) then
              if AQY_ArtikelStammVORGABELAGER_AB_DV.AsInteger <> -1 then
                 if IsSpace(Fields[3].AsString) then
                    LYI_AbgangslagerFertigungName.Caption := rs_LV_NotDefined
                 else
                    LYI_AbgangslagerFertigungName.Caption := Fields[3].AsString
              else
           else
              LYI_AbgangslagerFertigungName.Caption := rs_LV_NotDefined;

        except
           on E:Exception do
              ShowMessage(E.Message);
        end; //** try..except

     finally
        if Active then
           Close;
     end; //** try..finally


end; //** procedure ReadVorgabeLagerNamen


(******************************************************************************)
(***      EDT_VorgabeLagerZu: OnExit                                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_VorgabeLagerZuExit(Sender: TObject);
begin

inherited;
if not ((Erfassen) or (Aendern)) then
   Exit;

//** 22.09.2017 SM
if (IsBiogartenOnly) then
   if (GetLinkagePointer^.MRecord.Mandant = 1) then
      if Sender = EDT_VorgabeLagerZuDV then
         Exit;

//** 09.11.2017 SM
if (IsBiogartenOnly) then
   if (GetLinkagePointer^.MRecord.Mandant = 1) then
      if Sender = EDT_VorgabeLagerAbDV then
         Exit;

if IsHasCharge then
   if TSHBDBIntEdit(Sender).AsInteger >= Min_ChargenLagernummer then
      begin
           ShowMessage(rs_LV_ChargenlaegerKoennenNichtAngewaehltWerden);
           TSHBDBIntEdit(Sender).AsInteger := -1;
      end;

ReadVorgabeLagerNamen;

end; //** procedure EDT_VorgabeLagerZuExit


(******************************************************************************)
(***      EDT_AlternateArtNr1(2): OnLookupClick                             ***)
(******************************************************************************)

//** EDT_AlternateArtNr3 Reserviert KuSpez (z.B. Biogarten)

procedure TFRM_DobosLV.EDT_AlternateArtNr1LookupClick(Sender: TObject);
var
   FSuchLVParams : TSuchLVParams;
   ANr           : string;
   b             : boolean;

begin

inherited;
if not ((Erfassen) or (Aendern)) then
   Exit;

with FSuchLVParams  do
     begin
          AAskMode := false;
          AArtNr := '';
          ASuchText := TSHBDBEdit(Sender).Text;
          AOrderBy  := 0;
          ASuchFeld := 0;
          AComponent:= TSHBDBEdit(Sender);
     end; //** with FSuchLVParams do

if Call (dnDobosSuchen, 'suchenlv', @FSuchLVParams) = 1 then
   begin
        if AQY_ArtikelStamm.Active then
           TSHBDBEdit(Sender).Text := FSuchLVParams.AArtNr;

   end; //** if Call (dnDobosSuchen, 'suchenlv', @FSuchLVParams) = 1 then

end; //** procedure EDT_AlternateArtNr1LookupClick


(******************************************************************************)
(***      FormDeactivate                                                    ***)
(******************************************************************************)

procedure TFRM_DobosLV.FormDeactivate(Sender: TObject);
begin

inherited;
//** 11.0 muß gemacht werden für jedes TSHBLookupWithQueryEdit
if Assigned(Screen.ActiveForm) then
   if Screen.ActiveForm.Name = 'DLG_ListView' then
      Exit;

if Self.ActiveControl = EDT_ArtNr then
   if MNI_EnableBIOSSearch.Checked then
      EDT_ArtNr.BIOSQuitSearch;

if Self.ActiveControl = EDT_BEZ_1 then
   if MNI_EnableBIOSSearch.Checked then
      EDT_BEZ_1.BIOSQuitSearch;

if Self.ActiveControl = EDT_BN then
   if MNI_EnableBIOSSearch.Checked then
      EDT_BN.BIOSQuitSearch;

if Self.ActiveControl = EDT_KB then
   if MNI_EnableBIOSSearch.Checked then
      EDT_KB.BIOSQuitSearch;

if Self.ActiveControl = EDT_ZN then
   if MNI_EnableBIOSSearch.Checked then
      EDT_ZN.BIOSQuitSearch;


end; //** procedure FormDeactivate


(******************************************************************************)
(***      MNI_SiArchiv: OnClick                                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_SiArchivClick(Sender: TObject);
begin

inherited;

with GetLinkagePointer^ do   //** 02.11.2015 SM
     begin
          if ((Priv_Dobos <> Ja) or
              ((PRIV_AR = Nein) and (PRIV_AA = Nein) and (PRIV_BA = Nein))) then
             begin
                  NoPrivilege;
                  Exit;
             end; //** if ((Priv..
     end; //** with GetLinkagePointer^ do

GetLinkagePointer^.LinkLastArtNr := CurrArtNr;
LoadDll(dnDobosAR, ctyNormal, 'L');

end; //** procedure MNI_SiArchivClick


(******************************************************************************)
(***             EDT_Status: OnExit                                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_StatusExit(Sender: TObject);
begin

inherited;

if (GetLinkagePointer^.Serial = KSerial_Yamaichi)              then
   begin
        if ((GetLinkagePointer^.PRIV_DOBOS_ABSCHLUSS = Nein)   and
           (GetLinkagePointer^.Gruppe = 5)                     and
           (EDT_Status.AsInteger <> 0)                         and
           (EDT_Status.AsInteger <> 2)                         and
           (EDT_Status.AsInteger <> 5))                        then
           AQY_ArtikelStammSTATUS.AsInteger := YamaichiSaveStatus;
   end;

end; //** procedure EDT_StatusExit


(******************************************************************************)
(***     VerifyURL                                                          ***)
(******************************************************************************)

function TFRM_DobosLV.VerifyURL(const AAdresse: string): boolean;
var
   p : integer;
   s,
   Ext : string;

begin
result := false;

if (AAdresse.Length <= 2100) and  (AAdresse.Length > 3) then
   result := true;

end; //** function VerifyURL


(******************************************************************************)
(***      SBT_InternetLink: OnClick                                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_InternetLinkClick(Sender: TObject);
var
   LinkOld,
   s : string;
   LinkNr : integer;
   b : boolean;
   URL: string;

begin

inherited;
if Sender = SBT_InternetLink then
   if ((Erfassen) and (Self.ActiveControl = EDT_ArtNr)) then
      Exit;

if Sender = SBT_LiefInternetLink then
   if ((AQY_Lieferant.State in [dsEdit, dsInsert]) and (AQY_LieferantKUNU.AsInteger < FirstKreditor)) then
      Exit;

if Sender = SBT_InternetLink then
   LinkNr := AQY_ArtikelStammHYPERLINK.AsInteger
else
   LinkNr := AQY_LieferantHYPERLINK.AsInteger;

if (((Sender = SBT_InternetLink) and
     ((Erfassen) or (DauerAendern) or (Aendern)))
     or
    ((Sender = SBT_LiefInternetLink) and
     (AQY_Lieferant.State in [dsEdit, dsInsert]))) then
   begin
        LinkOld := '';
        if LinkNr > 0 then
           GetWriteInternetLinkData(false,LinkNr, LinkOld);
        b := ClipBoard.HasFormat(CF_TEXT);
        if not b then
           begin
                ShowMessage(rs_LV_NoURLInClipboard);
                Exit;
           end;
        s := ClipBoard.AsText;
        if not VerifyURL(s) then
           begin
                ShowMessage(rs_LV_NoURLInClipboard);
                Exit;
           end;

        if LinkNr <> 0 then
           if IsSpace(LinkOld) then
              begin
                   if (MessageDlg(Format(rs_LV_QSaveLink,[s]),
                       mtConfirmation,[mbYes,mbNo],0)) <> mrYes then
                       Exit;
              end
           else
              begin
                   if s = LinkOld then
                      ShowMessage(rs_LV_LinkIsSame)
                   else
                      if (MessageDlg(Format(rs_LV_QSaveNewLink,[LinkOld, s]),
                          mtConfirmation,[mbYes,mbNo],0)) <> mrYes then
                          Exit;
              end;

        if not GetWriteInternetLinkData(true,LinkNr, s) then
           ShowMessage(rs_LV_SaveLinkFailed)
        else
           begin
                ShowMessage(Format(rs_LV_LinkSaved,[s]));
                if (Sender = SBT_InternetLink) then
                    AQY_ArtikelStammHYPERLINK.AsInteger := LinkNr
                else
                   if (Sender = SBT_LiefInternetLink) then
                      AQY_LieferantHYPERLINK.AsInteger := LinkNr
                   else
                      Exit;
           end //** if not GetWriteInternetLinkData(true,LinkNr, s) then
   end //** if (((Sender = SBT_InternetLink) and
else
   begin
        s := '';
        if LinkNr > 0 then
           if not GetWriteInternetLinkData(false,LinkNr, s) then
              Exit
           else
        else
           Exit;

        URL := s;
        if Trim(URL) = '' then
           Exit;

        //if Pos('http:',URL) < 1 then
        //   URL := 'http://www.'+URL;

        try
           ShellExecute(Self.Handle, nil, PChar(URL), nil, nil, SW_SHOW);
        except
        end; //** try..except

   end; //** if (((Sender = SBT_InternetLink)

end; //** procedure SBT_InternetLinkClick


(******************************************************************************)
(***      SBT_LiefInternetLink: OnMouseDown                                 ***)
(******************************************************************************)

procedure TFRM_DobosLV.SBT_InternetLinkMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
var
   LinkNr : integer;
   s      : string;

begin

inherited;
if Sender = SBT_InternetLink then
   LinkNr := AQY_ArtikelStammHYPERLINK.AsInteger
else
   LinkNr := AQY_LieferantHYPERLINK.AsInteger;

s := '';
if ((LinkNr > 0) and (Button = mbRight)) then
   begin
        if (((Sender = SBT_InternetLink) and
             (AQY_ArtikelStamm.State <> dsEdit)) or
            ((Sender = SBT_LiefInternetLink) and
             (AQY_Lieferant.State <> dsEdit))) then
            Exit;

        if GetWriteInternetLinkData(false,LinkNr, s) then
           if (MessageDlg(Format(rs_LV_QDeleteLink,[s]),
                       mtConfirmation,[mbYes,mbNo],0)) <> mrYes then
                       Exit;

        if (Sender = SBT_InternetLink) then
           AQY_ArtikelStammHYPERLINK.AsInteger := 0
        else
           if (Sender = SBT_LiefInternetLink) then
              AQY_LieferantHYPERLINK.AsInteger := 0;

   end; //** if ((LinkNr > 0) and (Button = mbRight)) then

end; //** procedure SBT_LiefInternetLinkMouseDown


(******************************************************************************)
(***      MNI_SichtenSonderPM: OnClick  - 2015 SM 11.1                      ***)
(******************************************************************************)

procedure TFRM_dobosLV.MNI_SichtenSonderPMClick(Sender: TObject);
var
   FPflegenSoPreisParams : TPflegenSoPreisParams;

begin

inherited;
if ModalCallActive then
   Exit;

if ((Erfassen) and
    (IsSpace(LastErfassenSemaphore))) then
   Exit;

if AQY_ArtikelStammPACKMITTEL_IST_PM.AsString = 'J' then
   Exit;

with FPflegenSoPreisParams do
     begin
          AKuNu := 0;
          AKB := AQY_ArtikelStammKB.AsString;
          AArtNr := TrimRight(AQY_ArtikelStammARTNR.AsString);
          AFunction := 2;
          AWS             := 0;
          AEinzelpreis    := 0.00;
          ARabatt         := 0.00;
          ASachnummer1    := '';
          ASachnummer2    := '';
          ADatum          := shbStrToDate('01.01.1950');
          ABisDatum       := shbStrToDate('01.01.1950');
          ANeuerEintrag   := false;
          AForm := Self;
     end; //** with FPflegenSoPreisParams do

try
   ModalCallActive := true;
   Call (dnDobosCommon, 'pflegensonderpm', @FPflegenSoPreisParams);
finally
   ModalCallActive := false;
end; //** try .. finally

end; //** procedure MNI_SichtenSonderPMClick


(******************************************************************************)
(***      MNI_SetUpLenArtNr: OnClick                                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_SetUpLenArtNrClick(Sender: TObject);
var
   InputZweiZahlenParams : TInputZweiZahlenParams;

begin

inherited;
if not (GetLinkagePointer^.PRIV_SysVW in ['J']) then
   begin
        NoPrivilege;
        Exit;
   end; //** if not (GetLinkagePointer^.PRIV_SysVW in ['J']) then

with InputZweiZahlenParams do
     begin
          ACurrency1 := MaxCharArtNr;
          ACurrency2 := WarnLengthArtNr;
          AVorKomma := 2;
          ANachKomma := 0;
          AMinCurr := 10;
          AMaxCurr := 30;
          AForm := Self;
          ACaption := rs_LV_MaxArtNrLength;
          ATextCurrency1 := rs_LV_EingabeBegrenzenAuf;
          ATextCurrency2 := rs_LV_WarnungBei;
          if AcceptZweiZahlen(@InputZweiZahlenParams) = 1 then
             begin
                  MaxCharArtNr := Trunc(ACurrency1);
                  WarnLengthArtNr := Trunc(ACurrency2);
                  EDT_ArtNr.MaxLength := MaxCharArtNr;
                  InstallYYOrWriteParams(tYYAnzahlCharArtNr, 'Begrenzt Artikelnummernlänge','', MaxCharArtNr, WarnLengthArtNr, 0, 0.0,0.0,' ');
             end; //** if AcceptZweiZahlen(InputZweiZahlenParams) = 1 then

     end; //** with InputZweiZahlenParams do

end; //** procedure MNI_SetUpLenArtNrClick


(******************************************************************************)
(***                MNI_VKStaffelEingeben: OnClick                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_VKStaffelEingebenClick(Sender: TObject);
var
   i : Integer ;
   FPflegeRasterParams : TPflegeRasterParams;
begin
inherited;

with FPflegeRasterParams do
     begin
          ARaster := 0;
          AVariabelErfassen := true;
          AForm := self;
     end; //** with FPflegeRasterParams do

i := Call (dnDobosCommon, 'pflegenraster', @FPflegeRasterParams);
if i > -1 then
   if ((Sender = MNI_EKStaffelEingeben) or (Sender = MNI_EKVariablesRasterErfassen)) then
      begin
           if not AQY_Lieferant.Active then
              Exit;
           if not (AQY_Lieferant.State in [dsEdit, dsInsert]) then
              begin
                   if AQY_Lieferant.RecNo = -1 then
                      begin
                           AQY_Lieferant.Insert;
                           AQY_LieferantRASTER.AsInteger := i;
                      end
                   else
                      begin
                           AQY_Lieferant.Edit;
                           AQY_LieferantRASTER.AsInteger := i;
                           AQY_Lieferant.Post;
                      end;
              end //** if not (AQY_Lieferant.State in [dsEdit, dsInsert])
           else
             AQY_LieferantRASTER.AsInteger := i;
      end //** if Sender = MNI_EKStaffelEingeben
   else
      begin
           if not AQY_ArtikelStamm.Active then
              Exit;
           if not (AQY_ArtikelStamm.State in [dsEdit, dsInsert]) then
              begin
                   AQY_ArtikelStamm.Edit;
                   AQY_ArtikelStammRASTER_VK.AsInteger := i;
                   AQY_ArtikelStamm.Post;
              end
           else
              AQY_ArtikelStammRASTER_VK.AsInteger := i;
           ReadRaster(AQY_ArtikelStammRASTER_VK.AsInteger, true, false,false);
      end; //** Else-Zweig

end; //** procedure MNI_VKStaffelEingebenClick


(******************************************************************************)
(***                     PUM_Raster: OnPopup                                ***)
(******************************************************************************)

procedure TFRM_DobosLV.PUM_RasterPopup(Sender: TObject);
begin
inherited;
if PUM_Raster.PopupComponent = EDT_RasterVK then
   begin
        MNI_EKVariablesRasterErfassen.Visible := false;
        MNI_VKVariablesRasterErfassen.Visible := true;
   end
else
   begin
        MNI_EKVariablesRasterErfassen.Visible := true;
        MNI_VKVariablesRasterErfassen.Visible := false;
   end
end; //** procedure PUM_RasterPopup


(******************************************************************************)
(***                      PUM_ArtNr: OnPopup                                ***)
(******************************************************************************)

procedure TFRM_DobosLV.PUM_ArtNrPopup(Sender: TObject);
begin

inherited;

if Erfassen then
   MNI_ErfassenMaske.Visible := true
else
   MNI_ErfassenMaske.Visible := false;

end; //** procedure PUM_ArtNrPopup


(******************************************************************************)
(***      PAN_LiefName: OnDblClick                                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.PAN_LiefNameDblClick(Sender: TObject);
begin

inherited;
if EDT_LiefKuNu.AsInteger >= FirstKreditor then
   begin
        GetLinkagePointer^.LinkInteger1 := EDT_LiefKuNu.AsInteger;
        LoadDll(dnDobosKl, ctyNormal, 't');
   end; //** if EDT_LiefKuNu.AsInteger >= FirstKreditor

end; //** procedure PAN_LiefNameDblClick


(******************************************************************************)
(***             MNI_DurchsucheRueckstaende: OnClick                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.MNI_DurchsucheRueckstaendeClick(Sender: TObject);
var
   ARootKey   : HKEY;
   APath      : string;
   AKey       : string;
   AValue     : Integer;
   ASize      : integer;
begin

inherited;

MNI_DurchsucheRueckstaende.Checked := not (MNI_DurchsucheRueckstaende.Checked);

ARootKey := HKEY_CURRENT_USER;
APath := Registry_BiosPfad+'\RueckstaendeAktivieren';
//** Schlüssel ggfs anlegen
AKey := 'Durchsuche Rueckstaende';
AValue := 0;
if MNI_DurchsucheRueckstaende.Checked then
   AValue := 1;
ASize := SizeOf(AValue);
ReadWriteRegistry(wrInteger, true, ARootKey, APath, AKey, AValue, ASize);

UpdateButtons;

end; //** procedure MNI_DurchsucheRueckstaendeClick


(******************************************************************************)
(***      UpdateAenderungsdatum                                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.UpdateAenderungsdatum(const AArtNr: string);
begin

with AQY_Divers do
    try
       if Active then
        Close;
       Connection := GetDobosADB;
       SQL.Clear;
       SQL.Add('UPDATE ARTIKEL_STAMM SET AENDERUNG_DATUM = getdate() WHERE ARTNR = '
              +''''+SQLTextString(AArtNr)+''' '
              +' AND AENDERUNG_DATUM <> ''01.01.1950'' ');
       ExecSQL;
       SQL.Clear;
       AQY_ArtikelStamm.Refresh;
    except
    end; //** try..except

end; //** procedure UpdateAenderungsdatum


(******************************************************************************)
(***                   UpdateArtikelGesperrtLabel                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.UpdateArtikelGesperrtLabel;
begin

LAB_ArtikelInatktivText.Style.Font.Color := BIOSFarbe120Rot;

if AQY_ArtikelStammSTATUS.AsInteger = 0 then
   begin
        LYI_ArtikelGesperrtInfo.Visible := false;
        //LAB_ArtikelInatktivText.Caption := rs_LV_ArtikelGesperrt;
   end; //** if AQY_ArtikelStammSTATUS.AsInteger = 9


if GetLinkagePointer^.Serial = KSerial_Klotz then
   begin
        if AQY_ArtikelStammSTATUS.AsInteger = 5 then
           begin
                LYI_ArtikelGesperrtInfo.Visible := true;
                LAB_ArtikelInatktivText.Caption := rs_LV_Auslaufartikel;
           end; //** if AQY_ArtikelStammSTATUS.AsInteger = 5
   end;//** if GetLinkagePointer^.Serial = KSerial_Klotz

if AQY_ArtikelStammSTATUS.AsInteger = 9 then
   begin
        LYI_ArtikelGesperrtInfo.Visible := true;
        LAB_ArtikelInatktivText.Caption := rs_LV_ArtikelGesperrt;
   end; //** if AQY_ArtikelStammSTATUS.AsInteger = 9

end; //** procedure UpdateArtikelGesperrtLabel


(******************************************************************************)
(***  AQY_CHLager: OnCalcFields  - 14.09.2018 SM                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.AQY_CHLagerCalcFields(DataSet: TDataSet);
var
  rBestand0,
  rReserviert0,
  rBestandCL    : currency;

begin
inherited;

rBestandCL := 0.00;
rBestand0 := 0.00;
rReserviert0 := 0.00;

with AQY_Divers do
     try
        if Active then
           Close;
        Connection := GetDobosADB;
        SQL.Clear;
        SQL.Add('SELECT "SUMBESTANDCL" = ISNULL((SELECT (sum(BESTAND)) FROM CHAOT_LAGER '
               +'WHERE ARTNR = '''+SQLTextString(Trim(AQY_CHLagerARTNR.AsString))+'''), 0.0), '
               +'"BESTAND_L0" = ISNULL((SELECT BESTAND FROM ARTIKEL_LAGER l WHERE l.LAGER = '
               +IntToStr(GetLinkagePointer^.CL_Lagernummer)+' AND l.ARTNR = '''
               +SQLTextString(Trim(AQY_CHLagerARTNR.AsString))+'''), 0.0), '
               +'"RESERVIERT_L0" = ISNULL((SELECT sum(p.GELIEFERT) FROM AUFTRAG_POSTEN p (NOLOCK) '
               +'WHERE (p.ART = ''A'' AND p.ZEILEN_ART = ''L'' AND p.LAGER = '
               +IntToStr(GetLinkagePointer^.CL_Lagernummer)+' AND (p.ARTNR = '''
               +SQLTextString(Trim(AQY_CHLagerARTNR.AsString))+'''))), 0.0) ');

        UCOpenSQL(AQY_Divers);
        if not EOF then
           begin
                rBestandCL := Fields[0].AsCurrency;
                rBestand0 := Fields[1].AsCurrency;
                rReserviert0 := Fields[2].AsCurrency;
           end; //** if not EOF then

     except
         on E:Exception do
            ShowMessage(E.Message);
     end; //** try..except

with AQY_Divers do
     if Active then
        Close;

AQY_CHLagerSumBestandCL.AsCurrency := rBestandCL;
AQY_CHLagerBestand0.AsCurrency := rBestand0;
AQY_CHLagerReserviert0.AsCurrency := rReserviert0;

end; //** procedure AQY_CHLagerCalcFields


(******************************************************************************)
(***                       BTN_LoadIBClick                                  ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadIBClick(Sender: TObject);
var
   fAction : TInfoBlattAction;

begin

inherited;
if ((Erfassen) and
    (IsSpace(LastErfassenSemaphore))) then
   Exit;

if IsSpace(AQY_ArtikelStammARTNR.AsString) then
   Exit;

if Erfassen then
   NeuEingabeAktiv := true;

if ((Erfassen) or (Aendern)) then
   fAction := iblAendern
else
   fAction := iblSichten;

if not CallInfoBlatt('L', AQY_ArtikelStammARTNR.AsString, Format('%s / %s',[AQY_ArtikelStammARTNR.AsString, AQY_ArtikelStammBEZ_1.AsString]),fAction) then
   ShowMessage(rs_LV_CallIBFailed);

CheckIB;

end; //** procedure BTN_LoadIBClick


(******************************************************************************)
(***                  BTN_LoadZusatzTexteClick                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadZusatzTexteClick(Sender: TObject);
var
   FPflegeRTFParams : TPflegeRTFParams;
   i : integer;
   mMandant   : integer;
   NachMandant,
   VonMandant : string;

begin

inherited;
if ((Erfassen) and
    (IsSpace(LastErfassenSemaphore))) then
   Exit;

if IsSpace(AQY_ArtikelStammARTNR.AsString) then
   Exit;

with FPflegeRTFParams do
     begin
          AArtNr := AQY_ArtikelStammARTNR.AsString;
          AKB := AQY_ArtikelStammBEZ_1.AsString;
          AKuNu := 0;
          AFunction := 0;
          if Erfassen then
             AFunction := 1;
          if Aendern then
             AFunction := 2;
          AForm := Self;
     end; //** with FPflegeRTFParams do

i := Call (dnDobosCommon, 'pflegertf', @FPflegeRTFParams);
CheckIB;
if i = 9 then
   CheckZusatzInfosZusatzDokumente(TrimRight(AQY_ArtikelStammARTNR.AsString),true)
else
   CheckZusatzInfosZusatzDokumente(TrimRight(AQY_ArtikelStammARTNR.AsString),false);
SetHintsAndBadge;

if (i = 9) then  //** der Übergabeparameter wird bisher nirgends ausgewertet
   if (((GetLinkagePointer^.Serial = KSerial_Famec) and (EDT_C10.Text = 'S')) or
       (GetLinkagePointer^.Serial = KSerial_Plaschka)) then                      //** 22.02.2017 SM
      try
         mMandant := 2;
         if GetLinkagePointer^.MRecord.Mandant = 2 then
            mMandant := 1;

         if (MessageDlg(Format(rs_LV_YamaichiFrageM02,[mMandant]), mtConfirmation,[mbYes,mbNo],0)) <> mrYes then
            Exit;

         NachMandant := 'M02';
         VonMandant := 'M01';
         if GetLinkagePointer^.MRecord.Mandant = 2 then
            begin
                 NachMandant := 'M01';
                 VonMandant := 'M02';
            end; //** if GetLinkagePointer^.MRecord.Mandant = 2 then

         with AQY_Divers do
              try
                 if Active then
                    Close;
                 Connection := GetDobosADB;
                 AQY_Divers.Connection.BeginTrans;
                 ShowSQLWait;

                 SQL.Clear;
                 SQL.Add('IF EXISTS (SELECT * FROM '+NachMandant+'.dbo.ARTIKEL_ZUSATZTEXT '
                 +'WHERE ARTNR = '''+SQLTextString(Trim(EDT_ArtNr.Text))+''') DELETE '+NachMandant+'.dbo.ARTIKEL_ZUSATZTEXT '
                 +'WHERE ARTNR = '''+SQLTextString(Trim(EDT_ArtNr.Text))+''' ');
                 UCExecSQL(AQY_Divers);

                 SQL.Clear;
                 SQL.Add('INSERT INTO '+NachMandant+'.dbo.ARTIKEL_ZUSATZTEXT SELECT '''+SQLTextString(Trim(EDT_ArtNr.Text))+''', '
                 +'SPRACHE, AG, AB, WA, LS, RE, GU, BE, LM, WR, INHALT '
                 +'FROM '+VonMandant+'.dbo.ARTIKEL_ZUSATZTEXT WHERE ARTNR = '''+SQLTextString(Trim(EDT_ArtNr.Text))+''' ');
                 UCExecSQL(AQY_Divers);

                 AQY_Divers.Connection.CommitTrans;
                 UnShowSQLWait;
                 ShowMessage(Format(rs_LV_DatenGespeichert,[mMandant]));

                 with AQY_Divers do
                      if Active then
                         Close;
              except
                 on E:Exception do
                    ShowMessage(E.Message);
              end; //** try..except

      except
         begin
              AQY_Divers.Connection.RollbackTrans;
              UnShowSQLWait;
              ShowMessage(Format(rs_LV_DatenNichtGespeichert,[mMandant]));
         end;
      end;  //** try..except

end; //** procedure BTN_LoadZusatzTexteClick


(******************************************************************************)
(***                   BTN_MarkSmall: OnClick                               ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_MarkSmallClick(Sender: TObject);
var
   x : TLagerMemKey;
   s : string;
begin

inherited;
if ((Assigned(KeyList) and (AQY_ArtikelStammARTNR.AsString > ''))) then
   begin
        with x do
             begin
                  s := TrimRight(AQY_ArtikelStammARTNR.AsString);
                  shbExpandString(s, LengthOfArtNr, ' ', false);
                  MArtNr := s;
                  MVariante := 0;
             end; //** with x do

        if KeyList.IndexOf(@x, SizeOf(TLagerMemKey)) < 0 then
           KeyIndex := KeyList.Add(@x, SizeOf(TLagerMemKey));

        BGP_SelNavBarGruppe.Visible := ivAlways;
        UpdateNavi;
        UpDateButtons;
        UpdateRecentList;
   end; //** if ((Assigned(KeyList) and (AQY_ArtikelStammARTNR.AsString > '')))

end; //** procedure BTN_MarkSmallClick


(******************************************************************************)
(***                      BTN_MakeVorgaenge: OnClick                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_MakeVorgaengeClick(Sender: TObject);
begin

inherited;

BTN_MakeVorgaenge.DropDown();

end; //** procedure BTN_MakeVorgaengeClick



(******************************************************************************)
(***             BTN_SucheSachnummer: OnClick                               ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_SucheSachnummerClick(Sender: TObject);
var
   FSuchSachnummerParams : TSuchSachnummerParams;
begin
inherited;
with FSuchSachnummerParams do
     begin
          AKuNu := -1;
          AArtNr := '';
          ASuchbegriff := '';
          AComponent := Self;
          if Call (dnDobosSuchen, 'suchennachsachnummer', @FSuchSachnummerParams) = 1 then
             EDT_ArtNr.Text := AArtNr;
          if IsSpace(AArtNr) then
             Exit
          else
             if EDT_KB.CanFocus then
                EDT_KB.SetFocus;
     end //** with FSuchSachnummerParams do

end; //** procedure BTN_SucheSachnummerClick

(******************************************************************************)
(***                      BTN_LoadAU: OnClick                               ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadAUClick(Sender: TObject);
var
   FSuchAUBEParams : TSuchAUBEParams;
   ArtStr          : string;

   //** 11.1
   MemKeyList    : TSHBDynamicArray;
   i,r           : integer;
   LinkList      : TStringList;
   s             : string;
   x             : PFABWKeyRecord;

begin

inherited;
if ModalCallActive then
   Exit;

with GetlinkagePointer^ do
     if (Serial = KSerial_AllColor) and (PRIV_KLB = 'K') then
        if ((Sender = BTN_LoadBE) or (Sender = MNI_SiBestellung)) then
           begin
                NoPrivilege;
                Exit;
           end; //** if ((Sender = BTN_LoadBE) or (Sender = MNI_SiBestellung)) then

with FSuchAUBEParams do
     try
        AKuNu := 0;
        ASammlerID := 0;
        AFunction := 0;
        AVorgangsNr := -1;
        if ((Sender = BTN_LoadAU) or (Sender = MNI_SiAuftrag)) then
           AFunction := 2  //** Aufträge, Angebote
        else
           if ((Sender = BTN_LoadBE) or (Sender = MNI_SiBestellung)) then
              AFunction := 3; //** Bestellungen, Anfragen
        ANummer := 0;
        AComponent:= Self;
        ACallingProg := cpSuchenABBE_LagerUndLagerInfo;
        if AQY_ArtikelStammMS_JN.AsString = 'J' then
           ACallingProg := cpSuchenABBE_LagerUndLagerInfoMiniSet;

        AListPointer := nil;

        if AFunction = 3 then
           AArt := 'B'
        else
           AArt := 'A';
        AArtNr := TrimRight(AQY_ArtikelStammARTNR.AsString);

        try
           ModalCallActive := true;

           //** 11.1
           LinkList := TStringList.Create;
           MemKeyList := TSHBDynamicArray.Create(100, SizeOf(TFABWKeyRecord)); //** Liste für Auftrags-RecordSet
           AListPointer := MemKeyList;

           r := Call (dnDobosSuchen, 'suchenaube', @FSuchAUBEParams);
           if (AArt in ['A', 'G']) then
              with GetLinkagePointer^ do
                   if (((PRIV_AU = Ja) and (AArt = 'A')) or
                       ((PRIV_AN = Ja) and (AArt = 'G'))) then
                      //** 11.1 Massenload AW
                      if ((r = 0) and (MemKeyList.Count > 0)) then
                         begin
                              LinkList.Clear;
                              LinkList.Add('START_AU');
                              for i := 0 to MemKeyList.Count -1 do
                                  begin
                                       x := MemKeyList.Items[i];
                                       if ((x.AART = 'A') or (x.AART = 'G')) then
                                       //if x.AART = AArt then
                                          begin
                                               s :=  Format('%5.5d',[x.AKUNU])+IntToStr(x.ANUMMER);
                                               LinkList.Add(s);
                                          end;
                                  end;
                              LinkList.Add('END_AU');
                              if LinkList.Count > 2 then
                                 try
                                     ClipBoard.Open;
                                     Clipboard.AsText := LinkList.Text;
                                 finally
                                    Clipboard.Close;
                                 end; //** try..finally

                              if x.AART = 'A' then
                                 GetLinkagePointer^.LinkPointer2 := Pointer(Integer(mlAuftrag));
                              if x.AART = 'G' then
                                 GetLinkagePointer^.LinkPointer2 := Pointer(Integer(mlAngebot));

                              LoadDll(dnDobosFA, ctyNormal, 'Q');
                         end
                      else
                         if ((ANummer <> 0) and (AKuNu <> 0)) then
                            begin
                                 with GetLinkagePointer^ do
                                      begin
                                           LinkLastKuNu := AKuNu;
                                           LinkInteger1 := ANummer;
                                           if AArt = 'A' then
                                              begin
                                                   ArtStr := rs_LV_QLoadAuftrag;
                                                   LinkInteger2 := 0;  //** IsAuftrag
                                              end
                                           else
                                              begin
                                                   ArtStr := rs_LV_QLoadAngebot;
                                                   LinkInteger2 := 1; //** IsAngebot
                                              end; //** if AArt = 'A'
                                      end; //** with GetLinkagePointer^ do
                                 if ((isProfi) or (MessageDlg(ArtStr, mtConfirmation,[mbYes,mbNo],0) = mrYes)) then
                                    LoadDll(dnDobosFA, ctyNormal, 'L');
                            end; //** if ((ANummer <> 0) and (AKuNu <> 0))

           if (AArt in ['B', 'F']) then
              with GetLinkagePointer^ do
                   if (PRIV_BW = Ja) then
                      //** 11.1 Massenload BW
                      if ((r = 0) and (MemKeyList.Count > 0)) then
                         begin
                              LinkList.Clear;
                              LinkList.Add('START_BW');
                              for i := 0 to MemKeyList.Count -1 do
                                  begin
                                       x := MemKeyList.Items[i];
                                       if ((x.AART = 'B') or (x.AART = 'F')) then
                                       //if x.AART = AArt then
                                          begin
                                               s :=  Format('%5.5d',[x.AKUNU])+IntToStr(x.ANUMMER);
                                               LinkList.Add(s);
                                          end;
                                  end;
                              LinkList.Add('END_BW');
                              if LinkList.Count > 2 then
                                 try
                                     ClipBoard.Open;
                                     Clipboard.AsText := LinkList.Text;
                                 finally
                                    Clipboard.Close;
                                 end; //** try..finally

                              if x.AART = 'B' then
                                 GetLinkagePointer^.LinkPointer2 := Pointer(Integer(mlBestellung));
                              if x.AART = 'F' then
                                 GetLinkagePointer^.LinkPointer2 := Pointer(Integer(mlAnfrage));

                              //GetLinkagePointer^.LinkPointer2 := Pointer(Integer(mlBestellung));

                              LoadDll(dnDobosBW, ctyNormal, 'Q');
                         end
                      else
                         if ((ANummer <> 0) and (AKuNu <> 0)) then
                            begin
                                 with GetLinkagePointer^ do
                                      begin
                                           LinkLastKuNu := AKuNu;
                                           LinkInteger1 := ANummer;
                                           if AArt = 'B' then
                                              begin
                                                   ArtStr := rs_LV_QLoadBestellung;
                                                   LinkInteger2 := 0;  //** IsBestellung
                                              end
                                           else
                                              begin
                                                   ArtStr := rs_LV_QLoadAnfrage;
                                                   LinkInteger2 := 1; //** IsAnfrage
                                              end; //** if AArt = 'B'
                                      end; //** with GetLinkagePointer^ do
                                 if ((isProfi) or (MessageDlg(ArtStr,
                                     mtConfirmation,[mbYes,mbNo],0) = mrYes)) then
                                    LoadDll(dnDobosBW, ctyNormal, 'L');
                            end; //** if ((ANummer <> 0) and (AKuNu <> 0))

        finally
           ModalCallActive := false;
        end; //** try..finally
     except
     end; //** with FSuchAUBEParams do
end; //** procedure BTN_LoadAUClick


(******************************************************************************)
(***                        BTN_LoadSN: OnClick                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadSNClick(Sender: TObject);
var
   FSichtenSNParams : TSichtenSNParams;
   i : integer;

begin
inherited;

if ModalCallActive then
   Exit;
with FSichtenSNParams do
     begin
          AFunction := 1;
          AKuNu := 0;
          AKB := AQY_ArtikelStammKB.AsString;
          AArtNr := TrimRight(AQY_ArtikelStammARTNR.AsString);
          ASelectedArtNr := '';
          ASelectedSerial := '';
          AForm := Self;
     end; //** with FSichtenSNParams do
try
   ModalCallActive := true;
   i := Call (dnDobosCommon, 'sichtensn', @FSichtenSNParams);
finally
   ModalCallActive := false;
end; //** try..finally

end; //** procedure BTN_LoadSNClick


(******************************************************************************)
(***                        BTN_LoadSM: OnClick                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadSMClick(Sender: TObject);
var
   FSichtenUMLagerParams : TSichtenUMLagerParams;
   i : integer;

begin

inherited;
if ModalCallActive then
   Exit;

{nicht mehr nötig, Privilegien dort 08.09.2022 *DB
with GetLinkagePointer^ do
     if ((Priv_EK <> Ja) or (Priv_DB <> Ja) or (Priv_VK <> Ja) or (Priv_UM <> Ja)) then
        begin
             NoPrivilege;
             Exit;
        end;
}
with FSichtenUMLagerParams do
     begin
          AArtNr := TrimRight(AQY_ArtikelStammARTNR.AsString);
          AKB := AQY_ArtikelStammKB.AsString;
          AForm := Self;
     end; //** with FSichtenUMLagerParams do

try
   ModalCallActive := true;
   i := Call (dnDobosCommon, 'sichtenumlager', @FSichtenUMLagerParams);
finally
   ModalCallActive := false;
end; //** try..finally

end; //** procedure BTN_LoadSMClick


(******************************************************************************)
(***                  BTN_LoadNettobedarf: OnClick                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadNettobedarfClick(Sender: TObject);
var
   FSichtenDispoParams : TSichtenDispoParams;
begin

inherited;
if ModalCallActive then
   Exit;

with FSichtenDispoParams do
     try
        AArtNr := TrimRight(AQY_ArtikelStammARTNR.AsString);
        AKB := AQY_ArtikelStammKB.AsString;
        ALager := 0;
        ABestellt := 0.0;
        ARueckstand := 0.0;
        AForm:= Self;
        AAllFlag := false;
        try
           ModalCallActive := true;
           Call (dnDobosCommon, 'sichtennbsummen', @FSichtenDispoParams);
        finally
           ModalCallActive := false;
        end; //** try..finally

     except
     end; //** with FSichtenDispoParams do

end; //** procedure BTN_LoadNettobedarfClick


(******************************************************************************)
(***                 BTN_LoadOutlook: OnClick                               ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadOutlookClick(Sender: TObject);
var
   AOutlookAufgabeParams : TOutlookAufgabeParams;
   s : string;
begin
inherited;
with AOutlookAufgabeParams do
     begin
          mQuelle := 'L';
          s := rs_LV_ArtNr;
          mSubject := Format(rs_LV_AufgabeVonBIOS2000,[s, CurrArtNr, EDT_KB.Text, '']);
          mBody    := rs_LV_EnterBody;
          mDueDate := GetLinkagePointer^.TagesDatum+1;
          mReminderTime := mDueDate + (60*8/(24*60));
          mBilling := '';
          mCategories := 'BIOS';
          mCompanies := '';
          mMileage := '';
          mKuNu := 0;
          mAuftragNr := 0;
          mAuftragPos := 0;
          mBIOSEMailAdr := '';
          mImportance := 1;
          mStartDate := now;
          CallSetupOutlookAufgabe(AOutlookAufgabeParams);
     end; //** with AOutlookAufgabeParams do
end; //** procedure BTN_LoadOutlookClick

(******************************************************************************)
(***                  BTN_LoadAKK: OnClick                                  ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadAKKClick(Sender: TObject);
var
   FSichtenAKLagerParams : TSichtenAKLagerParams;
   i : integer;

begin
inherited;
if ModalCallActive then
   Exit;
with FSichtenAKLagerParams do
     begin
          AArtNr := AQY_ArtikelStammARTNR.AsString;
          ABez_1 := AQY_ArtikelStammBEZ_1.AsString;
          AKuNuVon := 0;
          AKuNuBis := LastKreditor;
          //** 24.02.10:
          //** when (PRIV_KLB <> 'B') dann würde ich hier generell
          //** eine Einschränkung der KD-Von-BIS machen
          with GetlinkagePointer^ do
               if (Serial = KSerial_AllColor) and (PRIV_KLB = 'K') then
                   AKuNuBis := LastDebitor;
          AMethode := 0;
          APos := 0;
          AForm := Self;
     end; //** with FSichtenAKParams do
try
   ModalCallActive := true;
   i := Call (dnDobosCommon, 'sichtenaklager', @FSichtenAKLagerParams);
finally
   ModalCallActive := false;
end; //** try..finally

end; //** procedure BTN_LoadAKKClick(Sender: TObject)


(******************************************************************************)
(***                BTN_LoadSonderpreise: OnClick                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadSonderpreiseClick(Sender: TObject);
var
   FPflegenSoPreisParams : TPflegenSoPreisParams;
   i : integer;

begin
inherited;
if ModalCallActive then
   Exit;
with FPflegenSoPreisParams do
     begin
          AKuNu := 0;
          AKB := AQY_ArtikelStammKB.AsString;
          AArtNr := TrimRight(AQY_ArtikelStammARTNR.AsString);
          AFunction := 2;
          AWS             := 0;
          AEinzelpreis    := 0.00;
          ARabatt         := 0.00;
          ASachnummer1    := '';
          ASachnummer2    := '';
          ADatum          := shbStrToDate('01.01.1950');
          ABisDatum       := shbStrToDate('01.01.1950');
          ANeuerEintrag   := false;
          AForm := Self;
     end; //** with FPflegenSoPreisParams do
try
   ModalCallActive := true;
   i := Call (dnDobosCommon, 'pflegensopreis', @FPflegenSoPreisParams);
finally
   ModalCallActive := false;
end; //** try..finally


end; //** procedure BTN_LoadSonderpreiseClick


(******************************************************************************)
(***                BTN_LoadDruckEtikett: OnClick                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadDruckEtikettClick(Sender: TObject);
var
   AufkleberArt,
   p : integer;
   Info     : TBiosPrnInfo;
   dummy,
   MBiosSpool,
   MSofortDruck : boolean;
   klEmpty      : boolean;

                 (*************************************************************)
                 (***       lokale procedure OutputForExternal              ***)
                 (*************************************************************)
                  procedure OutputForExternal;
                  var
                     fLabelParams : TLabelParams;
                     AList : TStringList;
                     i  : integer;
                     x  : PLagerMemKey;
                     ArtNr : string;

                     ALager   : integer;
                     AOrt     : string;
                     ABestand : string;
                     ALieferant : integer;
                     AValues : array [0..0] of Variant;
                  begin

                  ShowSQLWait;

                  //** Loop durch die KeyList
                  try
                     KeyIndex := 0;
                     AList := TStringList.Create;
                     AList.Clear;

                     with GetLinkagePointer^ do
                          begin
                               //** ML do not localize
                               AList.Add('[B2K]'+Format('%4.4d',[Serial]));
                               AList.Add('[MANDANT]'+IntToStr(MRecord.Mandant));
                               AList.Add('[DATENQUELLE]'+'LAGER');
                               AList.Add('[DATENKEY]ARTNR');
                               //** ML do not localize
                               AList.Add('[DATENKENNUNG]ArtikelMitAnzahl');
                               AList.Add('[DATEN]');
                          end; //** with GetLinkagePointer^ do

                     BTN_LoadErwSucheLV.Enabled := false;
                     for i := 0 to KeyList.Count-1 do
                         try
                            x := KeyList.items[i];
                            ArtNr := x.MArtNr;
                            AList.Add(TrimRight(ArtNr)+EXPTrenner+'1'+EXPTrenner);
                         except
                            on E:Exception do
                               begin
                                    UnShowSQLWait;
                                    ShowMessage(E.Message);
                               end; //** On E:Exception do
                         end; //** try..except


                  finally
                     try
                        ClipBoard.Open;
                        Clipboard.AsText := AList.Text;
                     finally
                       Clipboard.Close;
                     end; //** try..finally

                     UnShowSQLWait;
                     fLabelParams.ReportType := rtLagerSTDAKClipboard;
                     try
                        ShowPrintWait;
                        CallLabelGen(fLabelParams);
                     finally
                        UnShowPrintWait;
                     end; //** try..finally

                     if Assigned(AList) then
                        FreeAndNil(AList);
                     BTN_LoadErwSucheLV.Enabled := true;
                     KeyIndex := 0;
                     UnShowSQLWait;

                  end; //** try..finally vom Ausgabeloop

                  end; //** lokale procedure OutputForExternal

(******************************************************************************)
(***   Start der procedure BTN_LoadDruckEtikett: OnClick                    ***)
(******************************************************************************)
begin

inherited;
if Erfassen then
   Exit;

if CheckPrinterBusy then
   Exit;

klEmpty := KeyList.Count < 1;

if (GetLinkagePointer^.Module[imB2RepGen]) then
    AufkleberArt := GetVarRDGDlg (rs_LV_Aufkleberart,
                                [rs_LV_einbahnigMatrixdrucker,rs_LV_zweibahnigLaserdrucker,rs_LV_BarcodeLaser, rs_LV_externesEtikettenprogramm],
                                 3,
                                false,
                                dummy,
                                dummy)
else
   AufkleberArt := GetVarRDGDlg (rs_LV_Aufkleberart,
                             [rs_LV_einbahnigMatrixdrucker,rs_LV_zweibahnigLaserdrucker,rs_LV_BarcodeLaser],
                              1,
                              false,
                              dummy,
                              dummy);

if AufkleberArt < 0 then
   Exit;

if (AufkleberArt <> 3) then
   begin
        p := GetVarRDGDlg (GetStdRes(frs_STD_Ausgabeeinheit),
                          [GetStdRes(frs_STD_AusgabeScreen),GetStdRes(frs_STD_AusgabePrinter)],
                          1,
                          true,
                          MBiosSpool,
                          MSofortDruck);
        if p < 0 then
           Exit;

        if p = 1 then
           if not DLGP_Print.Execute then
              Exit;

        case p of
             0 : OutDevice := odevScreen;
            else OutDevice := odevLaserH;
        end; //** case p of

        (******************************************************************************)
        (***  Druckerparameter initialisieren, evtl. Device setzen (Matrix)         ***)
        (******************************************************************************)
        FillChar(Info,SizeOf(Info),#0);
        if not BiosPrinterInfo(Printer.Printers[Printer.PrinterIndex],Info) then
           begin
                ShowMessage(GetStdRes(frs_STD_NeedPrinterSetup));
                raise EAbort.Create('');
           end;

        if (Info.DruckerTyp = 'MATRIX') and (p <> 0) then
           OutDevice := odevMatrix;

        if ((AufkleberArt = 0) and (OutDevice = odevLaserH)) then
           begin
                ShowMessage(rs_LV_OnlyMatrix);
                raise EAbort.Create('');
           end;
   end; //** if AufkleberArt <> 3

try
   if klEmpty then
      BTN_MarkSmallClick(BTN_MarkSmall);
   if (AufkleberArt = 3) then
      OutputForExternal
   else
      if not StartPrintLVAK (OutDevice,
                             MBiosSpool,
                             MSofortDruck,
                             Info,
                             AufkleberArt,
                             KeyList,
                             AQY_ArtikelStamm.Connection,
                             Self) then
         ShowMessage (GetStdRes(frs_STD_StartPrintoutFailed));
finally
   if klEmpty then
      begin
           KeyList.Clear;
           KeyIndex := -1;
           BGP_SelNavBarGruppe.Visible := ivNever;
      end; //** if klEmpty
   UpdateButtons;
end; //** try..finally

end; //** procedure BTN_LoadDruckEtikettClick


(******************************************************************************)
(***               BTN_LoadStrukturstueckliste: OnClick                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadStrukturstuecklisteClick(Sender: TObject);
var
   MArtNr,
   ArtNr,
   ArtBez : string;
   FSLStrukturParams : TSLStrukturParams;

begin
inherited;

with GetLinkagePointer^ do
     begin
          if (Priv_Dobos <> Ja) then
             begin
                  NoPrivilege;
                  Exit;
             end; //** if ((Priv..
     end; //** with MainLinkage^ do

if (not GetLinkagePointer^.Module[imSL]) then
   begin
        NotInstalled(rs_StuecklistenModul);
        Exit;
   end; //** if (not MainLinkage^.Module[imSL])

MArtNr := TrimRight(AQY_ArtikelStammARTNR.AsString);
ArtNr := MArtNr;
ArtBez := AQY_ArtikelStammBEZ_1.AsString;

if not (isSpace(ArtNr)) then
   with FSLStrukturParams do
        begin
             AFunction := 2;
             AArtNr := ArtNr;
             ABez1 := ArtBez;
             if ((GetLinkagePointer.Serial = KSerial_Schnierle) or
                 (GetLinkagePointer.Serial = KSerial_Yamaichi)) then
                ATiefe := 14
             else
                //** 11.1
                ATiefe := 14;
                //ATiefe := 1;
             if (GetLinkagePointer.Serial = KSerial_Klotz) then   //** 02.10.2015 SM und 12.04.2016 *OB
                ATiefe := 1;
             AVariante := GetVariantenNummer(ArtNr, true);
             if AVariante = -1 then
                Exit;
             ASW1 := 0;
             ASW2 := 0;
             ASW3 := 0;
             ARevision := 0;
             AMenge := 0;
             AReturnArtNr := '';
             AReturnList := nil;
             AComponent := Self;
             if Call (dnDobosSuchen, 'sichtenslstruktur', @FSLStrukturParams) = 0 then
                ShowMessage(rs_LV_SichtenStuecklistenstrukturFehlgeschlagen)
             else
                if not (IsSpace(AReturnArtNr)) then
                   try
                      AQY_ArtikelStamm.Cancel;
                      if not PosMain(AReturnArtNr, '', mpExact, false) then
                         begin
                              CloseDataSources;
                              EDT_ArtNr.Text := MArtNr;
                              EDT_KB.Text := '';
                              EDT_ZN.Text := '';
                              EDT_BN.Text := '';
                              EDT_Bez_1.Text := '';
                         end; //** if not PosMain(AReturnArtNr, '', mpExact, false)
                   finally
                      SortOrder := asArtNr;
                      SetzeKey;
                      UpdateButtons;
                      if EDT_ArtNr.CanFocus then
                         EDT_ArtNr.SetFocus;
                   end; //** try..finally
        end; //** with FSLStrukturParams do
end; //** procedure BTN_LoadStrukturstuecklisteClick


(******************************************************************************)
(***                  BTN_LoadXref: OnClick                                 ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadXrefClick(Sender: TObject);
var
   FSLXRefParams : TSLXRefParams;
   b             : boolean;
   OldKeyIndex   : integer;

begin

inherited;
OldKeyIndex := KeyIndex;
with KeyList do
     begin
          if Count > 0 then
             case AskSelektionVerwerfen of
                  mrYes    : begin
                                  KeyList.Clear;
                                  KeyIndex := -1;
                                  OldKeyIndex := -1;
                             end;
                  mrCancel : Exit;
             end;
          //** Trellowunsch JC beim aktuellen Artikel bleiben *DB
          //KeyIndex := -1;
     end; //** with KeyList do

BGP_SelNavBarGruppe.Visible := ivNever;

with FSLXRefParams do
     begin
          AFunction := 0;
          AArtNr := EDT_ArtNr.Text;
          ABez1 := EDT_BEZ_1.Text;
          AReturnArtNr := '';
          AReturnArtBez := '';
          AReturnVariante := 0;
          AKeyList := KeyList;
          AComponent := Self;
          if not (Call (dnDobosSuchen, 'sichtenxref', @FSLXRefParams) = 1) then
                 ShowMessage(rs_LV_AufrufGescheitert)
          else
              if (KeyList.Count > 0) then
                 begin
                      //** Trellowunsch JC beim aktuellen Artikel bleiben *DB
                      //KeyIndex := 0;
                      if OldKeyIndex > -1 then
                         KeyIndex := OldKeyIndex
                      else
                         KeyIndex := 0;
                      MoveToKey;
                      BGP_SelNavBarGruppe.Visible := ivAlways;
                      UpdateNavi;
                      UpdateButtons;
                 end //** if ((KeyList.Count > 0) and (i <> 0))
             else
                 if not (IsSpace(AReturnArtNr)) then
                    try
                       AQY_ArtikelStamm.Cancel;
                       try
                          b := PosMain(AReturnArtNr, '', mpExact, false);
                       except
                           on E:Exception do
                              ShowMessage(E.Message);
                       end; //** try..except
                       if not b then
                          begin
                               CloseDataSources;
                               EDT_ArtNr.Text := '';
                               EDT_KB.Text := '';
                               if EDT_KB.CanFocus then                               
                                  EDT_KB.SetFocus;
                          end; //** if not TBL_VArtikelStamm.FindKey([i])
                    finally
                       if EDT_ArtNr.CanFocus then
                          EDT_ArtNr.SetFocus;
                       SortOrder := asArtNr;
                       SetzeKey;
                    end; //** try..finally
     end; //** with FSLXRefParams do

end; //** procedure BTN_LoadXrefClick


(******************************************************************************)
(***                    BTN_LoadSX: OnClick                                 ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadSXClick(Sender: TObject);
begin
inherited;
with GetLinkagePointer^ do
     begin
          if ((Priv_Dobos <> Ja) or (Priv_SL <> Ja)) then
             begin
                  NoPrivilege;
                  Exit;
             end; //** if ((Priv..
     end; //** with MainLinkage^ do

if (not GetLinkagePointer^.Module[imSL]) then
   begin
        NotInstalled(rs_StuecklistenModul);
        Exit;
   end; //** if (not MainLinkage^.Module[imSL])

GetLinkagePointer^.LinkString128 := Trim(EDT_ArtNr.Text);
LoadDll(dnDobosSX, ctyNormal, 'L');

end; //** procedure BTN_LoadSXClick


(******************************************************************************)
(***                      BTN_LoadAR: OnClick                               ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadARClick(Sender: TObject);
begin
inherited;
MNI_SiArchivClick(nil);
end; //** procedure BTN_LoadARClick


(******************************************************************************)
(***                 BTN_LoadFE: OnClick                                    ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadFEClick(Sender: TObject);
var
   FSuchFEParams : TSuchFEParams;
   FSuchSTDParams : TSuchSTDParams;
   m             : integer;
   Dummy         : boolean;
   s1,
   s2            : string;

   //** 11.1
   MemKeyList    : TSHBDynamicArray;
   i,r           : integer;
   LinkList      : TStringList;
   s             : string;
   x             : PFEKeyRecord;

begin
inherited;
with GetLinkagePointer^ do
     if not (PRIV_DAVOS = Ja) then
        begin
             NoPrivilege;
             Exit;
        end; //** if not (PRIV_DAVOS = Ja)

m := GetVarRDGDlg (rs_LV_AnzeigenVon,
                   [rs_LV_FertigungsauftraegenKopf,
                    rs_LV_FertigungsauftraegenPosten,
                    rs_LV_FertigungsauftraegenSL],
                   0,
                   false,
                   Dummy,
                   Dummy);
if m < 0 then
   Exit;

if m in [0, 1, 2] then
   with FSuchFEParams do
        try
           AFunction := 1;
           if m = 1 then
              AFunction := 9;
           if m = 2 then
              AFunction := 8;
           AKuNu := 0;
           ANummer := 0;
           AAuftragPosition := 0;
           ABarcode := 0;
           AArtNr := EDT_ArtNr.Text;
           AWhereString := '';
           ASelBitMap := nil;
           ASelLagerBitMap := nil;
           AListPointer := nil;
           AComponent := Self;

           //** 11.1
           MemKeyList := TSHBDynamicArray.Create(100, SizeOf(TFEKeyRecord)); //** Liste für Auftrags-RecordSet
           AListPointer := MemKeyList;
           LinkList := TStringList.Create;
           try
              r := Call (dnDavosCommon, 'suchenfe', @FSuchFEParams);
              if ((r = 0) and (MemKeyList.Count > 0)) then
                 begin
                      LinkList.Clear;
                      LinkList.Add('START_DVFE');
                      for i := 0 to MemKeyList.Count -1 do
                          begin
                               x := MemKeyList.Items[i];
                               s :=  Format('%5.5d',[x.AKUNU])
                                              +Format('%9.9d',[x.ANUMMER])
                                              +Format('%9.9d',[x.AAUFTRAGPOSITION]);
                               LinkList.Add(s);
                          end;
                      LinkList.Add('END_DVFE');
                      if LinkList.Count > 2 then
                         try
                             ClipBoard.Open;
                             Clipboard.AsText := LinkList.Text;
                         finally
                            Clipboard.Close;
                         end; //** try..finally
                      GetLinkagePointer^.LinkPointer2 := Pointer(Integer(mlDVFa));
                      LoadDll(dnDavosFE, ctyNormal, 'Q');

                 end //** if ((r = 0) and (MemKeyList.Count > 0))
              else
                 if r = 1 then
                    if ((ANummer <> 0) and (AAuftragPosition <> 0)) then
                       begin
                            with GetLinkagePointer^ do
                                 begin
                                      LinkLastKuNu := AKuNu;
                                      LinkInteger1 := ANummer;
                                      LinkInteger2 := AAuftragPosition;
                                 end; //** with GetLinkagePointer^ do
                            LoadDll(dnDavosFE, ctyNormal, 'L');
                       end; //** if ((ANummer <> 0) and (AAuftragPosition <> 0))
              finally
                 FreeAndNil(LinkList);
                 if Assigned(MemKeyList) then
                    try
                       MemKeyList.Free;
                    except
                    end; //** try..except
                 MemKeyList := nil;
              end; //** try..finally

        except
           on E:Exception do
              ShowMessage(E.Message);
        end //** try..except

end; //** procedure BTN_LoadFEClick


(******************************************************************************)
(***                      BTN_LoadAP: OnClick                               ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadAPClick(Sender: TObject);
var
   FSuchFEParams : TSuchFEParams;
   FSuchSTDParams : TSuchSTDParams;
   m             : integer;
   Dummy         : boolean;
   s1,
   s2            : string;

   //** 11.1
   MemKeyList    : TSHBDynamicArray;
   i,r           : integer;
   LinkList      : TStringList;
   s             : string;
   x             : PFEKeyRecord;
   AValues : array [0..0] of Variant;

begin

inherited;
with GetLinkagePointer^ do
     if not (PRIV_DV_AP = Ja) then
        begin
             NoPrivilege;
             Exit;
        end; //** if not (PRIV_DAVOS = Ja)

m := GetVarRDGDlg (rs_LV_AnzeigenVon,
                   [rs_LV_ArbeitsplaenenKopf,
                    rs_LV_ArbeitsplaenenPosten],
                   0,
                   false,
                   Dummy,
                   Dummy);
if m < 0 then
   Exit;

if m in [0,1] then
   with FSuchSTDParams do
        try
           if m = 0 then
              begin
                   AFunction := 0;
                   AHauptArtNr := EDT_ArtNr.Text;
              end
           else
              begin
                   AFunction := 1;
                   AHauptArtNr := EDT_ArtNr.Text;
              end; //**
           ARevision := '';
           AWhereString := '';
           ASelBitMap := nil;
           ASelLagerBitMap := nil;
           AListPointer := nil;
           AComponent := Self;
           if Call (dnDavosCommon, 'suchenstd', @FSuchSTDParams) = 1 then
              if ((not IsSpace(AHauptArtNr))) then
                 begin
                      with GetLinkagePointer^ do
                           begin
                                s1 := AHauptArtNr;
                                s2 := ARevision;
                                shbExpandString(s1, LengthOfArtNr, ' ', false);
                                shbExpandString(s2, 3, ' ', false);
                                LinkString128 := s1+s2;

                                //** GueBeme für AP
                                LinkCurr := 1;
                                if ReadAnyFields (GetDobosADB,
                                                 'ARTIKEL_STAMM',
                                                 'WHERE ARTNR = '''+Trim(AHauptArtNr)+''' ',
                                                 ['GUE_BEME'],
                                                 AValues) then
                                   try
                                      LinkCurr := AValues[0];
                                   except
                                   end; //** try..except

                           end; //** with GetLinkagePointer^ do
                      LoadDll(dnDavosSA, ctyNormal, 'L');
                 end; //** if ((not IsSpace(AHauptArtNr)))
        except
           on E:Exception do
              ShowMessage(E.Message);
        end; //** try..except

end; //** procedure BTN_LoadAPClick


(******************************************************************************)
(***                   BTN_LoadFEArchiv: OnClick                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadFEArchivClick(Sender: TObject);
var
   FSuchFEArchivParams : TSuchFEArchivParams;
   res                 : integer;
begin
inherited;
with GetLinkagePointer^ do
     if (not (PRIV_DAVOS = Ja)) then
        begin
             NoPrivilege;
             Exit;
        end; //** if not (PRIV_DAVOS = Ja)

with FSuchFEArchivParams do
     begin
          AFunction := 0;
          AProgramm := 'L';
          AKuNu := 0;
          AArtNr := EDT_ArtNr.Text;
          SelJAHR := 0;
          SelArchivNummer := 0;
          AComponent := Self;
          AListPointer := nil;
          res := Call (dnDavosCommon, 'suchenfearchiv', @FSuchFEArchivParams);
     end; //** with FSuchFEArchivParams do

end; //** procedure BTN_LoadFEArchivClick


(******************************************************************************)
(***                 BTN_LoadVertraege: OnClick                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadVertraegeClick(Sender: TObject);
var
   res             : integer;
   FSuchVertragParams  : TSuchVertragParams;

begin
inherited;
if ModalCallActive then
   Exit;
with GetLinkagePointer^ do
     begin
          if ((Priv_Dobos <> Ja) or
              (PRIV_WV = Nein)) then
             begin
                  NoPrivilege;
                  Exit;
             end; //** if ((Priv..
     end; //** with GetLinkagePointer^ do

with FSuchVertragParams do
     begin
          AFunction := 0;
          AKuNu := 0;
          ANummer := 0;
          AArtNr := TrimRight(EDT_ArtNr.Text);
          ASerial := '';
          AComponent:= Self;
          ACallingProg := 'L';
          AListPointer := nil;
          ABaseDate := Trunc(now);
          try
             ModalCallActive := true;
             res := Call (dnDobosCommon, 'suchenvertrag', @FSuchVertragParams);
          finally
             ModalCallActive := false;
          end; //** try..finally

          if res = 1 then
             with GetLinkagePointer^ do
                  if (PRIV_WV = Ja) then
                     if ((ANummer <> 0) and (AKuNu <> 0)) then
                        begin
                             with GetLinkagePointer^ do
                                  begin
                                       LinkLastKuNu := AKuNu;
                                       LinkInteger1 := ANummer;
                                       LinkInteger2 := 0;
                                  end; //** with GetLinkagePointer^ do
                             if ((isProfi) or (MessageDlg(rs_LV_VertragLaden, mtConfirmation,[mbYes,mbNo],0) = mrYes)) then
                                LoadDll(dnDobosWV, ctyNormal, 'L');
                        end; //** if ((ANummer <> 0) and (AKuNu <> 0))
     end; //** with FSuchVertragParams do

end; //** procedure BTN_LoadVertraegeClick


(******************************************************************************)
(***              BTN_LoadWichtigeHinweise: OnClick                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadWichtigeHinweiseClick(Sender: TObject);
var
   fAction : TInfoBlattAction;

begin

inherited;
if ((Erfassen) and
    (IsSpace(LastErfassenSemaphore))) then
   Exit;

if Erfassen then
   NeuEingabeAktiv := true;

if ((Erfassen) or (Aendern)) then
   fAction := iblAendern
else
   fAction := iblSichten;

if not CallInfoBlatt('w', AQY_ArtikelStammARTNR.AsString, Format('%s / %s',[AQY_ArtikelStammARTNR.AsString, AQY_ArtikelStammBEZ_1.AsString]),fAction) then
   ShowMessage(rs_LV_CallWHFailed)
else
   LastHinweisArtNr := AQY_ArtikelStammARTNR.AsString;

CheckHinweise(false);

end; //** procedure BTN_LoadWichtigeHinweiseClick


(******************************************************************************)
(***                BTN_LoadRO: OnClick                                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadROClick(Sender: TObject);
var
   res             : integer;
   FSuchROParams   : TSuchROParams;

begin

inherited;
if ModalCallActive then
   Exit;

with GetLinkagePointer^ do
     begin
          if ((Priv_Dobos <> Ja) or
              (PRIV_RO = Nein)) then
             begin
                  NoPrivilege;
                  Exit;
             end; //** if ((Priv..
     end; //** with GetLinkagePointer^ do

with FSuchROParams do
     begin
          AFunction := 0;
          AKuNu := 0;
          ANummer := 0;
          AArtNr := TrimRight(EDT_ArtNr.Text);
          ASerial := '';
          AComponent:= Self;
          ASelBitMap   := nil;
          ASelKdBitMap := nil;
          ACallingProg := 'K';
          AListPointer := nil;
          try
             ModalCallActive := true;
             res := Call (dnDobosCommon, 'suchenro', @FSuchROParams);
          finally
             ModalCallActive := false;
          end; //** try..finally

          if res = 1 then
             with GetLinkagePointer^ do
                  if (PRIV_RO = Ja) then
                     if ((ANummer <> 0) and (AKuNu <> 0)) then
                        begin
                             with GetLinkagePointer^ do
                                  begin
                                       LinkLastKuNu := AKuNu;
                                       LinkInteger1 := ANummer;
                                       LinkInteger2 := 0;
                                  end; //** with GetLinkagePointer^ do
                             if ((isProfi) or (MessageDlg(rs_LV_ReparaturauftragLaden, mtConfirmation,[mbYes,mbNo],0) = mrYes)) then
                                LoadDll(dnDobosRO, ctyNormal, 'L');
                        end; //** if ((ANummer <> 0) and (AKuNu <> 0))
     end; //** with FSuchROParams do

end; //** procedure BTN_LoadROClick


(******************************************************************************)
(***                    BTN_LoadDruck: OnClick                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadDruckClick(Sender: TObject);
var
   FLVDruckprogrammeStart : TLVDruckprogrammeStart;
   r : integer;
   b : boolean;

begin

inherited;

with GetLinkagePointer^ do
     if not (PRIV_LISTEN_DRUCK = 'J') then
        begin
             NoPrivilege;
             Exit;
        end; //** if not (PRIV_LISTEN_DRUCK = 'J')
b := DTS_Open;
CloseDataSources;
with FLVDruckprogrammeStart do
     begin
          AForm  := self;
          if Sender = BTN_LoadNBListe then
             ALoadNB := true
          else
             ALoadNB := false;
          ALoadNBPoolFuerGanzFaule := false;
     end; //** with FPflegeSchluesselParams do

r := Call (dnLVPrint, 'druckprogrammelv', @FLVDruckprogrammeStart);
if b then
   OpenDataSources;
UpdateButtons;

end; //** procedure BTN_LoadDruckClick


(******************************************************************************)
(***                   BTN_LoadInventur: OnClick                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadInventurClick(Sender: TObject);
var
   r : integer;
   b : boolean;

begin

inherited;
with GetLinkagePointer^ do
     if not (PRIV_EK = 'J') then
        begin
             NoPrivilege;
             Exit;
        end; //** if not (GetLinkagePointer^.PRIV_DOBOS_ABSCHLUSS = 'J'

b := DTS_Open;
CloseDataSources;
r := Call (dnLVPrint, 'lagerinventur', Self);
if b then
   OpenDataSources;
UpdateButtons;

end; //** procedure BTN_LoadInventurClick


(******************************************************************************)
(***                BTN_LoadInfoCenterLager: OnClick                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadInfoCenterLagerClick(Sender: TObject);
begin

inherited;
with GetLinkagePointer^ do
     begin
          if not ((PRIV_INFO_CENTER = Ja) or (PRIV_INFO_CENTER = 'L')) then
             begin
                  NoPrivilege;
                  Exit;
             end; //** if ((Priv..
     end; //** with GetLinkagePointer^ do

LoadDll(dnDobosIL, ctyNormal, ' ');

end; //** procedure BTN_LoadInfoCenterLagerClick


(******************************************************************************)
(***              BTN_LoadBestandsKorrektur: OnClick                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadBestandsKorrekturClick(Sender: TObject);
var
   r : integer;
   b : boolean;

begin

inherited;
with GetLinkagePointer^ do
     if ((not (PRIV_SCHNELL_AENDERN in ['J', 'L'])) or
         (Priv_Nur_Sichten = Ja)) then
        begin
             NoPrivilege;
             Exit;
        end; //** if not (GetLinkagePointer^.PRIV_SCHNELL_AENDERN = 'J' ...
b := DTS_Open;
//** 24.06.2022 *DB Wunsch Schäfer
//** Daten stehen lassen wegen Lagerdaten
//CloseDataSources;

GetLinkagePointer^.LinkLastArtNr := CurrArtnr;
r := Call (dnLVPrint, 'lagerkorrektur', Self);
if b then
   try
      BTN_NavRefreshClick(BTN_NavRefresh);
   except
   end;
//   OpenDataSources;
UpdateButtons;

end; //** procedure BTN_LoadBestandsKorrekturClick


(******************************************************************************)
(***              BTN_LoadChaotLager: OnClick                               ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadChaotLagerClick(Sender: TObject);
begin
inherited;

if IsSpace(EDT_ArtNr.Text) then
   Exit;
GetLinkagePointer^.LinkString128 := EDT_ArtNr.Text;
LoadDll(dnDobosCL, ctyNormal, 'L');

end; //** procedure BTN_LoadChaotLagerClick


(******************************************************************************)
(***                 BTN_LoadPreisKalkulation: OnClick                      ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadPreisKalkulationClick(Sender: TObject);
var
   r : integer;
   b : boolean;
   LVPreisKalkParams : TLVPreisKalkParams;

begin
inherited;
with GetLinkagePointer^ do
     if ((not (PRIV_DOBOS_ABSCHLUSS = Ja)) or
       ((not (PRIV_VK = Ja)) and (not (PRIV_EK = Ja))) or
         (Priv_Nur_Sichten = Ja)) then
        begin
             NoPrivilege;
             Exit;
        end; //** if not (GetLinkagePointer^.PRIV_DOBOS_ABSCHLUSS = 'J' ...
b := DTS_Open;
CloseDataSources;

with LVPreisKalkParams do
     begin
          AFunction := 0;
          AIsEK := False;
          AArtNr := '';
          AArt := '';
          ALiefNummer := 0;
          APreisNummer := 0;
          AWS := 0;
          AForm := Self;
          r := Call (dnLVPrint, 'preisekalk', @LVPreisKalkParams);
     end; //** with LVPreisKalkParams do
if b then
   OpenDataSources;
UpdateButtons;
end; //** procedure BTN_LoadPreisKalkulationClick


(******************************************************************************)
(***             BTN_LoadZusatzDokumente: OnClick                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadZusatzDokumenteClick(Sender: TObject);
var
   FPflegeBlobParams : TPflegeBlobParams;
   i : integer;

begin
inherited;
if ModalCallActive then
   Exit;
if ((Erfassen) and
    (IsSpace(LastErfassenSemaphore))) then
   Exit;
if IsSpace(AQY_ArtikelStammARTNR.AsString) then
   Exit;

with FPflegeBlobParams do
     begin
          AKuNu := 0;
          //** 11.2 3515a - verhindert das Datumsupdate, sonst "zwischenzeitlich Datensatz geändert..."
          //** 12.0 Fehler kommt jetzt noch wenn anschließend erst der Edit-Modus gesetzt wird // 29.01.2021 PI
          //if AQY_ArtikelStamm.State <> dsBrowse then
          //   AKuNu := -1;
          AArtNr := TrimRight(AQY_ArtikelStammARTNR.AsString);
          AKB := AQY_ArtikelStammBEZ_1.AsString;
          AFunction := 0;
          AForm := Self;
     end; //** with FPflegeBlobParams do

try
   ModalCallActive := true;
   i := Call (dnDobosCommon, 'inputartikelfile', @FPflegeBlobParams);
finally
   ModalCallActive := false;
   CheckIB;
   CheckZusatzInfosZusatzDokumente(TrimRight(AQY_ArtikelStammARTNR.AsString),false);
   SetHintsAndBadge;
end; //** try..finally

end; //** procedure BTN_LoadZusatzDokumenteClick


(******************************************************************************)
(***                   BTN_LoadDocViewer: OnClick                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadDocViewerClick(Sender: TObject);
var
   CmdLine : string;
   Path    : string;
   s       : string;
   Feld    : string;
   r       : integer;

begin
inherited;
if not GetLinkagePointer^.Module[imB2DocView] then
   begin
        //** no not Localize
        NotInstalled('BIOS DocViewer');
        Exit;
   end; //** if GetLinkagePointer^.Module[imB2DocView]

s := 'A';
if not GetSetViewerPath(Path, false, s) then
   if not GetSetViewerPath(Path, true, s) then
      Exit;

if s = 'B' then
   Feld := AQY_ArtikelStammBN.AsString
else
   if s = 'Z' then
      Feld := AQY_ArtikelStammZN.AsString
   else
      if s = 'X' then
         Feld := AQY_ArtikelStammBEZ_1.AsString
      else
         if s = 'P' then
            if (not (isSpace(AQY_ArtikelStammVIEWER_PFAD.AsString))) then
               Feld := AQY_ArtikelStammVIEWER_PFAD.AsString
            else
               Feld := AQY_ArtikelStammZN.AsString
            else
               //** Rheonik
               if s = 'Y' then
                  if (not (isSpace(AQY_ArtikelStammVIEWER_PFAD.AsString))) then
                     Feld := AQY_ArtikelStammVIEWER_PFAD.AsString+'||'+AQY_ArtikelStammZN.AsString
                  else
                     Feld := AQY_ArtikelStammZN.AsString
               else
                  Feld := AQY_ArtikelStammARTNR.AsString;

Feld := TrimRight(Feld);
Path := ExtractFilePath(Application.ExeName)+'BiosDocViewer.EXE';
with GetLinkagePointer^ do
     CmdLine := Path+Format(' A%2.2d_%3.3d ',[MRecord.Mandant, UserNummer])+Feld;

try
   try
      GetMem(xBuffer, Length(CmdLine)+1);
      StrPCopy(xBuffer, CmdLine);
      r := WinExec(xBuffer, SW_SHOWNORMAL);
      if r < 32 then
         raise EAbort.Create('');
   finally
      Freemem(xBuffer, Length(CmdLine)+1);
   end;
except
   MessageDlg(GetStdRes(frs_STD_QCannotLoadViewer),mtError,[mbOK],0)
end; //** try..except

end; //** procedure BTN_LoadDocViewerClick


(******************************************************************************)
(***                  BTN_LoadDrDoc: OnClick                                ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadDrDocClick(Sender: TObject);
var
   mArtNr : string;

begin

inherited;
if (not (AQY_ArtikelStamm.Active)) then
   Exit;
if GetLinkagePointer^.Module[imDrDoc] then
   begin
        mArtNr := TrimRight(AQY_ArtikelStammARTNR.AsString);
        if isSpace(mArtNr) then
           Exit;
        CallDrDoc(-1,
                  mArtNr,
                  -3);
   end; //** if GetLinkagePointer^.Module[imDrDoc]
end; //** procedure BTN_LoadDrDocClick


(******************************************************************************)
(***                   BTN_LoadKontrakte: OnClick                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadKontrakteClick(Sender: TObject);
var
   FSuchKontraktParams : TSuchKontraktParams;
   ArtStr              : string;
   res                 : integer;

begin

inherited;
if (not (GetLinkagePointer^.Module[imVDA]))then
   Exit;
if ModalCallActive then
   Exit;
with FSuchKontraktParams do
     try
        ARufFunction := 0;
        AFunction := 0;
        AKontraktnummer := '';
        AKuNu := 0;
        ANummer := 0;
        ABelegnummer := '';
        AArtNr := AQY_ArtikelStammARTNR.AsString;

        ACallingProg := 'L';
        AComponent:= Self;
        AListPointer := nil;

        if AQY_ArtikelStammPACKMITTEL_IST_PM.AsString = 'J' then
           begin
                if (not (GetLinkagePointer^.Module[imPV]))then
                    Exit;
//** 07.05.2020 Suche erfolgt über Artikelnummer in VDA_ABRUF_POSTEN_PACKMITTEL
//**            ABelegnummer := AQY_ArtikelStammPACKMITTEL.AsString;
                ACallingProg := 'l';
                ARufFunction := 4;
           end; //** if AQY_ArtikelStammPACKMITTEL_IST_PM.AsString = 'J' then

        try
           ModalCallActive := true;
           res := Call (dnDobosSuchen, 'suchenkontrakt', @FSuchKontraktParams);
           if res = 1 then
              with GetLinkagePointer^ do
                   if ((PRIV_AU = Ja) and (PRIV_NUR_SICHTEN <> Ja)) then
                      if ((ANummer <> 0) and (AKuNu <> 0) and (not (IsSpace(AKontraktnummer)))) then
                         begin
                              with GetLinkagePointer^ do
                                   begin
                                        LinkLastKuNu := AKuNu;
                                        LinkInteger1 := ANummer;
                                        LinkString128 := string(AKontraktnummer);
                                        ArtStr := rs_LV_QLoadKontrakt;
                                        LinkInteger2 := AKontraktLfdNr;
                                    end; //** with GetLinkagePointer^ do
                              if ((isProfi) or (MessageDlg(ArtStr,
                                  mtConfirmation,[mbYes,mbNo],0) = mrYes)) then
                                 LoadDll(dnDobosVD, ctyNormal, 'L');
                         end; //** if ((ANummer <> 0) and (AKuNu <> 0)and (not (IsSpace(AKontraktnummer))) then
        finally
           ModalCallActive := false;
           if EDT_ArtNr.CanFocus then
              EDT_ArtNr.SetFocus;
        end; //** try..finally
     except
     end; //** with FSuchKontraktParams do
end; //** procedure BTN_LoadKontrakteClick


(******************************************************************************)
(***                BTN_LoadNeBedarfPool: OnClick                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadNeBedarfPoolClick(Sender: TObject);
var
   FBearbeitenNBPoolParams : TBearbeitenNBPoolParams;
begin

inherited;

if (GetLinkagePointer.Priv_Nur_Sichten = ja) then
   begin
        NoPrivilege;
        Exit;
   end; //** if (GetLinkagePointer.Priv_Nur_Sichten = ja)

if (not (GetLinkagePointer.Module[imNB])) then
   begin
        NotInstalled(rs_Nettobedarf);
        Exit;
   end; //** if (not MainLinkage^.Module[imNB])

with FBearbeitenNBPoolParams do
     begin
          FBearbeitenNBPoolParams.AVonArtNr := CurrArtNr;
          FBearbeitenNBPoolParams.ABisArtNr := CurrArtNr;
          FBearbeitenNBPoolParams.AForm := self;
          Call (dnDobosCommon, 'bearbeitennbpool', @FBearbeitenNBPoolParams);
     end; //** with FBearbeitenBestellpoolParams do

end; //** procedure BTN_LoadNeBedarfPoolClick


(******************************************************************************)
(***                  BTN_NettobedarfspoolAlle: OnClick                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_NettobedarfspoolAlleClick(Sender: TObject);
var
   FLVDruckprogrammeStart : TLVDruckprogrammeStart;

begin

inherited;

with GetLinkagePointer^ do
     if not (PRIV_LISTEN_DRUCK = 'J') then
        begin
             NoPrivilege;
             Exit;
        end; //** if not (PRIV_LISTEN_DRUCK = 'J')

if (GetLinkagePointer.Priv_Nur_Sichten = ja) then
   begin
        NoPrivilege;
        Exit;
   end; //** if (GetLinkagePointer.Priv_Nur_Sichten = ja)

if (not (GetLinkagePointer.Module[imNB])) then
   begin
        NotInstalled(rs_Nettobedarf);
        Exit;
   end; //** if (not MainLinkage^.Module[imNB])

with FLVDruckprogrammeStart do
     begin
          AForm  := self;
          ALoadNB := true;
          ALoadNBPoolFuerGanzFaule := true;
     end; //** with FPflegeSchluesselParams do

Call (dnLVPrint, 'druckprogrammelv', @FLVDruckprogrammeStart);

end; //** procedure BTN_NettobedarfspoolAlleClick


(******************************************************************************)
(***                  BTN_LoadKuSpezPackmittel: OnClick                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadKuSpezPackmittelClick(Sender: TObject);
var
   FPflegenSoPreisParams : TPflegenSoPreisParams;
begin

inherited;
if ModalCallActive then
   Exit;

if ((Erfassen) and
    (IsSpace(LastErfassenSemaphore))) then
   Exit;

if AQY_ArtikelStammPACKMITTEL_IST_PM.AsString = 'J' then
   Exit;

with FPflegenSoPreisParams do
     begin
          AKuNu := 0;
          AKB := AQY_ArtikelStammKB.AsString;
          AArtNr := TrimRight(AQY_ArtikelStammARTNR.AsString);
          AFunction := 2;
          AWS             := 0;
          AEinzelpreis    := 0.00;
          ARabatt         := 0.00;
          ASachnummer1    := '';
          ASachnummer2    := '';
          ADatum          := shbStrToDate('01.01.1950');
          ABisDatum       := shbStrToDate('01.01.1950');
          ANeuerEintrag   := false;
          AForm := Self;
     end; //** with FPflegenSoPreisParams do

try
   ModalCallActive := true;
   Call (dnDobosCommon, 'pflegensonderpm', @FPflegenSoPreisParams);
finally
   ModalCallActive := false;
end; //** try .. finally

end; //** procedure BTN_LoadKuSpezPackmittelClick


(******************************************************************************)
(***               BTN_WerkzeugEntnahme: OnClick                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_WerkzeugEntnahmeClick(Sender: TObject);
begin
inherited;
if GetLinkagePointer^.Serial = KSerial_Pabst then
   Werkzeugentnahme;
end;  //** procedure BTN_WerkzeugEntnahmeClick


(******************************************************************************)
(***    BTN_LoadPackmittelStruktur : OnClick  - 12.0 SM                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadPackmittelStrukturClick(Sender: TObject);
var
   FSichtenPMStrukturParams : TSichtenPMStrukturParams;

begin
inherited;

if not (isSpace(AQY_ArtikelStammARTNR.asString)) then
   with FSichtenPMStrukturParams do
        begin
             APMNR := AQY_ArtikelStammPACKMITTEL.asString;
             AVariante := AQY_ArtikelStammPACKMITTEL_VERSION.AsInteger;
             AArtNr := AQY_ArtikelStammARTNR.asString;
             AFuellmenge := AQY_ArtikelstammPACKMITTEL_STUECK_IN_PM.AsInteger;
             AForm := Self;
             if Call (dnDobosSuchen, 'sichtenpmstruktur', @FSichtenPMStrukturParams) = 0 then
                ShowMessage(GetStdRes(frs_STD_ProgramCallFailed));
        end; //** with FSichtenPMStrukturParams do

end; //** procedure BTN_LoadPackmittelStrukturClick


(******************************************************************************)
(***                   BTN_LoadErwSucheLV: OnClick                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadErwSucheLVClick(Sender: TObject);
var
   SaveSortOrder : TLVSort;
   i : Integer ;
   ArtNr,
   WhereArtNrString,
   WhereString   : string;
   FSuchLVErwParams : TSuchLVErwParams;

begin

inherited;
SaveSortOrder := SortOrder;
ArtNr := '';

with KeyList do
     begin
          if Count > 0 then
             case AskSelektionVerwerfen of
                  mrYes : KeyList.Clear;
                  mrCancel : exit;
             end;
          KeyIndex := -1;
     end; //** with KeyList do

BGP_SelNavBarGruppe.Visible := ivNever;

with FSuchLVErwParams do
     begin
          ASortOrder := SaveSortOrder;
          AKeyList := KeyList;
          ACallFunction := cfSuchLVErwStandard;
          ASelectedArtNr := '';
          AWhereArtNrString := WhereArtNrString;
          AWhereString := WhereString;
          AStream := nil;
     end; //** with FSuchLVErwParams do

i := Call (dnDobosSuchen, 'suchenlverw', @FSuchLVErwParams);
if i = 1 then
   ArtNr := FSuchLVErwParams.ASelectedArtNr;

if (KeyList.Count > 0) then
   begin
        KeyIndex := 0;
        MoveToKey;
        BGP_SelNavBarGruppe.Visible := ivAlways;
        SaveSortOrder := asArtNr;    //** erzwinge ArtNr-Sort
        UpdateNavi;
        UpdateButtons;
   end //** if ((KeyList.Count > 0) and (i <> 0))
else
   if i <> 0 then
      begin
           try
              if not PosMain(ArtNr, '', mpExact, false) then
                 raise EAbort.Create(rs_LV_CouldntFindStammData)
              else
                 begin
                      UpdateRecentList;
                      GetLinkagePointer^.LinkLastArtNr := ArtNr;
                 end;
              UpdateNavi;
           except
              CloseDataSources;
              raise;
           end; //** try..except
      end; //** if i <> 0

Application.ProcessMessages;
UpdateButtons;
end; //** procedure BTN_LoadErwSucheLVClick


(******************************************************************************)
(***               BTN_LoadAuftragsrueckstaende: OnClick                    ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadAuftragsrueckstaendeClick(Sender: TObject);
var
   FKuNu,
   FNummer : integer;
   FLoadFlag : boolean;
   FAktivierenAuftragParams: TAktiverenAuftragParams;
begin

inherited;
with FAktivierenAuftragParams do
     begin
          AKuNu := 0;
          ANummer := 0;
          ALoad := false;
          AForm := Self;
          AFunction := 1;
          AArtikel := EDT_ArtNr.Text;
     end; //** with FAktivierenAuftragParams do

Call(dnDobosCommon, 'aktivierenauftrag', @FAktivierenAuftragParams);

end; //** procedure BTN_LoadAuftragsrueckstaendeClick


(******************************************************************************)
(***    GRD_MinisetViewUNTER_ARTNRProperties: OnButtonClick                 ***)
(******************************************************************************)

procedure TFRM_DobosLV.GRD_MinisetViewUNTER_ARTNRPropertiesButtonClick(Sender: TObject; AButtonIndex: Integer);
var
   FSuchLVParams : TSuchLVParams;
   mData         : array [0..LengthOfArtNr-1] of Char;
   i             : integer;
   locArtnr      : string;
   ARecIndex     : integer;
   Edit          : TcxCustomEdit;
   NewValue       : Variant;

begin

inherited;
if AButtonIndex = 0 then
   begin
        if not DTS_Open then
           OpenDataSources;

        NewValue := '';
        Edit := Sender as TcxCustomEdit;
        if True then

        if not VarIsNull(Edit.EditingValue) then
           NewValue := Edit.EditingValue;

        locArtnr := VarToStr(NewValue);

        with FSuchLVParams do
             begin
                  AAskMode  := false;
                  AArtNr    := locArtnr;
                  ASuchText := locArtnr;
                  AOrderBy  := 0;
                  ASuchFeld := 0;
                  AComponent:= GRD_MinisetView;
             end; //** with FSuchLVParams do

       if Call (dnDobosSuchen, 'suchenlv', @FSuchLVParams) = 1 then
          begin
               if not (AQY_MiniSet.State in [dsEdit, dsInsert]) then
                  Exit
               else
                  if CurrArtNr <> FSuchLVParams.AArtNr then
                     AQY_MiniSetUNTER_ARTNR.AsString := FSuchLVParams.AArtNr;
          end; //** if Call (dnDobosSuchen, 'suchenlv', @FSuchLVParams) = 1
   end;

end; //** procedure GRD_MinisetViewUNTER_ARTNRPropertiesButtonClick


(******************************************************************************)
(***         GRD_MinisetViewUNTER_ARTNRProperties: OnEditValueChanged       ***)
(******************************************************************************)

procedure TFRM_DobosLV.GRD_MinisetViewUNTER_ARTNRPropertiesEditValueChanged(
  Sender: TObject);
var
   AValues : array [0..1] of Variant;
   b       : boolean;
   Edit : TcxCustomEdit;
   NewValue : Variant;
   AArtNr : string;

begin

inherited;
if ReNumFlag then
   Exit;

NewValue := '';
Edit := Sender as TcxCustomEdit;
if not VarIsNull(Edit.EditingValue) then
   NewValue := Edit.EditingValue;

AArtNr := VarToStr(NewValue);

b := ReadAnyFields (GetDobosADB,
                    'ARTIKEL_STAMM',
                    'WHERE ARTNR = '''+Trim(AArtNr)+''' ',
                    ['BEZ_1', 'BEZ_2'],
                     AValues);
if b then
   begin
        try
           AQY_MiniSetBEZ_1.AsString := AValues[0];
        except
           //** ... Eine aus mehreren Schritten...
           AQY_MiniSetBEZ_1.AsString := Copy(AnsiUpperCase(GetStdRes(frs_STD_StammsatzFehlt)),1,30);
        end;
        try
           AQY_MiniSetBEZ_2.AsString := AValues[1];
        except
           AQY_MiniSetBEZ_2.AsString := '';
        end;
   end
else
   begin
        //** ... Eine aus mehreren Schritten...
        AQY_MiniSetBEZ_1.AsString := Copy(AnsiUpperCase(GetStdRes(frs_STD_StammsatzFehlt)),1,30);
        AQY_MiniSetBEZ_2.AsString := '';
   end;

Edit.PostEditValue;

end; //** procedure GRD_MinisetViewUNTER_ARTNRPropertiesEditValueChanged


(******************************************************************************)
(***             GRD_MinisetViewUNTER_ARTNRProperties: OnValidate           ***)
(******************************************************************************)

procedure TFRM_DobosLV.GRD_MinisetViewUNTER_ARTNRPropertiesValidate(
  Sender: TObject; var DisplayValue: Variant; var ErrorText: TCaption;
  var Error: Boolean);
begin

inherited;

Error := false;

if VarToStr(DisplayValue) = CurrArtNr then
  begin
       ErrorText := rs_LV_MiniSetInSichSelbst;
       Error := true;
  end;

end; //** procedure GRD_MinisetViewUNTER_ARTNRPropertiesValidate


(******************************************************************************)
(***    GRD_SonderpreiseDBTableView1PREIS: OnGetCellHint                    ***)
(******************************************************************************)

procedure TFRM_DobosLV.GRD_SonderpreiseDBTableView1PREISGetCellHint(
  Sender: TcxCustomGridTableItem; ARecord: TcxCustomGridRecord;
  ACellViewInfo: TcxGridTableDataCellViewInfo; const AMousePos: TPoint;
  var AHintText: TCaption; var AIsHintMultiLine: Boolean;
  var AHintTextRect: TRect);
var
   FRaster: integer;
   FRasterMengen: array [0..8] of Variant;

         (*********************************************************************)
         (***      lokale function ReadRasterForSP                          ***)
         (*********************************************************************)
          function ReadRasterForSP (ARaster : integer; var ARasterMengen: array of Variant) : boolean;
          var
             i : integer;
          begin
                result := false;
                if ARaster = 0 then
                   Exit;

                for i := Low(ARasterMengen) to High(ARasterMengen) do
                    ARasterMengen[i] := 0;

                if ReadAnyFields (GetDobosADB,
                                  'ARTIKEL_RASTER',
                                  'WHERE NUMMER = '+IntToStr(ARaster),
                                  ['R2','R3','R4','R5','R6','R7','R8','R9','R10'],
                                  ARasterMengen) then
                   try
                      result := true;
                   except
                   end; //** try..except

          end; //** lokale function ReadRasterForSP

begin
inherited;

FRaster := 0;

if not VarIsNull(ARecord.Values[GRD_SonderpreiseDBTableView1RASTER.Index]) then
   FRaster := ARecord.Values[GRD_SonderpreiseDBTableView1RASTER.Index];

if ReadRasterForSP(FRaster, FRasterMengen) then
   begin
        if Sender = GRD_SonderpreiseDBTableView1PREIS_2 then
           AHintText := ' (ab '+IntToStr(FRasterMengen[0])+')';
        if Sender = GRD_SonderpreiseDBTableView1PREIS_3 then
           AHintText := ' (ab '+IntToStr(FRasterMengen[1])+')';
        if Sender = GRD_SonderpreiseDBTableView1PREIS_4 then
           AHintText := ' (ab '+IntToStr(FRasterMengen[2])+')';
        if Sender = GRD_SonderpreiseDBTableView1PREIS_5 then
           AHintText := ' (ab '+IntToStr(FRasterMengen[3])+')';
        if Sender = GRD_SonderpreiseDBTableView1PREIS_6 then
           AHintText := ' (ab '+IntToStr(FRasterMengen[4])+')';
        if Sender = GRD_SonderpreiseDBTableView1PREIS_7 then
           AHintText := ' (ab '+IntToStr(FRasterMengen[5])+')';
        if Sender = GRD_SonderpreiseDBTableView1PREIS_8 then
           AHintText := ' (ab '+IntToStr(FRasterMengen[6])+')';
        if Sender = GRD_SonderpreiseDBTableView1PREIS_9 then
           AHintText := ' (ab '+IntToStr(FRasterMengen[7])+')';
        if Sender = GRD_SonderpreiseDBTableView1PREIS_10 then
           AHintText := ' (ab '+IntToStr(FRasterMengen[8])+')';
   end; //** if ReadRasterForSP(FRaster, FRasterMengen) then

end; //** procedure GRD_SonderpreiseDBTableView1PREISGetCellHint


(******************************************************************************)
(***                GRD_UmsaetzeViewANZEIGE: OnGetCellHint                  ***)
(******************************************************************************)

procedure TFRM_DobosLV.GRD_UmsaetzeViewANZEIGEGetCellHint(
  Sender: TcxCustomGridTableItem; ARecord: TcxCustomGridRecord;
  ACellViewInfo: TcxGridTableDataCellViewInfo; const AMousePos: TPoint;
  var AHintText: TCaption; var AIsHintMultiLine: Boolean;
  var AHintTextRect: TRect);
begin

inherited;

if ARecord.Values[GRD_UmsaetzeViewANZEIGE.Index] = rsUmsaetzeEKStueck then
   AHintText := rsUmsaetzeEKStueckHint
else if ARecord.Values[GRD_UmsaetzeViewANZEIGE.Index] = rsUmsaetzeVKStueck then
   AHintText := rsUmsaetzeVKStueckHint
else if ARecord.Values[GRD_UmsaetzeViewANZEIGE.Index] = rsUmsaetzeVBStueck then
   AHintText := rsUmsaetzeVBStueckHint
else if ARecord.Values[GRD_UmsaetzeViewANZEIGE.Index] = rsUmsaetzeEKUmsatz then
   AHintText := rsUmsaetzeEKUmsatzHint
else if ARecord.Values[GRD_UmsaetzeViewANZEIGE.Index] = rsUmsaetzeVKUmsatz then
   AHintText := rsUmsaetzeVKUmsatzHint
else if ARecord.Values[GRD_UmsaetzeViewANZEIGE.Index] = rsUmsaetzeDBWert then
   AHintText := rsUmsaetzeDBWertHint
else if ARecord.Values[GRD_UmsaetzeViewANZEIGE.Index] = rsUmsaetzeDBProz then
   AHintText := rsUmsaetzeDBProzHint;

end; //** procedure GRD_UmsaetzeViewANZEIGEGetCellHint


(******************************************************************************)
(***                 GRD_MinisetView: OnKeyDown                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.GRD_MinisetViewKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin

inherited;

case Key of
     VK_F2 : begin
                  if SBT_MiniSetEdit.Enabled then
                     SBT_MiniSetEditClick(SBT_MiniSetEdit);
             end;

end; //** case Key of..

end; //**procedure GRD_MinisetViewKeyDown


(******************************************************************************)
(***             GRD_LagerDBViewLAGERStyles: OnGetContentStyle              ***)
(******************************************************************************)

procedure TFRM_DobosLV.GRD_LagerDBViewLAGERStylesGetContentStyle(
  Sender: TcxCustomGridTableView; ARecord: TcxCustomGridRecord;
  AItem: TcxCustomGridTableItem; var AStyle: TcxStyle);
begin

inherited;

if ARecord.Values[GRD_LagerDBViewGESPERRT.Index] = 1 then
   AStyle := DM_Dev.Style_RedTextBold;

end; //** procedure GRD_LagerDBViewLAGERStylesGetContentStyle


(******************************************************************************)
(***           GRD_LagerDBViewLAGER: OnGetCellHint                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.GRD_LagerDBViewLAGERGetCellHint(
  Sender: TcxCustomGridTableItem; ARecord: TcxCustomGridRecord;
  ACellViewInfo: TcxGridTableDataCellViewInfo; const AMousePos: TPoint;
  var AHintText: TCaption; var AIsHintMultiLine: Boolean;
  var AHintTextRect: TRect);
begin

inherited;
if ARecord.Values[GRD_LagerDBViewGESPERRT.Index] = 1 then
   AHintText := rs_LV_Sperrlager;

end; //** procedure GRD_LagerDBViewLAGERGetCellHint


(******************************************************************************)
(***       GRD_LagerDBViewLAGERProperties: OnButtonClick                    ***)
(******************************************************************************)

procedure TFRM_DobosLV.GRD_LagerDBViewLAGERPropertiesButtonClick(
  Sender: TObject; AButtonIndex: Integer);
var
   SaveLager : integer;
   AValue : Variant;
   Edit: TcxCustomEdit;

begin

inherited;
SaveLager := 0;
Edit := Sender as TcxCustomEdit;

AValue := GetListItem(lkLGName, Sender, Self);

if VarIsNull(AValue) then
   Exit;

SaveLager := AValue;

Edit.EditValue := SaveLager;
Edit.PostEditValue;

end; //** procedure GRD_LagerDBViewLAGERPropertiesButtonClick


(******************************************************************************)
(***                BTN_LoadFehlmengen: OnClick                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadFehlmengenClick(Sender: TObject);
var
   FSichtenFehlmengenParams : TSichtenFehlmengenParams;
   i : integer;
begin

inherited;
with FSichtenFehlmengenParams do
     begin
          AFunction := 0;
          AArtNrVon := TrimRight(AQY_ArtikelStammARTNR.AsString);
          AArtNrBis := TrimRight(AQY_ArtikelStammARTNR.AsString);
          ABarcodeVon := 0;
          ABarcodeBis := 999999999;
          AForm := self;
     end; //** with FSichtenFehlmengenParams do
i := Call (dnDobosCommon, 'sichtenfehlmengen', @FSichtenFehlmengenParams);

end; //** procedure BTN_LoadFehlmengenClick


(******************************************************************************)
(***                      FillUmsatzMemTable                                ***)
(******************************************************************************)

procedure TFRM_DobosLV.FillUmsatzMemTable;
begin

AQY_Umsatz.First;
MEM_Umsaetze.DisableControls;
try
   MEM_Umsaetze.Close;
   MEM_Umsaetze.Open;

   if ((AQY_Umsatz.Active) and (AQY_Umsatz.RecordCount > 0)) then
       begin
            if GetLinkagePointer^.PRIV_DB = JA then
               begin
                    //** Zeile DB in Prozent über alle Jahre
                    MEM_Umsaetze.Insert;
                    MEM_UmsaetzeANZEIGE.AsString := rsUmsaetzeDBProz; // 'DB in %';
                    MEM_UmsaetzeAJ.AsCurrency := AQY_UmsatzAJ_DB_PROZ.AsCurrency;
                    MEM_UmsaetzeVJ.AsCurrency := AQY_UmsatzVJ_DB_PROZ.AsCurrency;
                    MEM_UmsaetzeVVJ.AsCurrency := AQY_UmsatzVVJ_DB_PROZ.AsCurrency;
                    MEM_UmsaetzeTOT.AsCurrency  := AQY_UmsatzTOT_DB_PROZ.AsCurrency;
                    MEM_Umsaetze.Post;
               end; //** if GetLinkagePointer^.PRIV_DB = JA then

            if GetLinkagePointer^.PRIV_DB = JA then
               begin
                    //** Zeile DB-Wert über alle Jahre
                    MEM_Umsaetze.Insert;
                    MEM_UmsaetzeANZEIGE.AsString := rsUmsaetzeDBWert;//'DB Wert';
                    MEM_UmsaetzeAJ.AsCurrency := AQY_UmsatzSUMAJDB_WERT.AsCurrency;
                    MEM_UmsaetzeVJ.AsCurrency := AQY_UmsatzSUMVJDB_WERT.AsCurrency;
                    MEM_UmsaetzeVVJ.AsCurrency := AQY_UmsatzSUMVVJDB_WERT.AsCurrency;
                    MEM_UmsaetzeTOT.AsCurrency  := AQY_UmsatzSUMTOTDB_WERT.AsCurrency;
                    MEM_Umsaetze.Post;
               end; //** if GetLinkagePointer^.PRIV_DB = JA then

            if GetLinkagePointer^.PRIV_UM = JA then
               begin
                    //** Zeile VK-Umsatz über alle Jahre
                    MEM_Umsaetze.Insert;
                    MEM_UmsaetzeANZEIGE.AsString := rsUmsaetzeVKUmsatz; //'VK Umsatz';
                    MEM_UmsaetzeAJ.AsCurrency := AQY_UmsatzSUMAJVK_WERT.AsCurrency;
                    MEM_UmsaetzeVJ.AsCurrency := AQY_UmsatzSUMVJVK_WERT.AsCurrency;
                    MEM_UmsaetzeVVJ.AsCurrency := AQY_UmsatzSUMVVJVK_WERT.AsCurrency;
                    MEM_UmsaetzeTOT.AsCurrency  := AQY_UmsatzSUMTOTVK_WERT.AsCurrency;
                    MEM_Umsaetze.Post;
               end;

            if GetLinkagePointer^.PRIV_EK = JA then
               begin
                    //** Zeile EK-Umsatz über alle Jahre
                    MEM_Umsaetze.Insert;
                    MEM_UmsaetzeANZEIGE.AsString := rsUmsaetzeEKUmsatz;//'EK Umsatz';
                    MEM_UmsaetzeAJ.AsCurrency := AQY_UmsatzSUMAJEK_WERT.AsCurrency;
                    MEM_UmsaetzeVJ.AsCurrency := AQY_UmsatzSUMVJEK_WERT.AsCurrency;
                    MEM_UmsaetzeVVJ.AsCurrency := AQY_UmsatzSUMVVJEK_WERT.AsCurrency;
                    MEM_UmsaetzeTOT.AsCurrency  := AQY_UmsatzSUMTOTEK_WERT.AsCurrency;
                    MEM_Umsaetze.Post;
               end; //** if GetLinkagePointer^.PRIV_EK = JA then

            //** Zeile VB-Stück über alle Jahre
            MEM_Umsaetze.Insert;
            MEM_UmsaetzeANZEIGE.AsString := rsUmsaetzeVBStueck; // 'VB Stück';
            MEM_UmsaetzeAJ.AsCurrency := AQY_UmsatzSUMAJVB_STUECK.AsCurrency;
            MEM_UmsaetzeVJ.AsCurrency := AQY_UmsatzSUMVJVB_STUECK.AsCurrency;
            MEM_UmsaetzeVVJ.AsCurrency := AQY_UmsatzSUMVVJVB_STUECK.AsCurrency;
            MEM_UmsaetzeTOT.AsCurrency  := AQY_UmsatzSUMTOTVB_STUECK.AsCurrency;
            MEM_Umsaetze.Post;

            //** Zeile VK-Stück über alle Jahre
            MEM_Umsaetze.Insert;
            MEM_UmsaetzeANZEIGE.AsString := rsUmsaetzeVKStueck;// 'VK Stück';
            MEM_UmsaetzeAJ.AsCurrency := AQY_UmsatzSUMAJVK_STUECK.AsCurrency;
            MEM_UmsaetzeVJ.AsCurrency := AQY_UmsatzSUMVJVK_STUECK.AsCurrency;
            MEM_UmsaetzeVVJ.AsCurrency := AQY_UmsatzSUMVVJVK_STUECK.AsCurrency;
            MEM_UmsaetzeTOT.AsCurrency  := AQY_UmsatzSUMTOTVK_STUECK.AsCurrency;
            MEM_Umsaetze.Post;

            MEM_Umsaetze.Insert;
            //** Zeile EK-Stück über alle Jahre
            MEM_UmsaetzeANZEIGE.AsString := rsUmsaetzeEKStueck; //'EK Stück';
            MEM_UmsaetzeAJ.AsCurrency := AQY_UmsatzSUMAJEK_STUECK.AsCurrency;
            MEM_UmsaetzeVJ.AsCurrency := AQY_UmsatzSUMVJEK_STUECK.AsCurrency;
            MEM_UmsaetzeVVJ.AsCurrency := AQY_UmsatzSUMVVJEK_STUECK.AsCurrency;
            MEM_UmsaetzeTOT.AsCurrency  := AQY_UmsatzSUMTOTEK_STUECK.AsCurrency;
            MEM_Umsaetze.Post;

       end; //** if ((AQY_Umsatz.Active) and (AQY_Umsatz.RecordCount > 0)) then

finally
   MEM_Umsaetze.EnableControls;
end; //** try..finally

end; //** procedure FillUmsatzMemTable


(******************************************************************************)
(***                     BTN_DBNavPost: OnClick                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_DBNavPostClick(Sender: TObject);
var
   j       : integer;
   AValues : array [0..0] of Variant;
   s       : string; //** 02.2013
   i : integer;
   x : TLagerMemKey;
   s2 : string;

begin
inherited;

//** 12.1
if IsSchnellAnlage then
   begin
        FAnzMussFelderMuessenNoch := CheckAndSetMussFelder(false,true,LYC_Lagerverwaltung,false);

        if FAnzMussFelderMuessenNoch > 0 then
           begin
                Showmessage(GetStdRes(frs_STD_MussFelderVorhanden));
                Exit;
           end;
   end; //** if IsSchnellAnlage then

ArtikelStammBeforeEditSaveCancel(BTN_DBNavPost);

if Erfassen then
   begin
        if EDT_KB.Text = '' then
           begin
                ShowMessage(rs_LV_KBNeeded);
                Exit;
           end;

        if EDT_Bez_2.CanFocus then
           EDT_Bez_2.SetFocus; //** damit EDT_KBOnExit auf jeden Fall ausgeführt wird
   end;

//** 27.03.2019 SM - Berechnung nur unter diesen Bedingungen
if GetLinkagePointer^.Serial = KSerial_Lenser then
   if ((Erfassen) or (Aendern) or (DauerAendern)) then
      if ((AQY_ArtikelStammMASSE_SIND_MM.AsString = 'J') and
          (AQY_ArtikelStammB_BASIS.AsInteger = 0) and           //** Stk
          (AQY_ArtikelStammP_BASIS.AsInteger = 22) and          //** t = Tonne
          (AQY_ArtikelStammLAENGE.AsCurrency <> 0.00) and
          (AQY_ArtikelStammBREITE.AsCurrency <> 0.00) and
          (AQY_ArtikelStammHOEHE.AsCurrency <> 0.00) and
          (AQY_ArtikelStammSPEZ_GEWICHT.AsCurrency <> 0.0000)) then
         AQY_ArtikelStammV_EINHEIT.AsCurrency := ((AQY_ArtikelStammLAENGE.AsCurrency *
                                                   AQY_ArtikelStammBREITE.AsCurrency *
                                                   AQY_ArtikelStammHOEHE.AsCurrency *
                                                   AQY_ArtikelStammSPEZ_GEWICHT.AsCurrency) / 1000000000);

if GetLinkagePointer^.Module[imPV] then
   if ((Erfassen) or (Aendern) or (DauerAendern)) then
      begin
           //** 02.2013 - bei keinem anderen Artikel darf das Packmittel hinterlegt sein
           if ((not IsSpace(EDT_Packmittel.Text)) and (EDT_PackmittelIsPM.Text = 'J') and
               (EDT_Packmittel.Text <> AQY_ArtikelStammPACKMITTEL.OldValue)) then
              begin
                   j := 0;
                   if ReadAnyFields (GetDobosADB,
                                    'ARTIKEL_STAMM',
                                    'WHERE PACKMITTEL = '''+Trim(SQLTextString(EDT_Packmittel.Text))+''' '
                                  + 'AND PACKMITTEL_IST_PM = ''J'' ',
                                   ['COUNT(*)'],
                                    AValues) then
                      try
                         j := AValues[0];
                      except
                      end;

                   if j > 0 then
                      if j = 1 then
                         begin
                              if ReadAnyFields (GetDobosADB,
                                               'ARTIKEL_STAMM',
                                               'WHERE PACKMITTEL = '''+Trim(SQLTextString(EDT_Packmittel.Text))+''' '
                                             + 'AND PACKMITTEL_IST_PM = ''J'' ',
                                              ['ARTNR'],
                                               AValues) then
                                 try
                                    s := AValues[0];
                                 except
                                 end;

                              if Trim(s) <> Trim(EDT_ArtNr.Text) then
                                 begin
                                      ShowMessage(Format(rs_LV_PMExistBeieinemArtikel,[EDT_Packmittel.Text, s]));
                                      if EDT_Packmittel.CanFocus then
                                         EDT_Packmittel.SetFocus;
                                      Exit;
                                 end; //** if Trim(s) <> Trim(EDT_ArtNr.Text) then
                         end //** if j = 1 then
                      else
                         begin  //** kann eigentlich nicht sein
                              ShowMessage(Format(rs_LV_PMExistBeiArtikel,[EDT_Packmittel.Text]));
                              if EDT_Packmittel.CanFocus then
                                 EDT_Packmittel.SetFocus;
                              Exit;
                         end; //** if j > 0 then
               end; //** if (not IsSpace(EDT_Packmittel.Text)) then

           //** 02.2013 - kein Packmittel bzw. nur dieses Packmittel darf den Artikel haben
           if ((not IsSpace(EDT_Packmittel.Text)) and (EDT_PackmittelIsPM.Text = 'J') and
               (EDT_Packmittel.Text <> AQY_ArtikelStammPACKMITTEL.OldValue)) then
              begin
                   j := 0;
                   if ReadAnyFields (GetDobosADB,
                                    'PACKMITTEL',
                                    'WHERE ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''' ',
                                   ['COUNT(*)'],
                                    AValues) then
                      try
                         j := AValues[0];
                      except
                      end;

                   if j > 0 then
                      if j = 1 then
                         begin
                              if ReadAnyFields (GetDobosADB,
                                               'PACKMITTEL',
                                               'WHERE ARTNR = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''' ',
                                              ['PMNR'],
                                               AValues) then
                                 try
                                    s := AValues[0];
                                 except
                                 end;

                              if Trim(s) <> Trim(EDT_Packmittel.Text) then
                                 begin
                                      ShowMessage(Format(rs_LV_ArtikelExistBeieinemPM,[EDT_ArtNr.Text, s]));
                                      if EDT_Packmittel.CanFocus then
                                         EDT_Packmittel.SetFocus;
                                      Exit;
                                 end; //** if Trim(s) <> Trim(EDT_ArtNr.Text) then
                         end //** if j = 1 then
                      else
                         begin  //** kann eigentlich nicht vorkommen
                              ShowMessage(Format(rs_LV_ArtikelExistBeiPM, [EDT_ArtNr.Text]));
                              if EDT_Packmittel.CanFocus then
                                 EDT_Packmittel.SetFocus;
                              Exit;
                         end;  //** else: if j = 1 then

                   if j = 0 then //** noch kein PM bzw. kein PM mit diesem Artikel
                      UpdatePackmittel(EDT_Packmittel.Text, EDT_ArtNr.Text);

              end; //** if (not IsSpace(EDT_Packmittel.Text) and (EDT_PackmittelIsPM.Text = 'J') and

     end; //** if ((Erfassen) or (Aendern) or (DauerAendern)) then

if AQY_Lieferant.State <> dsBrowse then
   begin
        with AQY_Lieferant do
             try
                if AQY_LieferantKUNU.AsInteger < FirstKreditor then
                   begin
                        if (MessageDlg(rs_LV_QChangeLieferantAgain, mtConfirmation,[mbYes,mbNo],0)) = mrYes then
                           Exit;
                        Cancel;
                   end
                else
                   Post;
             except
                raise;
             end; //** try..except
   end; //** if AQY_Lieferant.State <> dsBrowse

if AQY_Preise.State <> dsBrowse then
   begin
        with AQY_Preise do
             try
                Post;
             except
                raise;
             end; //** try..except
   end; //** if AQY_Preise.State <> dsBrowse

if AQY_FremdTexte.State <> dsBrowse then
   begin
        with AQY_FremdTexte do
             try
                Post;
             except
                raise;
             end; //** try..except
   end; //** if AQY_FremdTexte.State <> dsBrowse

if AQY_DVKalk.State <> dsBrowse then
   begin
        with AQY_DVKalk do
             try
                Post;
             except
                raise;
             end; //** try..except
   end; //** if AQY_DVKalk.State <> dsBrowse

if (AQY_ArtikelStamm.State in [dsInsert]) then
   begin
        if isSpace(EDT_BN.Text) then   //** Bestellnummer leer?
           begin
                AQY_ArtikelStammBN.AsString := Copy(EDT_ArtNr.Text,1,25);
                EDT_BN.Text := Copy(EDT_ArtNr.Text,1,25);
           end //** if isSpace(EDT_BN.Text)
        else
           //** nötig, wegen OnDataChange!
           AQY_ArtikelStammBN.AsString := EDT_BN.Text;

        if isSpace(EDT_BEZ_1.Text) then
           begin
                EDT_Bez_1.Text := AnsiUpperCase(EDT_ArtNr.Text);
                AQY_ArtikelStammBEZ_1.AsString := EDT_Bez_1.Text;
           end; //** if isSpace(EDT_BN.Text)

        if isSpace(EDT_ZN.Text) then
           begin
                //** ... Eine aus mehreren Schritten...
                EDT_ZN.Text := Copy(AnsiUpperCase(EDT_BEZ_1.Text),1,25);
                AQY_ArtikelStammZN.AsString := EDT_ZN.Text;
           end; //** if isSpace(EDT_BN.Text)

        if isSpace(EDT_ZN.Text) then
           begin
                EDT_ZN.Text := AnsiUpperCase(EDT_ArtNr.Text);
                AQY_ArtikelStammZN.AsString := EDT_ZN.Text;
           end; //** if isSpace(EDT_BN.Text)
   end; //** if (AQY_ArtikelStamm.State in [dsInsert, dsEdit])

//** 25.05.2021 PI - wenn Status von 1 oder 2 auf x gesetzt wird - Wichtige Hinweise löschen
//** 25.05.2021 PI - wenn Status von x auf 1 oder 2 gesetzt wird - Wichtige Hinweise löschen und im Anschluss einfügen
if (GetLinkagePointer^.Serial = KSerial_Yamaichi) then
   if (EDT_STATUS.AsInteger <> YamaichiSaveStatus) and ((YamaichiSaveStatus IN [1,2]) or (EDT_STATUS.AsInteger IN [1,2])) then
      with AQY_Divers do
           try
              if Active then
                 Close;
              Connection := GetDobosADB;
              SQL.Clear;
              SQL.Add(' DELETE INFOBLATT WHERE ART = ''w'' AND SCHLUESSEL = '''+Trim(SQLTextString(EDT_ArtNr.Text))+''' ');
              UCExecSQL(AQY_Divers);
              CheckHinweise(false);
           except
           end; //** try .. except

//** 25.05.2021 PI - wenn Status von x auf 1 oder 2 gesetzt wird - Wichtige Hinweise einfügen
if (GetLinkagePointer^.Serial = KSerial_Yamaichi) then
   if (EDT_STATUS.AsInteger <> YamaichiSaveStatus) and (EDT_STATUS.AsInteger IN [1,2]) then
      with AQY_Divers do
           try
              if Active then
                 Close;
              Connection := GetDobosADB;
              SQL.Clear;
              if EDT_STATUS.AsInteger = 1 then
                 SQL.Add(' INSERT INTO INFOBLATT '
                        +' SELECT ART, '''+Trim(SQLTextString(EDT_ArtNr.Text))+''', ''LAbf'', SCHLAGWORT_2, SCHLAGWORT_3, INHALT '
                        +' FROM INFOBLATT WHERE ART = ''w'' AND SCHLUESSEL = ''ZZZZZZZZZZ'' ');
              if EDT_STATUS.AsInteger = 2 then
                 SQL.Add(' INSERT INTO INFOBLATT '
                        +' SELECT ART, '''+Trim(SQLTextString(EDT_ArtNr.Text))+''', ''LAbf'', SCHLAGWORT_2, SCHLAGWORT_3, INHALT '
                        +' FROM INFOBLATT WHERE ART = ''w'' AND SCHLUESSEL = ''YYYYYYYYYY'' ');
              UCExecSQL(AQY_Divers);
              CheckHinweise(false);
           except
           end; //** try .. except


with AQY_ArtikelStamm do
     if (State in [dsInsert, dsEdit]) then
        try
           Post;
           if Erfassen then
              begin
                   CloseInsertSemaphore;      //** Semaphore Erfassen Schließen
                   EDT_ArtNr.Enabled := true;
                   XArtNr := TrimRight(AQY_ArtikelStammARTNR.AsString);

                   if IsSchnellAnlage then
                      begin
                           if ((Assigned(KeyList) and (XArtNr > ''))) then
                              begin
                                   with x do
                                        begin
                                             s2 := TrimRight(XArtNr);
                                             shbExpandString(s2, LengthOfArtNr, ' ', false);
                                             MArtNr := s2;
                                             MVariante := 0;
                                        end; //** with x do

                                   if KeyList.IndexOf(@x, SizeOf(TLagerMemKey)) < 0 then
                                      KeyIndex := KeyList.Add(@x, SizeOf(TLagerMemKey));

                                   UpdateNavi;

                                   //** 12.1 Schnell-Anlage Layout von aussen laden
                                   if (MasterIniValue = 'A') or (MasterIniValue = 'B')  then
                                      try
                                         SALinkList.Sorted := false;
                                         SALinkList.Add(XArtNr);
                                         ClipBoard.Open;
                                         Clipboard.AsText := SALinkList.Text;
                                      finally
                                         Clipboard.Close;
                                      end; //** try..finally

                              end; //** if ((Assigned(KeyList) and (AQY_ArtikelStammARTNR.AsString > '')))
                      end; //** if IsSchnellAnlage then


                   BTN_AllgNeuKopierenClick(nil);

                   // durch BTN_AllgNeuKopierenClick(nil); ?
                   //loadartikellayout(savelayoutid);
              end; //** if Erfassen
        except
           on E:Exception do
              begin
                   if Erfassen then
                      CloseInsertSemaphore;      //** Semaphore Erfassen Schließen
                   if E.Message <> rs_LV_OperationAbgebrochen then
                      ShowMessage(E.Message);
                   if (State in [dsInsert]) then
                      begin
                           BTN_AllgNeuKopieren.Down := false;
                           BTN_AllgNeuKopierenClick(BTN_AllgNeuKopieren);
                           Abort;
                      end;
              end; //** on E:Exception do

        end; //** try..except

if not DauerAendern then
   begin
        Aendern := false;
        if not CopyFlag then  //** 5.12.2008
           EDT_ArtNr.Enabled := true;
        UpdateButtons;
   end  //** if not DauerAendern
else
   begin
        Aendern := true;
        UpdateButtons;
       //SetAbbButtonVisible(false);
   end;
NeuEingabeAktiv := false;

UpdateArtikelGesperrtLabel;
end; //** procedure BTN_DBNavPostClick


(******************************************************************************)
(***                   BTN_DBNavAbbrechen: OnClick                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_DBNavAbbrechenClick(Sender: TObject);
begin

inherited;

if Erfassen then
   begin
        if IsSchnellAnlage then
           CheckAndSetMussFelder(false,true,LYC_Lagerverwaltung,true);

        BTN_AllgNeuKopieren.Down := false;
        BTN_AllgNeuKopierenClick(BTN_AllgNeuKopieren);
        Exit;
   end; //** if Erfassen

Erfassen := false;
Aendern := false;
DauerAendern := false;
DTS_Artikelstamm.AutoEdit := false;
ArtikelStammBeforeEditSaveCancel(BTN_DBNavAbbrechen);
//** Änderung 8)
//** ist schon im ArtikelStammBeforeEditSaveCancel drinnen
//CheckNebenTabellen(false);
//** Änderung 8)
AQY_ArtikelStamm.Cancel;
ReadRaster(AQY_ArtikelStammRASTER_VK.AsInteger, true, false, false);

//CheckAndSetMussFelder(false,true,LYC_Lagerverwaltung);

UpdateButtons;

end; //** procedure BTN_DBNavAbbrechenClick


(******************************************************************************)
(***                     BTN_Bookmark: OnClick                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_BookmarkClick(Sender: TObject);
begin

inherited;
if BTN_Bookmark.Down then
   begin
        BTN_Bookmark.Hint := rs_LV_GoToBookmark;
        if ((BookArtNr = '') and (CurrArtNr > '')) then
           begin
                BookArtNr := CurrArtNr;
                STB_DLLChild.Panels[0].Text := 'LM: '+BookArtNr;
                UpdateRecentList;
                GetLinkagePointer^.LinkLastArtNr := CurrArtNr;
           end
        else
           begin
                BTN_Bookmark.Down := false;
                BookArtNr := '';
           end; //** if ((BookArtNr = -1) and (CurrArtNr > -1))
   end //** if SBT_BookMark.Down
else
   begin
        STB_DLLChild.Panels[0].Text := '';
        if BookArtNr > '' then
           begin
                PosMain(BookArtNr, '', mpExact, false);
                BookArtNr := '';
                BTN_Bookmark.Hint := rs_LV_SetBookmark;
           end  //** if BookArtNr > -1
        else
           BTN_Bookmark.Down := false;
   end; //** if SBT_BookMark.Down

end; //** procedure BTN_BookmarkClick


(******************************************************************************)
(***                  BTN_NavFirst: OnClick (alle Navs)                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_NavFirstClick(Sender: TObject);
var
   s : string;
   b : boolean;

begin

inherited;
if not DTS_Open then
   Exit;

//** erzwinge FeldExit der Nebentabellen, damit Änderungen auch ohne FieldExit erkannt werden
if ((AQY_ArtikelStamm.State in [dsInsert, dsEdit]) or
    (AQY_Preise.State in [dsInsert, dsEdit]) or
    (AQY_Lager.State in [dsInsert, dsEdit]) or
    (AQY_Lieferant.State in [dsInsert, dsEdit]) or
    (AQY_FremdTexte.State in [dsInsert, dsEdit]) or
    (AQY_DVKalk.State in [dsInsert, dsEdit]) or
    (AQY_ArtikelStamm.State in [dsInsert, dsEdit]) or
    (AQY_MiniSet.State in [dsInsert, dsEdit])) then
    begin
        //** Änderung 10)
        //** Post und Processmsg gegen send ausgetauscht
        //** Application.ProcessMessages eh schlecht und Send arbeitet die msg ab
        //PostMessage(Handle, WM_NextDlgCtl, 1, 0);
        //PostMessage(Handle, WM_NextDlgCtl, 0, 0);
        SendMessage(Handle, WM_NextDlgCtl, 1, 0);
        SendMessage(Handle, WM_NextDlgCtl, 0, 0);
        //** Damit Controls, States usw. Upgedated wird
        //Application.ProcessMessages;
        //** Änderung 10)
    end; //** if ((AQY_ArtikelStamm.State in [dsInsert, dsEdit]) or

if AQY_ArtikelStamm.State in [dsInsert, dsEdit] then
   begin
        if ((Screen.ActiveControl = EDT_BEZ_1) and (AQY_ArtikelStammBEZ_1.AsString <> EDT_BEZ_1.Text)) then
           AQY_ArtikelStammBEZ_1.AsString := EDT_BEZ_1.Text
        else
           if ((Screen.ActiveControl = EDT_ZN) and (AQY_ArtikelStammZN.AsString <> EDT_ZN.Text)) then
              AQY_ArtikelStammZN.AsString := EDT_ZN.Text
           else
              if ((Screen.ActiveControl = EDT_BN) and (AQY_ArtikelStammBN.AsString <> EDT_BN.Text)) then
                 AQY_ArtikelStammBN.AsString := EDT_BN.Text
              else
                 if Screen.ActiveControl = EDT_KB then
                    if isSpace(EDT_KB.Text) then
                       begin
                            if EDT_KB.CanFocus then
                               EDT_KB.SetFocus;
                       end
                    else
                       if (AQY_ArtikelStammKB.AsString <> EDT_KB.Text) then
                          AQY_ArtikelStammKB.AsString := EDT_KB.Text;
   end; //** if AQY_ArtikelStamm.State in [dsInsert, dsEdit]

if DTS_Open then
   CheckNebenTabellen(true);

case SortOrder of
     asArtNr  : s := EDT_ArtNr.Text;
     asKB     : s := EDT_KB.Text;
     asBN     : s := EDT_BN.Text;
     asZN     : s := EDT_ZN.Text;
     asBez_1  : s := EDT_BEZ_1.Text;
end; //** case SortOrder of

if Sender = BTN_NavFirst then
   b := PosMain(CurrArtNr, s, mpFirst, false)
else
   if Sender = BTN_NavLast then
      b := PosMain(CurrArtNr, s, mpLast, false)
   else
      if Sender = BTN_NavPrior then
         b := PosMain(CurrArtNr, s, mpPrior, false)
      else
         if Sender = BTN_NavNext then
            b := PosMain(CurrArtNr, s, mpNext, false);

if not DauerAendern then
   begin
        Aendern := false;
        //EDT_ArtNr.Enabled := true;
   end; //** if not DauerAendern

UpdateButtons;

if DauerAendern then
   SetNebenTabellenEditOrCancel(true);

end; //** procedure BTN_NavFirstClick


(******************************************************************************)
(***                 BTN_NavRefresh: OnClick                                ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_NavRefreshClick(Sender: TObject);
begin
inherited;
PosMain(CurrArtNr, '', mpExact, false);
end; //** procedure BTN_NavRefreshClick


(******************************************************************************)
(***                BTN_NeuMaske: OnClick                                   ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_NeuMaskeClick(Sender: TObject);
begin

inherited;
ErfassenMaske := true;
BTN_AllgNeuKopieren.Click;

end; //** procedure BTN_NeuMaskeClick


(******************************************************************************)
(***                 BTN_NeuSchnellanlage: OnClick                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_NeuSchnellanlageClick(Sender: TObject);
begin

inherited;

IsSchnellAnlage := true;
BTN_AllgNeuKopieren.Click

end; //** procedure BTN_NeuSchnellanlageClick


(******************************************************************************)
(***      CallNextArtNrMaske                                                ***)
(******************************************************************************)

procedure TFRM_DobosLV.CallNextArtNrMaske;
var
   FGetNextArtSNNrParams : TGetNextArtSNNrParams;
   i                     : integer;
   s,
   mZN,
   mArtNr,
   mArtBez2,
   mArtBez,
   mBrendleArtNr : string;

begin

if ((GetLinkagePointer^.Serial = KSerial_Brendle) and (Length(EDT_ArtNr.Text) = 5)) then
   begin
        mBrendleArtNr := EDT_ArtNr.Text;
        EDT_ArtNr.Text := GetNextArtNrBrendle (mBrendleArtNr);
   end //** if ((GetLinkagePointer^.Serial = KSerial_Brendle) and (Length(EDT_ArtNr.Text) > 5))
else
   with FGetNextArtSNNrParams do
        begin
             AArtNrSN := true;
             APMNr := false; //** 10.2012
             ASerial := '';
             AMaske := AktuelleMaske;
             AFuellKZ := AktuellFuellKZ;
             ALieferant := AktuellLieferant;
             AArtNr := '';
             ALfdSNSW := false;
             AForm := Self;
             ALastCountForMassenInsert := 0;
             i := Call (dnDobosCommon, 'getnextartsnnr', @FGetNextArtSNNrParams);
             if i = 1 then
                begin
                     EDT_ArtNr.Text := Trim(AArtNr);
                     AktuelleMaske := AMaske;
                     AktuellFuellKZ := AFuellKZ;
                     AktuellLieferant := ALieferant;
                     ErfassenMaske := true;
                end //** if i = 1
             else
                ErfassenMaske := false;
        end; //** with FGetNextArtSNNrParams do

end; //** procedure CallNextArtNrMaske


(******************************************************************************)
(***                BTN_AllgDauerEdit: OnClick                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_AllgDauerEditClick(Sender: TObject);
begin
inherited;

if EDT_ArtNr.Text <> AQY_ArtikelStammARTNR.AsString then
   begin
        EDT_ArtNr.Text := AQY_ArtikelStammARTNR.AsString;
        BTN_AllgDauerEdit.Down := not(BTN_AllgDauerEdit.Down);
        Exit;
   end; //** if EDT_ArtNr.Text <> AQY_ArtikelStammARTNR.AsString

with BTN_AllgEditDauerEdit do
     Down := not Down;

BTN_AllgEditDauerEdit.Caption := rs_LV_DauerEdit;
DauerAendern := true;
ArtNrEntryZwang := false;

if BTN_AllgDauerEdit.Down then       //** StateChange auf Down?
   begin
        OpenDataSources;
        Aendern := true;
        DauerAendern := true;
        UpdateButtons;

        EDT_ArtNr.Enabled := false;
        DTS_ArtikelStamm.AutoEdit := true;
        DTS_Preise.AutoEdit := true;
        DTS_Lieferant.AutoEdit := true;
        //DTS_FremdTexte.AutoEdit := true;
        DTS_Lager.AutoEdit := true;
        DTS_MiniSet.AutoEdit := true;

        if SBT_LiefEdit.Enabled then
           SBT_LiefEditClick(self);
        if SBT_PreiseEdit.Enabled then
           SBT_PreiseEditClick(self);
        if SBT_MiniSetEdit.Enabled then
           SBT_MiniSetEditClick(self);
        if SBT_MiniSetEdit.Enabled then
           SBT_MiniSetEditClick(self);
        if SBT_LagerEdit.Enabled then
           SBT_LagerEditClick(self);
        if SBT_FremdTextEdit.Enabled then
           SBT_FremdTextEditClick(self);
        if SBT_DVKalkEdit.Enabled then
           SBT_DVKalkEditClick(self);

        with AQY_ArtikelStamm do
             try
                Cancel;            //** = dsBrowse
                if EDT_KB.CanFocus then
                   EDT_KB.SetFocus;   //** wichtig! Wenn Active = KB dann <> Spaceprüfung loop
                Edit;              //** Datenbank in EditModus

             except                //** Tritt auch durch Abort bei Semaphore-Test auf!
                BTN_AllgDauerEdit.Down := false;
                DTS_ArtikelStamm.AutoEdit := false;
                DTS_Preise.AutoEdit := false;
                DTS_Lieferant.AutoEdit := false;
                //DTS_FremdTexte.AutoEdit := false;
                DTS_Lager.AutoEdit := false;
                DTS_MiniSet.AutoEdit := false;

                Aendern := false;
                DauerAendern := false;
                AQY_ArtikelStamm.Cancel;
                EDT_ArtNr.Enabled := true;
                UpdateButtons;
                raise;
             end; //** try..except
   end //** if SBT_DauerEdit.Down
else
   begin
        DTS_ArtikelStamm.AutoEdit := false;
        DTS_Preise.AutoEdit := false;
        DTS_Lieferant.AutoEdit := false;
        DTS_FremdTexte.AutoEdit := false;
        DTS_Lager.AutoEdit := false;
        DTS_MiniSet.AutoEdit := false;

        CheckNebenTabellen(false);
        with AQY_Preise do
             if (State in [dsEdit, dsInsert]) then
                try
                   Post;
                except
                   raise;
                end; //** try..except

        with AQY_Lager do
             if (State in [dsEdit, dsInsert]) then
                try
                   Post;
                except
                   raise;
                end; //** try..except

        with AQY_Lieferant do
             if (State in [dsEdit, dsInsert]) then
                try
                   Post;
                except
                   raise;
                end; //** try..except

        with AQY_FremdTexte do
             if (State in [dsEdit, dsInsert]) then
                try
                   Post;
                except
                   raise;
                end; //** try..except

        with AQY_DVKalk do
             if (State in [dsEdit, dsInsert]) then
                try
                   Post;
                except
                   raise;
                end; //** try..except

        with AQY_MiniSet do
             if (State in [dsEdit, dsInsert]) then
                try
                   Post;
                except
                   raise;
                end; //** try..except

        Aendern := false;
        DauerAendern := false;
        AQY_ArtikelStamm.Cancel;
        EDT_ArtNr.Enabled := true;
        UpdateButtons;

   end; //** else-Zweig if SBT_DauerEdit.Down

end; //** procedure BTN_AllgDauerEditClick


(******************************************************************************)
(***             BTN_AllgNeuKopieren: OnClick                               ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_AllgNeuKopierenClick(Sender: TObject);
var
   dummy : boolean;
   i     : integer;
   s     : string;
   SaveFirstSchnellAnlage : boolean;

begin

inherited;
if GetLinkagePointer^.Module[imDemo] then
   if CheckDemo then
      begin
           ShowMessage('Demoversion, nur 50 Stammsätze möglich.');
           if BTN_AllgNeuKopieren.Down then
              BTN_AllgNeuKopieren.Down := false;
           Exit;
      end; //** if CheckDemo

ArtNrEntryZwang := false;

if ((GetLinkagePointer^.PRIV_ERFASSEN = 'l') or
    (GetLinkagePointer^.PRIV_ERFASSEN = 'b')) then
   IsSchnellAnlage := true;

if BTN_AllgNeuKopieren.Down then       //** StateChange auf Down?
   begin
        OpenDataSources;
        MNI_Sichten.Enabled := false;
        EDT_ArtNr.Text := '';
        EDT_KB.Text := '';
        EDT_BN.Text := '';
        EDT_ZN.Text := '';
        EDT_BEZ_1.Text := '';
        GetStdErfassenWerte;
        Erfassen := true;

        ReadAllData;
        //** Status retten
        SaveKeyNaviVisible := (Assigned(KeyList) and
                              (KeyList.Count > 0)); //** alt (untauglich, da mehrfach aufgerufen wird): PAN_QueryNavigator.Visible;
        BGP_SelNavBarGruppe.Visible := ivNever;
        UpdateButtons;
        BTN_DBNavPost.Enabled := false;
        SetAbbButtonVisible(false);
        BTN_AllgNeuKopieren.Hint := rs_LV_ErfassenArtikelBeenden;
        with AQY_ArtikelStamm do
             try
                Cancel;             //** = dsBrowse
                if EDT_ArtNr.CanFocus then
                   EDT_ArtNr.SetFocus; //** wichtig! Wenn Active = KB dann <> Spaceprüfung loop
                if not AQY_ArtikelStamm.Active then
                   Open;

                if IsSchnellAnlage then
                   begin
                        UnShowSQLWait; //** LadeScreen bleibt sonst stehen, wenn bereits max. Anzahl Instanzen aktiv
                        SaveFirstSchnellAnlage := FFirstSchnellAnlage;

                        if FindAnlageLayouts(MAnlageLayouts,MAnlageLayoutsVarDLG,true,AQY_Divers2) then
                           begin
                                if FSchnellanlageLayoutName = '' then
                                   begin
                                        i := GetVarRDGDlg(GetStdRes(frs_STD_SchnellAnlageLayoutLV),MAnlageLayoutsVarDLG,
                                                  0,false,dummy,dummy);
                                        if i = -1 then
                                           begin
                                                IsSchnellAnlage := false;
                                                FSchnellanlageLayoutName := '';
                                                BTN_DBNavAbbrechenClick(BTN_DBNavAbbrechen);
                                                Exit;
                                           end
                                        else
                                           FSchnellanlageLayoutName := MAnlageLayoutsVarDLG[i];
                                   end;

                                if ((i = -1) or (FSchnellanlageLayoutName = GetStdRes(frs_STD_AnlageBeenden))) then
                                   begin
                                        IsSchnellAnlage := false;
                                        FSchnellanlageLayoutName := '';
                                        BTN_DBNavAbbrechenClick(BTN_DBNavAbbrechen);
                                        Exit;
                                   end;

                                if FFirstSchnellAnlage then
                                   begin
                                        with KeyList do
                                             begin
                                                  if Count > 0 then
                                                     case AskSelektionVerwerfen of
                                                          mrYes : KeyList.Clear;
                                                          mrCancel : exit;
                                                     end;
                                                  KeyIndex := -1;
                                             end; //** with KeyList do
                                   end; //** if FFirstSchnellAnlage then

                                LoadSchnellAnlageLayout(FindLayoutPerName(FSchnellanlageLayoutName),true,LYC_Lagerverwaltung,FFirstSchnellAnlage);

                           end //** if FindAnlageLayouts then
                        else
                           begin
                                ImportStdLayout := true;
                                BTN_LoadSaveLayoutClick(BTN_NeuSchnellanlage);
                                ImportStdLayout := false;

                                if FindAnlageLayouts(MAnlageLayouts,MAnlageLayoutsVarDLG,true,AQY_Divers2) then
                                   begin
                                        if FSchnellanlageLayoutName = '' then
                                           begin
                                                i := GetVarRDGDlg(GetStdRes(frs_STD_SchnellAnlageLayoutLV),MAnlageLayoutsVarDLG,
                                                          0,false,dummy,dummy);
                                                if i = -1 then
                                                   begin
                                                        IsSchnellAnlage := false;
                                                        FSchnellanlageLayoutName := '';
                                                        BTN_DBNavAbbrechenClick(BTN_DBNavAbbrechen);
                                                        Exit;
                                                   end
                                                else
                                                   FSchnellanlageLayoutName := MAnlageLayoutsVarDLG[i];
                                           end;

                                       if ((i = -1) or (FSchnellanlageLayoutName = GetStdRes(frs_STD_AnlageBeenden))) then
                                          begin
                                               IsSchnellAnlage := false;
                                               FSchnellanlageLayoutName := '';
                                               BTN_DBNavAbbrechenClick(BTN_DBNavAbbrechen);
                                               Exit;
                                          end;

                                       if FFirstSchnellAnlage then
                                          begin
                                               with KeyList do
                                                    begin
                                                         if Count > 0 then
                                                            case AskSelektionVerwerfen of
                                                                 mrYes : KeyList.Clear;
                                                                 mrCancel : exit;
                                                            end;
                                                         KeyIndex := -1;
                                                    end; //** with KeyList do
                                          end; //** if FFirstSchnellAnlage then

                                       LoadSchnellAnlageLayout(FindLayoutPerName(FSchnellanlageLayoutName),true,LYC_Lagerverwaltung,FFirstSchnellAnlage);

                                   end; //** if FindAnlageLayouts then

                                //IsSchnellAnlage := false;
                                //FSchnellanlageLayoutName := '';

                                //ShowMessage(GetStdRes(frs_STD_ImportStandardSchnellLayout));

                           end; //** if FindAnlageLayouts(MAnlageLayouts,MAnlageLayoutsVarDLG,true,AQY_Divers2)

                        if MasterIniValue = 'A' then
                           if (not ((LYI_DurchEK.ActuallyVisible) and (LYI_VK1.ActuallyVisible))) then
                              if SaveFirstSchnellAnlage then
                                 if (SHBTaskDialog(rs_LV_Schnellanlage,
                                                   rs_LV_EKDurchschnitt,
                                                   rs_LV_QFortfahren,
                                                   Self,
                                                   [tfAllowDialogCancellation],
                                                   '', //** no merken
                                                   [tcbCancel],
                                                   tdiWarning,
                                                   [
                                                    FillTaskButtonArray(rs_LV_Fortfahren, mrYes)
                                                   ]).fModalResult) IN [mrCancel, mrAbort] then
                                    begin
                                         BTN_DBNavAbbrechenClick(BTN_DBNavAbbrechen);
                                         Exit;
                                    end;

                   end; //** if Sender = BTN_NeuSchnellanlage then

                Insert;             //** Datenbank in InsertModus, folgt: After Insert

                if IsSchnellAnlage then
                    begin
                         if LYI_LiefButtons.ActuallyVisible then
                            begin
                                 SBT_LiefInsert.Click;
                            end;

                         if LYI_PreiseButtons.ActuallyVisible then
                            begin
                                 SBT_PreiseInsert.Click;
                            end;

                    end;

             except
                BTN_AllgNeuKopieren.Down := false;
                BTN_AllgNeuKopierenClick(BTN_AllgNeuKopieren);
             end; //** try..except
   end
else
   begin
        if AQY_ArtikelStamm.Modified then
          if (MessageDlg(GetStdRes(frs_STD_QAlleAenderungenVerwerfen),
                         mtConfirmation,[mbYes,mbNo],0)) <> mrYes then
             begin
                  BTN_AllgNeuKopieren.Down := true;
                  Exit;
             end
          else
             begin
                  if (not (IsSpace(LastErfassenSemaphore))) then
                     if not DeleteAllArtikelData(TrimRight(AQY_ArtikelStammARTNR.AsString)) then
                        ShowMessage(rs_LV_CouldntDelete);
             end; //** if (MessageDlg...

        CloseInsertSemaphore;      //** Semaphore Erfassen Schließen
        BTN_AllgKopierenKlein.Enabled := true;
        BTN_AllgKopierenKlein.Down := false;
        MNI_Sichten.Enabled := true;
        Erfassen := false;
        ErfassenMaske := false;
        //**12.1
        IsSchnellAnlage := false;
        FSchnellanlageLayoutName := '';
        FFirstSchnellAnlage := true;
        AQY_ArtikelStamm.Cancel;
        NeuEingabeAktiv := false;
        CopyFlag := false;
        Strg_I_Flag := false;

        LoadSchnellAnlageLayout({savelayoutid}-1,true,LYC_Lagerverwaltung,FFirstSchnellAnlage);
        if DispoAktuellSw then
           LYI_SummeDispo.Caption := rs_LV_DispoAkt
        else
           LYI_SummeDispo.Caption := rs_LV_DispoTot;

        //** MasterTable positionieren
        if isSpace(xArtNr) then
           xArtNr := CurrArtNr;
        PosMain(xArtNr, '', mpExact, false);

        EDT_ArtNr.Enabled := true;
        EDT_ArtNr.Text := TrimRight(AQY_ArtikelStammARTNR.AsString);
        EDT_KB.Text := TrimRight(AQY_ArtikelStammKB.AsString);
        EDT_BN.Text := TrimRight(AQY_ArtikelStammBN.AsString);
        EDT_ZN.Text := TrimRight(AQY_ArtikelStammZN.AsString);
        EDT_BEZ_1.Text := TrimRight(AQY_ArtikelStammBEZ_1.AsString);
        if SaveKeyNaviVisible then
           BGP_SelNavBarGruppe.Visible := ivAlways
        else
           BGP_SelNavBarGruppe.Visible := ivNever;
        BTN_AllgNeuKopieren.Hint := rs_LV_ErfassenArtikel;
        BTN_AllgKopierenKlein.Hint := rs_LV_KopierenArtikel;
        UpdateButtons;
   end; //** else-Zweig if BTN_AllgNeuKopieren.Down

end; //** procedure BTN_AllgNeuKopierenClick


(******************************************************************************)
(***                 BTN_AllgKopierenKlein: OnClick                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_AllgKopierenKleinClick(Sender: TObject);
begin
inherited;

if Self.ActiveControl = EDT_ArtNr then
   if MNI_EnableBIOSSearch.Checked then
      EDT_ArtNr.BIOSQuitSearch;

if EDT_ArtNr.Text <> AQY_ArtikelStammARTNR.AsString then
   begin
        EDT_ArtNr.Text := AQY_ArtikelStammARTNR.AsString;
        BTN_AllgKopierenKlein.Down := not(BTN_AllgKopierenKlein.Down);
        Exit;
   end; //** if EDT_ArtNr.Text <> AQY_ArtikelStammARTNR.AsString

BTN_AllgKopierenKlein.Hint := rs_LV_KopierenArtikel;
SaveKB := EDT_KB.Text;
if not BTN_AllgKopierenKlein.Down then       //** StateChange auf Down?
   begin
        CopyFlag := false;
        Exit;
   end
else
   begin
        BTN_AllgKopierenKlein.Hint := Format(rs_LV_KopiermodusOff,[CopyFromArtNr]);
        GetStdErfassenWerte;
        if BTN_AllgNeuKopieren.Down then
           begin
                CopyFlag := true;
                UpdateButtons;
                Exit;
           end;
   end; //** if not BTN_AllgKopierenKlein.Down

if (MessageDlg(Format(rs_LV_QKopierenStarten,[EDT_ArtNr.Text]), mtConfirmation,[mbYes,mbAbort],0)) <> mrYes then
   begin
        BTN_AllgKopierenKlein.Down := false;
        Exit;
   end;

if (not (CopyNichtFragen)) then
   begin
        CopyVK := false;
        CopyEK := false;
        CopyEM := false;
        CopyMA := false;
        CopyME := false;
        CopyIS := false;
        CopyIB := false;
        CopyWH := false;
        CopyZusatzTexte := false;
        CopyMiniset := false;
        CopySL := false;
        CopyAP := false;
        CopyZusatz :=false;
        if (not (GetSaveOptions(CopyVK, CopyEK, CopyEM, CopyMA, CopyIS, CopyME, CopyIB, CopyWH, CopyZusatzTexte, CopyMiniset, CopySL, CopyAP, CopyZusatz, CopyNichtFragen, self))) then
            begin
                 BTN_AllgKopierenKlein.Down := false;
                 Exit;
            end; //** if (not (GetSaveOptions(CopyVK, CopyEK, CopyIB, CopyWH, CopyZusatzTexte, CopyMiniset, CopySL, CopyAP, CopyZusatz, CopyNichtFragen, self)))
   end; //** if (not (CopyNichtFragen))

CopyFromArtNr := EDT_ArtNr.Text;
BTN_AllgKopierenKlein.Hint := Format(rs_LV_KopiermodusOff,[CopyFromArtNr]);
CopyFlag := true;
UpdateButtons;
//** Wenn zwischenzeitlich von einem anderen Programm etwas verändert wurde,
//** wurden die alten Daten kopiert. Darum vorher ein Refresh PB 17.03.2022
PosMain(CurrArtNr, '', mpExact, false);
RCC_Artikel.CopyRecord;

if not BTN_AllgNeuKopieren.Down then
   begin
        BTN_AllgNeuKopieren.Down := true;
        BTN_AllgNeuKopierenClick(BTN_AllgNeuKopieren);
        EDT_KB.Text := SaveKB;
   end; //** if not BTN_AllgNeuKopieren.Down

end; //** procedure BTN_AllgKopierenKleinClick


(******************************************************************************)
(***             BTN_AllgLoeschen: OnClick                                  ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_AllgLoeschenClick(Sender: TObject);
var
   ArtNr: string;
begin
inherited;
if EDT_ArtNr.Text <> AQY_ArtikelStammARTNR.AsString then
   begin
        EDT_ArtNr.Text := AQY_ArtikelStammARTNR.AsString;
        Exit;
   end; //** if EDT_ArtNr.Text <> AQY_ArtikelStammARTNR.AsString

if not (GetLinkagePointer^.PRIV_LOESCHEN in ['J', 'L']) then
   begin
        NoPrivilege;
        Exit;
   end; //** if not (GetLinkagePointer^.PRIV_LOESCHEN in ['J', 'L'])

ArtNr := TrimRight(AQY_ArtikelStammARTNR.AsString);
if not CheckStammLoeschenOK(ArtNr) then
   Exit;

if (MessageDlg(Format(rs_LV_QDeleteArtikel,[ArtNr]), mtConfirmation,[mbYes,mbNo],0)) <> mrYes then
   Exit;
if not DeleteAllArtikelData(ArtNr) then
   ShowMessage(rs_LV_CouldntDelete);
end; //** procedure BTN_AllgLoeschenClick


(******************************************************************************)
(***               BTN_AllgEditDauerEdit: OnClick                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_AllgEditDauerEditClick(Sender: TObject);
begin

inherited;

if EDT_ArtNr.Text <> AQY_ArtikelStammARTNR.AsString then
   begin
        EDT_ArtNr.Text := AQY_ArtikelStammARTNR.AsString;
        BTN_AllgEditDauerEdit.Down := not (BTN_AllgEditDauerEdit.Down);
        Exit;
   end; //** if EDT_ArtNr.Text <> AQY_ArtikelStammARTNR.AsString

ArtikelStammBeforeEditSaveCancel(BTN_AllgEditDauerEdit);

if BTN_AllgEditDauerEdit.Down then
   begin
        OpenDataSources;
        Aendern := true;
        UpdateButtons;
        SetNebenTabellenEditOrCancel(true);

        with AQY_ArtikelStamm do
             try
                Cancel;            //** = dsBrowse
                if EDT_KB.CanFocus then
                   EDT_KB.SetFocus;   //** wichtig! Wenn Active = KB dann <> Spaceprüfung loop
                Edit;              //** Datenbank in EditModus
             except                //** Tritt auch durch Abort bei Semaphore-Test auf!
                BTN_AllgEditDauerEdit.Down := false;
                DTS_ArtikelStamm.AutoEdit := false;
                Aendern := false;
                DauerAendern := false;
                AQY_ArtikelStamm.Cancel;
                UpdateButtons;
                raise;
             end; //** try..except

   end //** if Button = nbEdit
else
   begin
        Aendern := false;
        DauerAendern := false;
        DTS_Artikelstamm.AutoEdit := false;
        AQY_ArtikelStamm.Cancel;
        UpdateButtons;
        SetNebenTabellenEditOrCancel(false);
   end; //** else-Zweig if BTN_AllgEditDauerEdit.Down

end; //** procedure BTN_AllgEditDauerEditClick


(******************************************************************************)
(***                     BTN_SelNavFirst: OnClick                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_SelNavFirstClick(Sender: TObject);
begin
inherited;
if ((Erfassen) or (Aendern)) then
   begin
        //** Änderung 10)
        //** Post und Processmsg gegen send ausgetauscht
        //** Application.ProcessMessages eh schlecht und Send arbeitet die msg ab
        //** erzwinge FeldExit
        //PostMessage(Handle, WM_NextDlgCtl, 1, 0);
        //PostMessage(Handle, WM_NextDlgCtl, 0, 0);
        SendMessage(Handle, WM_NextDlgCtl, 1, 0);
        SendMessage(Handle, WM_NextDlgCtl, 0, 0);
        //Application.ProcessMessages;
        //** Änderung 10)
   end; //** if ((Erfassen) or (Aendern))
KeyIndex := 0;
MoveToKey;
UpdateNavi;
end; //** procedure BTN_SelNavFirstClick


(******************************************************************************)
(***                BTN_SelNav10Back: OnClick                               ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_SelNav10BackClick(Sender: TObject);
begin

inherited;
if ((Erfassen) or (Aendern)) then
   begin
        //** Änderung 10)
        //** Post und Processmsg gegen send ausgetauscht
        //** Application.ProcessMessages eh schlecht und Send arbeitet die msg ab
        //** erzwinge FeldExit
        //PostMessage(Handle, WM_NextDlgCtl, 1, 0);
        //PostMessage(Handle, WM_NextDlgCtl, 0, 0);
        SendMessage(Handle, WM_NextDlgCtl, 1, 0);
        SendMessage(Handle, WM_NextDlgCtl, 0, 0);
        //Application.ProcessMessages;
        //** Änderung 10)
   end; //** if ((Erfassen) or (Aendern))

KeyIndex := Keyindex -10;

if KeyIndex < 0 then
   KeyIndex := 0;

MoveToKey;
UpdateNavi;
end; //** procedure BTN_SelNav10BackClick


(******************************************************************************)
(***                     BTN_SelNav10Forward: OnClick                       ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_SelNav10ForwardClick(Sender: TObject);
begin

inherited;
if ((Erfassen) or (Aendern)) then
   begin
        //** Änderung 10)
        //** Post und Processmsg gegen send ausgetauscht
        //** Application.ProcessMessages eh schlecht und Send arbeitet die msg ab
        //** erzwinge FeldExit
        //PostMessage(Handle, WM_NextDlgCtl, 1, 0);
        //PostMessage(Handle, WM_NextDlgCtl, 0, 0);
        SendMessage(Handle, WM_NextDlgCtl, 1, 0);
        SendMessage(Handle, WM_NextDlgCtl, 0, 0);
        //Application.ProcessMessages;
        //** Änderung 10)
   end; //** if ((Erfassen) or (Aendern))

KeyIndex := Keyindex + 10;

if KeyIndex > (KeyList.Count -1) then
   KeyIndex := (KeyList.Count -1);

MoveToKey;
UpdateNavi;

end; //** procedure BTN_SelNav10ForwardClick


(******************************************************************************)
(***                    BTN_SelNavPrior: OnClick                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_SelNavPriorClick(Sender: TObject);
begin
inherited;
if ((Erfassen) or (Aendern)) then
   begin
        //** Änderung 10)
        //** Post und Processmsg gegen send ausgetauscht
        //** Application.ProcessMessages eh schlecht und Send arbeitet die msg ab
        //** erzwinge FeldExit
        //PostMessage(Handle, WM_NextDlgCtl, 1, 0);
        //PostMessage(Handle, WM_NextDlgCtl, 0, 0);
        SendMessage(Handle, WM_NextDlgCtl, 1, 0);
        SendMessage(Handle, WM_NextDlgCtl, 0, 0);
        //Application.ProcessMessages;
        //** Änderung 10)
   end; //** if ((Erfassen) or (Aendern))

Dec(KeyIndex);
if KeyIndex < 0 then
   KeyIndex := 0;
MoveToKey;
UpdateNavi;
end; //** procedure BTN_SelNavPriorClick


(******************************************************************************)
(***                      BTN_SelNavNext: OnClick                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_SelNavNextClick(Sender: TObject);
begin
inherited;
if ((Erfassen) or (Aendern)) then
   begin
        //** Änderung 10)
        //** Post und Processmsg gegen send ausgetauscht
        //** Application.ProcessMessages eh schlecht und Send arbeitet die msg ab
        //** erzwinge FeldExit
        //PostMessage(Handle, WM_NextDlgCtl, 1, 0);
        //PostMessage(Handle, WM_NextDlgCtl, 0, 0);
        SendMessage(Handle, WM_NextDlgCtl, 1, 0);
        SendMessage(Handle, WM_NextDlgCtl, 0, 0);
        //Application.ProcessMessages;
        //** Änderung 10)
   end; //** if ((Erfassen) or (Aendern))

Inc(KeyIndex);
if KeyIndex > (KeyList.Count -1) then
   KeyIndex := (KeyList.Count -1);
MoveToKey;
UpdateNavi;
end; //** procedure BTN_SelNavNextClick


(******************************************************************************)
(***                     BTN_SelNavLast: OnClick                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_SelNavLastClick(Sender: TObject);
begin
inherited;
if ((Erfassen) or (Aendern)) then
   begin
        //** Änderung 10)
        //** Post und Processmsg gegen send ausgetauscht
        //** Application.ProcessMessages eh schlecht und Send arbeitet die msg ab
        //** erzwinge FeldExit
        //PostMessage(Handle, WM_NextDlgCtl, 1, 0);
        //PostMessage(Handle, WM_NextDlgCtl, 0, 0);
        SendMessage(Handle, WM_NextDlgCtl, 1, 0);
        SendMessage(Handle, WM_NextDlgCtl, 0, 0);
        //Application.ProcessMessages;
        //** Änderung 10)
   end; //** if ((Erfassen) or (Aendern))
KeyIndex := KeyList.count -1;
MoveToKey;
UpdateNavi;
end; //** procedure BTN_SelNavLastClick


(******************************************************************************)
(***                   BTN_SelNavLoeschen: OnClick                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_SelNavLoeschenClick(Sender: TObject);
begin
inherited;
KeyList.Delete(KeyIndex);
if KeyIndex > (KeyList.Count -1) then
   KeyIndex := (KeyList.Count -1);
if KeyList.Count < 1 then
   begin
        BGP_SelNavBarGruppe.Visible := ivNever;
        KeyList.Clear;
        KeyIndex := -1;
   end
else
   begin
        MoveToKey;
        UpdateNavi;
   end; //** if KeyList.Count < 1
UpdateButtons;
end; //** procedure BTN_SelNavLoeschenClick


(******************************************************************************)
(***                    BTN_SelNavStop: OnClick                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_SelNavStopClick(Sender: TObject);
begin
inherited;
if (MessageDlg(rs_LV_QBearbeitenAuswahlBeenden, mtConfirmation,[mbYes,mbNo],0)) <> mrYes then
   Exit;
BGP_SelNavBarGruppe.Visible := ivNever;
KeyList.Clear;
KeyIndex := -1;
UpdateButtons;
end; //** procedure BTN_SelNavStopClick


(******************************************************************************)
(***                       BTN_SelNavSL: OnClick                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_SelNavSLClick(Sender: TObject);
var
   Hauptartikel   : boolean;
   Alle,
   MasterSW1,
   MasterSW2,
   MasterSW3,
   MaxLevel,
   MasterVariante : integer;
   MasterArtNr    : TUCStringArtNr;
   Menge          : currency;
   i,
   n              : integer;
   dummy1,
   dummy2         : boolean;
   FSuchAUBEParams : TSuchAUBEParams;
   MasterRev      : string;

         (*********************************************************************)
         (***      lokale function ReadInStruktur                           ***)
         (*********************************************************************)
          function ReadInStruktur: boolean;
          var
             x       : TLagerMemKey;
             s,
             SL_JN   : string;
             AValues : array [0..0] of Variant;

          begin
          result := true;

          with AQY_Divers do
               try
                  First;
                  while not EOF do
                        begin
                             s := AQY_Divers.Fields[3].AsString;
                             shbExpandString(s, LengthOfArtNr, ' ', false);
                             if ReadAnyFields (GetDobosADB,
                                               'ARTIKEL_STAMM',
                                               'WHERE ARTNR = '''+Trim(s)+''' ',
                                               ['SL_JN'],
                                                AValues) then
                                try
                                    SL_JN := AValues[0];
                                except
                                    SL_JN := 'N';
                                end; //** try..except

                             if ((Alle = 0) or
                                 ((Alle = 1) and (SL_JN = 'J')) or
                                 ((Alle = 2) and (SL_JN = 'N'))) then
                                begin
                                     if ((Assigned(KeyList) and (s > ''))) then
                                        begin
                                             x.MArtNr := s;
                                             x.MVariante := 0;
                                        end; //** if ((Assigned(KeyList) and (s > ''))) then

                                     if KeyList.IndexOf(@x, SizeOf(TLagerMemKey)) < 0 then
                                        KeyIndex := KeyList.Add(@x, SizeOf(TLagerMemKey));
                                end; //** if ((not NurBaugruppen) or ...

                             Next;
                        end; //** while not EOF do
                  if Active then
                     Close;

              except
                  on E:Exception do
                     begin
                          result := false;
                          UnShowSQLWait;
                          ShowMessage(E.Message);
                     end; //** on E:Exception do
              end; //** try..except

          end; //** lokale function ReadInStruktur

         (*********************************************************************)
         (***      lokale function ReadInArtikel                            ***)
         (*********************************************************************)
          function ReadInArtikel(const aSingle : boolean): boolean;
          begin

          if not ASingle then
             begin
                  PosMain(MasterArtNr, '', mpExact, true);
                  if Hauptartikel then
                     BTN_MarkSmallClick(nil);
             end; //** if not ASingle

          if (AQY_ArtikelStammSL_JN.AsString = 'J') then
             //** Auflösen der Struktur **//
             try
                ShowSQLWait;
                with AQY_Divers do
                     try
                        if Active then
                           Close;
                        Connection := GetDobosADB;
                        SQL.Clear;
                        SQL.Add('EXECUTE GP_PROCESS_SL '''+SQLTextString(MasterArtNr)+''', '+SQLZahlStr(Menge)+',  '+IntToStr(MasterVariante)+', '+IntToStr(MaxLevel)+', ''N'', '+IntToStr(MasterSW1)+', '+IntToStr(MasterSW2)+', '+IntToStr(MasterSW3)+' ');
                        UCOpenSQL(AQY_Divers);
                     except
                         on E:Exception do
                            begin
                                 UnShowSQLWait;
                                 ShowMessage(E.Message);
                                 raise EAbort.Create('');
                            end; //** on E:Exception do
                     end; //** try..except

             finally
                ReadInStruktur;
                if ASingle then
                   begin
                        UnShowSQLWait;
                        BGP_SelNavBarGruppe.Visible := ivAlways;
                        UpdateNavi;
                        UpDateButtons;
                   end; //** if not aSingle
             end; //** outer try..finally

          end; //** lokale function ReadInArtikel


         (*********************************************************************)
         (***      lokale function ReadInRohmaterial                        ***)
         (*********************************************************************)
          function ReadInRohmaterial: boolean;
          var
             x       : TLagerMemKey;
             s,
             SL_JN   : string;
             AValues : array [0..0] of Variant;

          begin
          result := true;

          with AQY_Divers do
               try
                  if Active then
                     Close;
                  if MasterRev <> 'ungueltig' then
                     s := ' SELECT ARTNR FROM DV_STD_POSTEN WHERE HAUPT_ARTNR = '''+SQLTextString(MasterArtNr)+'''  '
                       +' AND REVISION = '''+SQLTextString(MasterRev)+''' AND ART = ''L''';

                  if MasterRev = 'NurEinAP' then
                     s := ' SELECT ARTNR FROM DV_STD_POSTEN WHERE HAUPT_ARTNR = '''+SQLTextString(MasterArtNr)+'''  '
                       +' AND ART = ''L''';
                  SQL.Text := s;
                  UCOpenSQL(AQY_Divers);
                  First;
                  while not EOF do
                        begin
                             s := AQY_Divers.Fields[0].AsString;
                             shbExpandString(s, LengthOfArtNr, ' ', false);

                             if ((Assigned(KeyList) and (s > ''))) then
                                 begin
                                      x.MArtNr := s;
                                      //x.MVariante := 0;
                                 end; //** if ((Assigned(KeyList) and (s > ''))) then

                                     if KeyList.IndexOf(@x, SizeOf(TLagerMemKey)) < 0 then
                                        KeyIndex := KeyList.Add(@x, SizeOf(TLagerMemKey));
                             Next;
                        end; //** while not EOF do
                  if Active then
                     Close;

              except
                  on E:Exception do
                     begin
                          result := false;
                          UnShowSQLWait;
                          ShowMessage(E.Message);
                     end; //** on E:Exception do
              end; //** try..except

          end; //** lokale function ReadInRohmaterial

(******************************************************************************)
(***  Start der procedure SBT_MarkMouseDown                                 ***)
(******************************************************************************)

begin

inherited;
if Sender = BTN_SelNavSL then
   n := 0
else
   if Sender = BTN_SelNavAuftragMitSL then
      n := 1
   else
      if Sender = BTN_SelNavAP then
         n := 2
      else
         Exit;

if ((n < 0) or (n > 2)) then
   Exit;

Hauptartikel := true;
Alle := 0;
MaxLevel := 14;
MasterVariante := 0;
MasterSW1 := 0;
MasterSW2 := 0;
MasterSW3 := 0;
MasterArtNr := TrimRight(AQY_ArtikelStammARTNR.AsString);
Menge := 1.00;
MasterRev := 'ungueltig';

if n = 0 then
   if (AQY_ArtikelStammSL_JN.AsString = 'J') then
      begin
           if not SLParameter (Hauptartikel, Alle, MaxLevel) then
              Exit;
           MasterVariante := GetVariantenNummer(MasterArtNr, true);
           if MasterVariante = -1 then
              Exit;
           if Hauptartikel then
              BTN_MarkSmallClick(nil);

           ReadInArtikel(true);

           Exit;
      end
   else
      Exit;

//** ab hier Auftrag
if ((n = 0) or (n = 1)) then
   if not SLParameter (Hauptartikel, Alle, MaxLevel) then
   Exit;

if n = 1 then
   begin
        with FSuchAUBEParams do
             try
                AKuNu := 0;
                ASammlerID := 0;
                AFunction := 0;
                AFunction := 0;  //** Aufträge, Angebote
                ANummer := 0;
                AVorgangsNr := -1;
                AComponent:= Self;
                ACallingProg := cpSuchenABBE_LagerUndLagerInfo;
                AListPointer := nil;
                AArt := 'A';
                AArtNr := '';
                ModalCallActive := true;
                i := Call (dnDobosSuchen, 'suchenaube', @FSuchAUBEParams);
                if i <> 1 then
                   Exit;

                with AQY_Auftrag do
                     try
                        if Active then
                           Close;
                        Connection := GetDobosADB;
                        SQL.Clear;
                        SQL.Add('SELECT ARTNR, VARIANTE, SW1, SW2, SW3, BESTELLT FROM AUFTRAG_POSTEN WHERE ART = ''A'' AND ZEILEN_ART = ''L'' AND '
                               +'KUNU = '+IntToStr(FSuchAUBEParams.AKuNu)+' AND '
                               +'NUMMER ='+IntToStr(FSuchAUBEParams.ANummer) +' '
                               +'ORDER BY ART, KUNU, NUMMER, LFD_NR ');
                        UCOpenSQL(AQY_Auftrag);
                        while not EOF do
                              begin
                                   Menge := FieldByName('BESTELLT').AsCurrency;
                                   MasterVariante := FieldByName('VARIANTE').AsInteger;
                                   MasterSW1 := FieldByName('SW1').AsInteger;
                                   MasterSW2 := FieldByName('SW2').AsInteger;
                                   MasterSW3 := FieldByName('SW3').AsInteger;
                                   MasterArtNr := FieldByName('ARTNR').AsString;
                                   ReadInArtikel(false);
                                   Next;
                              end; //** while not EOF do

                        Close;

                     except
                        on E:Exception do
                           begin
                                UnShowSQLWait;
                                ShowMessage(E.Message);
                           end; //** on E:Exception do
                     end; //** with FSuchAUBEParams do

             finally
                ModalCallActive := false;
                UnShowSQLWait;
                with AQY_Auftrag do
                     if Active then
                        Close;
                if KeyList.Count > 0 then
                   BGP_SelNavBarGruppe.Visible := ivAlways;
                UpdateNavi;
                UpDateButtons;

             end; //** try..finally

   end; //** if n = 1

//**Rohmaterial eines APs
if n = 2 then
   try
      MasterRev := GetRevNummer(MasterArtNr, true);
      if MasterRev <> 'ungueltig' then
         ReadInRohmaterial;
   finally
      ModalCallActive := false;
      UnShowSQLWait;
      with AQY_Auftrag do
           if Active then
              Close;
      if KeyList.Count > 0 then
        BGP_SelNavBarGruppe.Visible := ivAlways;
      UpdateNavi;
      UpDateButtons;
   end; //** try..finally

end; //** procedure BTN_SelNavSLClick


(******************************************************************************)
(***                 ArtikelStammBeforeEditSaveCancel                       ***)
(******************************************************************************)

procedure TFRM_DobosLV.ArtikelStammBeforeEditSaveCancel(Sender: TObject);
var
   ADown : boolean;
begin

if Sender = BTN_AllgEditDauerEdit then
   ADown := BTN_AllgEditDauerEdit.Down;

if AQY_ArtikelStamm.State in [dsInsert, dsEdit] then
   begin
        //** Änderung 10)
        //** Post und Processmsg gegen send ausgetauscht
        //** Application.ProcessMessages eh schlecht und Send arbeitet die msg ab
        //** erzwinge FeldExit
        //PostMessage(Handle, WM_NextDlgCtl, 1, 0);
        //PostMessage(Handle, WM_NextDlgCtl, 0, 0);
        SendMessage(Handle, WM_NextDlgCtl, 1, 0);
        SendMessage(Handle, WM_NextDlgCtl, 0, 0);
        //Application.ProcessMessages;
        //** Änderung 10)

        if Screen.ActiveControl = EDT_BEZ_1 then
           AQY_ArtikelStammBEZ_1.AsString := EDT_BEZ_1.Text
        else
           if Screen.ActiveControl = EDT_ZN then
              AQY_ArtikelStammZN.AsString := EDT_ZN.Text
           else
              if Screen.ActiveControl = EDT_BN then
                 AQY_ArtikelStammBN.AsString := EDT_BN.Text
              else
                 if Screen.ActiveControl = EDT_KB then
                    if isSpace(EDT_KB.Text) then
                       EDT_KB.SetFocus
                    else
                       AQY_ArtikelStammKB.AsString := EDT_KB.Text;
   end; //** if AQY_ArtikelStamm.State in [dsInsert, dsEdit]

if Sender = BTN_AllgEditDauerEdit then
   BTN_AllgEditDauerEdit.Down := ADown;

//** Änderung 8) kommt da nicht rein deswegen unnötig
{
if EDT_ArtNr.Text <> AQY_ArtikelStammARTNR.AsString then
   begin
        EDT_ArtNr.Text := AQY_ArtikelStammARTNR.AsString;
        Abort;
        Exit;
   end; //** if EDT_ArtNr.Text <> AQY_ArtikelStammARTNR.AsString
}
//** Änderung 8)

NavClicked := true;
CheckNebenTabellen(false);
NavClicked := false;

end; //** procedure ArtikelStammBeforeEditSaveCancel


(******************************************************************************)
(***                   AskSelektionVerwerfen                                ***)
(******************************************************************************)

function TFRM_DobosLV.AskSelektionVerwerfen: TModalResult;
begin

result := SHBTaskDialog(rs_LV_SelNav,
                       rs_LV_QSelNavVerwerfen,
                       rs_LV_SelNavVorhanden,
                       Self,
                       [tfAllowDialogCancellation],
                       '', //** no merken
                       [tcbCancel],
                       tdiInformation,
                       [
                        FillTaskButtonArray(rs_LV_SelNavErweitern, mrNo),
                        FillTaskButtonArray(rs_LV_SelNavVerwerfen, mrYes)
                       ]).fModalResult;

end; //** procedure AskSelektionVerwerfen


(******************************************************************************)
(***               RBT_PreiseAktuellClick (alle Preis-Radiobuttons)         ***)
(******************************************************************************)

procedure TFRM_DobosLV.RBT_PreiseAktuellClick(Sender: TObject);
var
   Art   : string;
   ws    : integer;

begin
inherited;
//** Seit ADO muß hier persönlich gefiltert werden, ignoriert upper/lower Case
//** Siehe "OnFilter"
with AQY_Preise do
     begin
          if State = dsInsert then
             Exit;
          Art := FieldByName('ART').AsString;
          ws := FieldByName('WS').AsInteger;

          Close;
          Open;  //** Einfaches ReOpen, kein UCChange machen!
          //** Locate funktioniert hier mit ADO nicht, Upper/Lowercase wird ignoriert!!
          First;
          try
             DTS_Preise.Enabled := false;
             while not EOF do
                   begin
                        if (AQY_PreiseWS.AsInteger = ws) then
                            Break;
                        Next;
                   end; //** while not EOF do
          finally
             DTS_Preise.Enabled := true;
          end; //** try..finally
     end; //** with AQY_Preise do
UpdatePreiseButtons;
end; //** procedure RBT_PreiseAktuellClick


(******************************************************************************)
(***           LYI_Artikelnummer: OnCaptionClick                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.LYI_ArtikelnummerCaptionClick(Sender: TObject);
begin
inherited;
if Sender = LYI_Artikelnummer then
   SortOrder := asArtNr
else
   if Sender = LYI_Kurzbezeichnung then
      SortOrder := asKB
   else
      if Sender = LYI_Bestellnummer then
         SortOrder := asBN
      else
         if Sender = LYI_Zeichnungsnummer then
            SortOrder := asZN
         else
            if Sender = LYI_Bezeichnung1 then
               SortOrder := asBez_1;
SetzeKey;

end; //** procedure LYI_ArtikelnummerCaptionClick


(******************************************************************************)
(***              LYC_Lagerverwaltung: OnGetItemStoredProperties            ***)
(******************************************************************************)

procedure TFRM_DobosLV.LYC_LagerverwaltungGetItemStoredProperties(Sender: TdxCustomLayoutControl;
                                                                  AItem: TdxCustomLayoutItem; AProperties: TStrings);
var
  i: Integer;

begin

//** Caption löschen weil dynamisch zugeteilte captions nicht im Layout drinnen stehen sollen
//** Caption nur für SHBEdits nicht speichern. Sonst werden alle UserCaptions gelöscht

if AItem is TdxLayoutItem then
   if Assigned((AItem as TdxLayoutItem).Control) then
      if (AItem as TdxLayoutItem).Control is TSHBBaseEdit then
         AProperties.Add('Tag');

//** Nur für GV/Sackkunden: Captions speicherbar
if ((BTN_SaveLayoutCaptions.Down) and (not(isSHB))) then
   Exit;

if AItem is TdxLayoutItem then
   if Assigned((AItem as TdxLayoutItem).Control) then
      if (AItem as TdxLayoutItem).Control is TSHBBaseEdit then
         begin
              i := AProperties.IndexOf('Caption');
              if i > -1 then
                 begin
                      if BTN_SaveLayoutCaptions.Down = false then
                         begin
                              ShowMessage(rs_LV_LayoutControlCaptionAendernAktiviert);
                              BTN_SaveLayoutCaptions.Down := true;
                              BTN_SaveLayoutCaptionsClick(BTN_SaveLayoutCaptions);
                              Exit;
                         end
                      else
                         AProperties.Delete(i);
                 end;
         end; //** if (AItem as TdxLayoutItem).Control is TSHBBaseEdit then

end; //** LYC_LagerverwaltungGetItemStoredProperties


(******************************************************************************)
(***           LYC_Lagerverwaltung: OnGetItemStoredPropertyValue            ***)
(******************************************************************************)

procedure TFRM_DobosLV.LYC_LagerverwaltungGetItemStoredPropertyValue(
  Sender: TdxCustomLayoutControl; AItem: TdxCustomLayoutItem;
  const AName: string; var AValue: Variant);
begin

inherited;

if AName = 'Tag' then
   AValue := AItem.Tag;

end; //** procedure LYC_LagerverwaltungGetItemStoredPropertyValue


(******************************************************************************)
(***           LYC_Lagerverwaltung: OnSetItemStoredPropertyValue            ***)
(******************************************************************************)

procedure TFRM_DobosLV.LYC_LagerverwaltungSetItemStoredPropertyValue(
  Sender: TdxCustomLayoutControl; AItem: TdxCustomLayoutItem;
  const AName: string; const AValue: Variant);
begin

inherited;

if AName = 'Tag' then
   AItem.Tag := AValue;

end; //** procedure LYC_LagerverwaltungSetItemStoredPropertyValue


(******************************************************************************)
(***                    SHBSaveDesignLayoutIniFile                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.SHBSaveDesignLayoutIniFile;
var
   aStreamName,
   aFileName,
   aFilePath : string;
   AStream : TMemoryStream;
   dummy : boolean;

begin



case GetVarRDGDlg('Layout-Format',['minimum','4_3','16_9','Hilfsstoffe(Std)','Rohmaterial(Std)','Eigenfertigung(Std)'],0,false,dummy,dummy) of
     0 : begin
             aFileName := 'minimum.ini';
             aStreamName := 'MINIMUM.STREAM';
         end;
     1 : begin
              aFileName := '4_3.ini';
              aStreamName := '4_3.STREAM';
         end;
     2 : begin
              aFileName := '16_9.ini';
              aStreamName := '16_9.STREAM';
         end;
     3 : begin
              aFileName := 'Hilfsstoffe_Std.ini';
              aStreamName := 'Hilfsstoffe_Std.STREAM';
        end;
     4 : begin
              aFileName := 'Rohmaterial_Std.ini';
              aStreamName := 'Rohmaterial_Std.STREAM';
         end;
     5 : begin
              aFileName := 'Eigenfertigung_Std.ini';
              aStreamName := 'Eigenfertigung_Std.STREAM';
         end;
     else
        Exit;

end; //** case GetVarRDGDlg

with TFileSaveDialog.Create(nil) do
     try
        with FileTypes.Add do
             begin
                  DisplayName := aFileName;
                  FileMask := '*.ini';
             end;
       Options := [fdoOverWritePrompt, fdoPathMustExist, fdoForceFileSystem]; // YMMV
       AFilePath := GetLayoutFormPath;
       SysUtils.ForceDirectories(AFilePath);
       DefaultFolder := AFilePath+'\'+self.ClassName; //TFRM_DobosLV';
       SysUtils.ForceDirectories(DefaultFolder);
       DefaultExtension := 'ini';
       FileName := aFileName;
       if Execute then
          aFileName := FileName
       else
          Exit;
     finally
       Free;
     end;

Showmessage(aFileName);
LYC_Lagerverwaltung.Container.StoreToIniFile(aFileName,true,'VERSION121');

//** neu: Stream für LinkToResource in BIOS2000
try
   AFilePath := GetLayoutStreamPath+'\'+self.ClassName;
   SysUtils.ForceDirectories(AFilePath);
   AStream := TMemoryStream.Create;
   LYC_Lagerverwaltung.Container.StoreToStream(AStream, 'VERSION121');
   AStream.SaveToFile(AFilePath+'\'+aStreamName);
finally
   FreeAndnil(AStream);

end; //** try..finally

end; //** procedure SHBSaveDesignLayoutIniFile


(******************************************************************************)
(***                                                                        ***)
(******************************************************************************)


//** War eigentlich eingebaut, damit das anpassen schneller geht
//** Jetzt ausgebaut, weil der gegenteilige Effekt eintrat PB 17.10.2019


{ TMydxLayoutControl }

function TMydxLayoutControl.GetContainerClass: TdxLayoutControlContainerClass;
begin
  Result := TMydxLayoutControlContainer;
end;

{ TMydxLayoutControlContainer }

function TMydxLayoutControlContainer.IsFloatingSupported: Boolean;
begin
  Result := False;
end;

{ TMydxLayoutControl }

function TMydxLayoutControl.GetScrollStep: Integer;
begin
//result := inherited;
result := 20;
end;


(******************************************************************************)
(***      BTN_SaveLayoutCaptions: OnClick                                   ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_SaveLayoutCaptionsClick(Sender: TObject);
var
   i : integer;
   ARootKey   : HKEY;
   APath      : string;
   AKey       : string;
   AValue     : Integer;
   ASize      : integer;
   ABool      : boolean;

begin

inherited;
//** Layout: Captions speichern
ARootKey := HKEY_CURRENT_USER;
APath := Registry_BiosPfad+'\SaveLayoutCaptions';
AKey := Self.ClassName;
ASize := SizeOf(Boolean);
ABool := BTN_SaveLayoutCaptions.Down;
ReadWriteRegistry(wrBool, true, ARootKey, APath, AKey, ABool, ASize);

end; //** procedure BTN_SaveLayoutCaptionsClick


(******************************************************************************)
(***      BTN_SaveSHBLayoufile: OnClick                                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_SaveSHBLayoufileClick(Sender: TObject);
begin

inherited;

SHBSaveDesignLayoutIniFile;

end; //** procedure BTN_SaveSHBLayoufileClick


(******************************************************************************)
(***                       FillImageCollection                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.FillImageCollection;
var
   AItem: TcxImageCollectionItem;
   MS: TMemoryStream;
   Pict : TWICImage;
begin

IMC_Bilder.Items.Clear;
if not (((AQY_Bild.Active) and (AQY_Bild.RecordCount > 0))) then
   Exit;

MS := TMemoryStream.Create;
Pict := TWICImage.Create;
try
   try
      begin
           AQY_Bild.First;
           while not AQY_Bild.Eof do
                 begin
                      AItem := IMC_Bilder.Items.Add;
                      MS.Clear;
                      MS.Position := 0;
                      AQY_BildFILE_INHALT.SaveToStream(MS);
                      MS.Position := 0;
                      try
                         //Pict := TWICImage.Create;
                         Pict.LoadFromStream(MS);
                         if ((Pict.Width < 10000) and
                             (Pict.Height < 5625)) then
                            begin
                                 AItem.Picture.Assign(Pict);
                            end;
                      finally
                          //FreeAndNil(Pict);
                         // FreeAndNil(MS);
                      end; //** try..finally
                      AQY_Bild.Next;
                 end;

      end; //** if AQY_Bild.RecordCount > 0 then

   except
   end; //** stille exception...

if ((AQY_Bild.Active) and (AQY_Bild.RecordCount > 0)) then
   begin
        LYI_Bild.CaptionOptions.Visible := false;
        LYI_Bild.Caption := '';
   end
else
   begin
        LYI_Bild.CaptionOptions.Visible := true;
        LYI_Bild.Caption := rs_LV_KeineBilderVorhanden;
   end


finally
   if Assigned(MS) then
      FreeAndNil(MS);
   if Assigned(Pict) then
      FreeAndNil(Pict);
end; //** try..finally

end; //** procedure FillImageCollection


(******************************************************************************)
(***                   SetNebenTabellenEditOrCancel                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.SetNebenTabellenEditOrCancel(const AEdit: boolean);
begin

if AEdit then
   begin
        if SBT_LiefEdit.Enabled then
           SBT_LiefEditClick(self);
        if SBT_PreiseEdit.Enabled then
           SBT_PreiseEditClick(self);
        if SBT_MiniSetEdit.Enabled then
           SBT_MiniSetEditClick(self);
        if SBT_MiniSetEdit.Enabled then
           SBT_MiniSetEditClick(self);
        if SBT_LagerEdit.Enabled then
           SBT_LagerEditClick(self);
        if SBT_FremdTextEdit.Enabled then
           SBT_FremdTextEditClick(self);
        if SBT_DVKalkEdit.Enabled then
           SBT_DVKalkEditClick(self);
   end //** if AEdit then
else
   begin
        with AQY_Lieferant do
             if State in [dsEdit,dsInsert] then
                try
                   Cancel;
                   UpdateLiefButtons;
                except
                   raise;
                end; //** try..except

        with AQY_Preise do
             if State in [dsEdit,dsInsert] then
                try
                   Cancel;
                   UpdatePreiseButtons;
                except
                   raise;
                end; //** try..except

        with AQY_FremdTexte do
             if State in [dsEdit,dsInsert] then
                try
                   Cancel;
                   UpdateFremdTexteButtons;
                except
                   raise;
                end; //** try..except

        with AQY_DVKalk do
             if State in [dsEdit,dsInsert] then
                try
                   Cancel;
                   UpdateDVKalkButtons;
                except
                   raise;
                end; //** try..except

        with AQY_Lager do
             if State in [dsEdit,dsInsert] then
                try
                   Cancel;
                   UpdateLagerButtons;
                except
                   raise;
                end; //** try..except
   end;

end; //** procedure SetNebenTabellenEditOrCancel


(******************************************************************************)
(***                   SetOptionUseBadges                                   ***)
(******************************************************************************)

procedure TFRM_DobosLV.SetOptionUseBadges(const AActive, ASave: boolean);
begin
{
if AActive then
   showbadges := true
else
   showbadges := false;
}
end; //** procedure SetOptionUseBadges


(******************************************************************************)
(***                   SaveUseBadges                                        ***)
(******************************************************************************)

procedure TFRM_DobosLV.SaveUseBadges;
var
   ARootKey   : HKEY;
   APath      : string;
   AKey       : string;
   ABool      : boolean;
   ASize      : integer;
begin

try
   //** Spinbuttons immer anzeigen
   ARootKey := HKEY_CURRENT_USER;
   APath := Registry_BiosPfad+'\UseBadgesLV';
   //** Schlüssel ggfs anlegen
   AKey := 'UseBadgesLV';
   ABool := BTN_UseBadges.Down;
   ASize := SizeOf(ABool);
   ReadWriteRegistry(wrBool, true, ARootKey, APath, AKey, ABool, ASize);

except
end;

end; //** procedure SaveUseBadges


(******************************************************************************)
(***                     LoadAndSetUseBadges                                ***)
(******************************************************************************)

procedure TFRM_DobosLV.LoadAndSetUseBadges;

var
   ARootKey   : HKEY;
   APath      : string;
   AKey       : string;
   ABool      : boolean;
   ASize      : integer;
begin
{
try
   //** Spinbuttons immer anzeigen
   ARootKey := HKEY_CURRENT_USER;
   APath := Registry_BiosPfad+'\UseBadgesLV';
   //** Schlüssel ggfs anlegen
   AKey := 'UseBadgesLV';
   ABool := false;
   ASize := SizeOf(ABool);
   ReadWriteRegistry(rdBool, true, ARootKey, APath, AKey, ABool, ASize);
   BTN_UseBadges.Down := ABool;
   SetOptionUseBadges(ABool);

except
end;
}
end; //* procedure LoadAndSetUseBadges

(******************************************************************************)
(***                    BTN_UseBadges: OnClick                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_UseBadgesClick(Sender: TObject);
begin

inherited;
{
SetOptionUseBadges(BTN_UseBadges.Down);
SaveUseBadges;
}
end; //** procedure BTN_UseBadgesClick


(******************************************************************************)
(***                  SetAWBWFACFHintsAndBadge                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.SetHintsAndBadge;
var
   //s,s1,s2,s3 : string;
   i1,i2 : integer;
begin

with AQY_Badges do
     begin
          if not Active then
             Exit;
          {
          UIA_AdornerLVBadgeAUAG.Text := '';
          UIA_AdornerLVBadgeAFBE.Text := '';
          UIA_AdornerLVBadgeAPFA.Text   := '';
          UIA_AdornerLVBadgeKontrakte.Text   := '';
          UIA_AdornerLVBadgeRepAuftraege.Text   := '';
          UIA_AdornerLVBadgeFehlmengen.Text := '';
          UIA_AdornerLVBadgeRueckstaende.Text := '';
          }
          //s  := rs_LV_AUAGStartHint;
          //s1 := rs_LV_KeineAuftraegeAngeboteVorhanden;
          //s2 := rs_LV_AFBEStartHint;
          //s3 := rs_LV_KeineAnfragenBestellungenVorhanden;
          {
          //** Aufträge Fields[0] & Angebote Fields [15]
          if Fields[0].AsInteger > 0 then
             begin
                  UIA_AdornerLVBadgeAUAG.Text  := IntToStr(Fields[0].AsInteger);

                  BTN_LoadAU.Hint := s + skReturn
                                   +Format(rs_LV_Vorhanden,[Fields[0].AsInteger])      +skReturn
                                   +Format(rs_LV_AuftragFakturierbereit,[Fields[1].AsInteger]) +skReturn
                                   +Format(rs_LV_AuftragLSDruckbereit,[Fields[2].AsInteger])   +skReturn
                                   +Format(rs_LV_TerminUeber,[Fields[3].AsInteger])     +skReturn;
             end  //** Fields 0 > 0
          else
             begin
                  BTN_LoadAU.Hint := s + skReturn + s1 ;
             end; //** else von Fields

          if Fields[15].AsInteger > 0 then
             begin
                  UIA_AdornerLVBadgeAUAG.Text  := IntToStr(Fields[0].AsInteger + Fields[15].AsInteger);

                  BTN_LoadAU.Hint := s + skReturn
                                   +Format(rs_LV_Vorhanden,[Fields[0].AsInteger])      +skReturn
                                   +Format(rs_LV_AuftragFakturierbereit,[Fields[1].AsInteger]) +skReturn
                                   +Format(rs_LV_AuftragLSDruckbereit,[Fields[2].AsInteger])   +skReturn
                                   +Format(rs_LV_TerminUeber,[Fields[3].AsInteger])     +skReturn;
             end //** Fields 15 > 0
          else
             begin
                  BTN_LoadAU.Hint := s + skReturn + s1 ;
             end; //** else vpon Fields
          }
          if (Fields[0].AsInteger > 0) or (Fields[15].AsInteger > 0) then
             BTN_LoadAU.Caption := Format(rs_LV_AUAGCaption,[Fields[15].AsInteger,Fields[0].AsInteger])
          else
             BTN_LoadAU.Caption := rs_LV_AUAGStartCaption;
          {
          //** Bestellungen [Fields4] & Anfragen Fields [16]
          if Fields[4].AsInteger > 0  then
             begin
                  UIA_AdornerLVBadgeAFBE.Text  := IntToStr(Fields[4].AsInteger);
                  BTN_LoadBE.Hint := s2 + skReturn
                                    +Format(rs_LV_Vorhanden,[Fields[4].AsInteger]) +skReturn
                                    +Format(rs_LV_TerminUeber,[Fields[5].AsInteger])+skReturn;
             end //** if Fields[0].AsInteger > 0 = Angebote oder Anfragen vorhanden
          else
             begin
                  BTN_LoadBE.Hint := s2 + skReturn + s3;
             end; //** Else-Zweig = Keine Angebote oder Anfragen vorhanden

          if Fields[16].AsInteger > 0  then
             begin
                  UIA_AdornerLVBadgeAFBE.Text  := IntToStr(Fields[16].AsInteger + Fields[4].AsInteger);
                  BTN_LoadBE.Hint := s2 + skReturn
                                    +Format(rs_LV_Vorhanden,[Fields[4].AsInteger]) +skReturn
                                    +Format(rs_LV_TerminUeber,[Fields[5].AsInteger])+skReturn;
             end //** if Fields[0].AsInteger > 0 = Angebote oder Anfragen vorhanden
          else
             begin
                  BTN_LoadBE.Hint := s2 + skReturn + s3;
             end; //** Else-Zweig = Keine Angebote oder Anfragen vorhanden
          }
          if (Fields[4].AsInteger > 0) or (Fields[16].AsInteger > 0) then
             BTN_LoadBE.Caption := Format(rs_LV_AFBECaption,[Fields[16].AsInteger,Fields[4].AsInteger])
          else
             BTN_LoadBE.Caption := rs_LV_AFBEStartCaption;

          //** Kontrakte
          if (Fields[6].AsInteger > 0) then
             begin
                  //UIA_AdornerLVBadgeKontrakte.Text := Format('%d',[Fields[6].AsInteger]);
                  //BTN_LoadKontrakte.Hint := rs_LV_KontrakteStartHint + skReturn
                  //                  +Format(rs_LV_Vorhanden,[Fields[6].AsInteger]) +skReturn
                  //                  +Format(rs_LV_KontrakteFakturierbereit,[Fields[7].AsInteger]) +skReturn
                  //                  +Format(rs_LV_KontrakteLSDruckbereit,[Fields[8].AsInteger]) +skReturn
                  //                  +Format(rs_LV_KontrakteTerminUeber,[Fields[9].AsInteger]) +skReturn;
                  BTN_LoadKontrakte.Caption := Format(rs_LV_KontrakteCaption,[Fields[6].AsInteger]);
             end  //** if Fields > 0
          else
             begin
                  BTN_LoadKontrakte.Caption := rs_LV_KontrakteStartCaption;
                  //BTN_LoadKontrakte.Hint := rs_LV_KontrakteStartHint + skReturn + rs_LV_KeineKontrakteVorhanden;
             end; //** else von Fields

          //** Reparaturaufträge
          if Fields[10].AsInteger > 0  then
             begin
                 // UIA_AdornerLVBadgeRepAuftraege.Text := Format('%d',[Fields[10].AsInteger]);
                 //BTN_LoadRO.Hint := rs_LV_RAStartHint + skReturn
                 //                   +Format(rs_Lv_Vorhanden,[Fields[10].AsInteger]) +skReturn
                 //                   +Format(rs_LV_RATerminUeber,[Fields[11].AsInteger])+skReturn;
                  BTN_LoadRO.Caption := Format(rs_LV_ReparaturAuftraegeCaption,[Fields[10].AsInteger]);
             end //** if Fields > 0
          else
             begin
                //  BTN_LoadRO.Hint := rs_LV_RAStartHint + skReturn + rs_LV_KeineRAVorhanden;
                  BTN_LoadRO.Caption := rs_LV_ReparaturAuftraegeStartCaption;
             end; //** else von Fields


          //** Fertigungsaufträge
          if Fields[12].AsInteger > 0 then
             begin
                //  UIA_AdornerLVBadgeAPFA.Text := Format('%d',[Fields[12].AsInteger]);
                //  BTN_LoadFE.Hint := rs_LV_FAStartHint + skReturn
                //                    +Format(rs_LV_Vorhanden,[Fields[12].AsInteger]) +skReturn
                //                    +Format(rs_LV_FATerminUeber,[Fields[13].AsInteger])+skReturn;
                  BTN_LoadFE.Caption := Format(rs_LV_FECaption,[Fields[12].AsInteger]);
             end //* if Fields > 0
          else
             begin
                  BTN_LoadFE.Caption :=rs_LV_FEStartCaption;
               //   BTN_LoadFE.Hint := rs_LV_FAStartHint + skReturn + rs_LV_KeineFAVorhanden;
             end; //** else von Fields

          //** Arbeitspläne
          if Fields[14].AsInteger > 0 then
             begin
               //   UIA_AdornerLVBadgeAP.Text := Format('%d',[Fields[14].AsInteger]);
               //   BTN_LoadAP.Hint := rs_LV_APStartHint + skReturn
               //                     +Format(rs_LV_Vorhanden,[Fields[14].AsInteger]) +skReturn;
                  BTN_LoadAP.Caption := Format(rs_LV_APCaption,[Fields[14].AsInteger]);
             end //* if Fields > 0
          else
             begin
                  BTN_LoadAP.Caption :=rs_LV_APStartCaption;
               //   BTN_LoadAP.Hint := rs_LV_APStartHint + skReturn + rs_LV_KeineAPVorhanden;
             end; //** else von Fields


         //** Hints setzen
         if ((Fields[0].AsInteger = 0) and (Fields[4].AsInteger = 0) and (Fields[6].AsInteger = 0) and
             (Fields[10].AsInteger = 0) and (Fields[15].AsInteger = 0) and (Fields[16].AsInteger = 0)) then
            BTN_Vorgaenge.Hint := rs_LV_VorgaengeStartHint + skReturn +
                                  rs_LV_KeineAuftraegeAngeboteVorhanden + skReturn +
                                  rs_LV_KeineAnfragenBestellungenVorhanden + skReturn +
                                  rs_LV_KeineKontrakteVorhanden + skReturn
         else
            begin
                 //** Angebote
                 if Fields[15].AsInteger > 0 then
                    BTN_Vorgaenge.Hint := rs_LV_VorgaengeStartHint + skReturn + skReturn
                                        +Format(rs_LV_AngeboteVorhanden,[Fields[15].AsInteger]) +skReturn
                 else
                    BTN_Vorgaenge.Hint := rs_LV_VorgaengeStartHint + skReturn +
                                          rs_LV_KeineAngeboteVorhanden;
                 //** Aufträge
                 if Fields[0].AsInteger > 0 then
                    BTN_Vorgaenge.Hint := BTN_Vorgaenge.Hint + skReturn
                                        +Format(rs_LV_AuftraegeVorhanden,[Fields[0].AsInteger])      +skReturn
                                        +Format(rs_LV_AuftragFakturierbereit,[Fields[1].AsInteger]) +skReturn
                                        +Format(rs_LV_AuftragLSDruckbereit,[Fields[2].AsInteger])   +skReturn
                                        +Format(rs_LV_TerminUeber,[Fields[3].AsInteger])     +skReturn
                 else
                    BTN_Vorgaenge.Hint := BTN_Vorgaenge.Hint + skReturn +
                                          rs_LV_KeineAuftraegeVorhanden + skReturn;

                 //** Anfragen
                 if Fields[16].AsInteger > 0 then
                    BTN_Vorgaenge.Hint := BTN_Vorgaenge.Hint + skReturn +
                                          Format(rs_LV_AFVorhanden,[Fields[16].AsInteger])
                 else
                    BTN_Vorgaenge.Hint := BTN_Vorgaenge.Hint + skReturn +
                                          rs_LV_KeineAFVorhanden + skReturn;

                 //** Bestellungen
                 if Fields[4].AsInteger > 0 then
                    BTN_Vorgaenge.Hint := BTN_Vorgaenge.Hint + skReturn +
                                          Format(rs_LV_BEVorhanden,[Fields[4].AsInteger]) + skReturn +
                                          Format(rs_LV_BETerminUeber,[Fields[5].AsInteger]) + skReturn
                 else
                    BTN_Vorgaenge.Hint := BTN_Vorgaenge.Hint + skReturn +
                                          rs_LV_KeineBEVorhanden + skReturn;

                 if ((Fields[0].AsInteger = 0) and (Fields[15].AsInteger = 0) and
                     (Fields[16].AsInteger = 0) and (Fields[4].AsInteger = 0)) then
                     BTN_Vorgaenge.Hint := rs_LV_VorgaengeStartHint + skReturn + skReturn +
                                          rs_LV_KeineAuftraegeAngeboteVorhanden;

                 //** Kontrakte
                 if Fields[6].AsInteger > 0 then
                    BTN_Vorgaenge.Hint := BTN_Vorgaenge.Hint + skReturn +
                                          Format(rs_LV_KontrakteVorhanden,[Fields[6].AsInteger]) + skReturn +
                                          Format(rs_LV_KontrakteFakturierbereit,[Fields[7].AsInteger]) + skReturn +
                                          Format(rs_LV_KontrakteLSDruckbereit,[Fields[8].AsInteger]) + skReturn +
                                          Format(rs_LV_KontrakteTerminUeber,[Fields[9].AsInteger]) + skReturn
                 else
                    BTN_Vorgaenge.Hint := BTN_Vorgaenge.Hint + skReturn +
                                          rs_LV_KeineKontrakteVorhanden;
            end; //** else Fall von if Fields..

          //** Fertigungsaufträge & Arbeitspläne
          if ((Fields[12].AsInteger = 0) and (Fields[14].AsInteger = 0)) then
             BTN_Fertigung.Hint  := rs_LV_FAStartHint + skReturn +
                                    rs_LV_KeineFAVorhanden + skReturn +
                                    rs_LV_KeineAPVorhanden
          else
             BTN_Fertigung.Hint := rs_LV_FAStartHint + skReturn + skReturn +
                                   Format(rs_LV_FAVorhanden,[Fields[12].AsInteger]) + skReturn +
                                   Format(rs_LV_FATerminUeber,[Fields[13].AsInteger]) + skReturn + skReturn +
                                   Format(rs_LV_APVorhanden,[Fields[14].AsInteger]);

          SetVorgaengeButtonGlyphs(Fields[0].AsInteger+Fields[15].AsInteger,Fields[16].AsInteger+Fields[4].AsInteger);
          SetFertigungButtonGlyphs(Fields[12].AsInteger,Fields[14].AsInteger);

          if Active then
             Close;
     end; //** with AQY_GetLamps

//** Fehlmengen und Rückstände
BTN_LoadFehlmengen.Hint := rs_LV_Fehlmengen;
if GetLinkagePointer^.Module[imDAVOS] then
   begin
        with AQY_DVFehlmengen do
             if Active then
                i1 := RecordCount;
        with AQY_DVRueckstaende do
             if Active then
                i2 := Fields[0].AsInteger;
        //** Fehlmengen
        if (i1 > 0) then
           begin
                //UIA_AdornerLVBadgeFehlmengen.Text :=  Format('%d',[i1]);
                BTN_LoadFehlmengen.Hint := rs_LV_Fehlmengen + skReturn
                                           +Format(rs_LV_AnzFehlmengen,[i1]) +skReturn;
                BTN_LoadFehlmengen.Caption := Format(rs_LV_FehlmengenCaption,[i1]);
                BTN_Dispo.Hint := rs_LV_DispoStartHint + skReturn + skReturn +
                                  Format(rs_LV_FehlmengenCaption,[i1]);

           end //** if ((i1 > 0)
        else
           begin
                BTN_LoadFehlmengen.Caption := rs_LV_FehlmengenStartCaption;
                BTN_LoadFehlmengen.Hint := rs_LV_Fehlmengen +skReturn + rs_LV_KeineFehlmengen;
                BTN_Dispo.Hint := rs_LV_DispoStartHint + skReturn + skReturn + rs_LV_KeineFehlmengen;
           end; //** else

        //** Rückstände
        if (i2 > 0) then
           begin
                //UIA_AdornerLVBadgeRueckstaende.Text :=  Format('%d',[i2]);
                BTN_LoadAuftragsrueckstaende.Hint := rs_LV_Rueckstaende + skReturn
                                                     +Format(rs_LV_AnzRueckstaende,[i2]) +skReturn;
                BTN_LoadAuftragsrueckstaende.Caption := Format(rs_LV_AuftragsrueckstaendeCaption,[i2]);
                BTN_Dispo.Hint := BTN_Dispo.Hint + skReturn + Format(rs_LV_AuftragsrueckstaendeCaption,[i2]);
           end //** if (i2 > 0))
        else
           begin
                BTN_LoadAuftragsrueckstaende.Caption := rs_LV_AuftragsrueckstaendeStartCaption;
                BTN_LoadAuftragsrueckstaende.Hint := rs_LV_Rueckstaende +skReturn + rs_LV_KeineRueckstaende;
                BTN_Dispo.Hint := BTN_Dispo.Hint + skReturn + rs_LV_KeineRueckstaende;
           end; //** else

   end; //** if GetLinkagePointer^.Module[imDAVOS] then

SetDispositionButtonGlyphs(i2,i1);
SetStuecklistenButtonGylphs(BTN_LoadStrukturstueckliste.Enabled);


{
//** Badges einblenden
UIA_AdornerLVBadgeAUAG.Visible := ((not IsSpace(UIA_AdornerLVBadgeAUAG.Text)) and (showbadges) and (BTN_LoadAU.VisibleForUser));
UIA_AdornerLVBadgeAFBE.Visible := ((not IsSpace(UIA_AdornerLVBadgeAFBE.Text)) and (showbadges) and (BTN_LoadBE.VisibleForUser));
UIA_AdornerLVBadgeAPFA.Visible   := ((not IsSpace(UIA_AdornerLVBadgeAPFA.Text)) and (showbadges) and (BTN_LoadFE.VisibleForUser));
UIA_AdornerLVBadgeKontrakte.Visible := ((not IsSpace(UIA_AdornerLVBadgeKontrakte.Text)) and (showbadges) and (BTN_LoadKontrakte.VisibleForUser));
UIA_AdornerLVBadgeRepAuftraege.Visible := ((not IsSpace(UIA_AdornerLVBadgeRepAuftraege.Text)) and (showbadges) and (BTN_LoadRO.VisibleForUser));
UIA_AdornerLVBadgeFehlmengen.Visible :=  ((not IsSpace(UIA_AdornerLVBadgeFehlmengen.Text)) and (showbadges) and (BTN_LoadFehlmengen.VisibleForUser));
UIA_AdornerLVBadgeRueckstaende.Visible :=  ((not IsSpace(UIA_AdornerLVBadgeRueckstaende.Text)) and (showbadges) and (BTN_LoadAuftragsrueckstaende.VisibleForUser));

UIA_AdornerLVBadgeVorgaenge.Visible := ((Showbadges) and (BTN_Vorgaenge.VisibleForUser) and
                                        ((not IsSpace(UIA_AdornerLVBadgeAUAG.Text)) or
                                         (not IsSpace(UIA_AdornerLVBadgeAFBE.Text))or
                                         (not IsSpace(UIA_AdornerLVBadgeKontrakte.Text))));
UIA_AdornerLVBadgeFertigung.Visible := ((Showbadges) and (BTN_Fertigung.VisibleForUser) and
                                        (not IsSpace(UIA_AdornerLVBadgeAPFA.Text)));
UIA_AdornerLVBadgeDispo.Visible := ((Showbadges) and (BTN_Dispo.VisibleForUser) and
                                     ((not IsSpace(UIA_AdornerLVBadgeRueckstaende.Text)) or
                                     (not IsSpace(UIA_AdornerLVBadgeFehlmengen.Text))));
}
end; //** procedure SetAWBWFACFHintsAndBadge


(******************************************************************************)
(***                   BuildGetLampsSelect                                  ***)
(******************************************************************************)

function TFRM_DobosLV.BuildGetLampsSelect: string;
var
   SelCFZusatztexteDokumente,
   SelXref,
   s : string;


begin

result := '';
{

SelXRef := '"XREF" = 0 ';
if (GetLinkagePointer^.Module[imSL]) then
   SelXRef := '"XREF" = (CASE WHEN EXISTS (SELECT TOP 1 y.UNTER_ARTNR FROM SL_POSTEN y WHERE y.UNTER_ARTNR = s.ARTNR) THEN 1 ELSE 0 END) ';

              //     +SelXRef
              //     +'FROM ARTIKEL_STAMM s WHERE s.ARTNR = :ARTNR ';
if (GetLinkagePointer^.Module[imDAVOS]) then
   s :=  ('SELECT '
          +'"CZT" = (SELECT count(*) FROM ARTIKEL_ZUSATZTEXT WHERE ARTNR = s.ARTNR), '
          +'"CAF" = (SELECT count(*) FROM ARTIKEL_FILE WHERE ARTNR = s.ARTNR), '
          +'"CAP" = (SELECT count(*) FROM DV_STD_KOPF WHERE HAUPT_ARTNR = s.ARTNR), '
          +'"CFE" = (SELECT count(*) FROM DV_FE_KOPF WHERE ARTNR = s.ARTNR), ')
else
   s :=  ('SELECT '
          +'"CZT" = (SELECT count(*) FROM ARTIKEL_ZUSATZTEXT WHERE ARTNR = s.ARTNR), '
          +'"CAF" = (SELECT count(*) FROM ARTIKEL_FILE WHERE ARTNR = s.ARTNR), '
          +'"CAP" = 0, '
          +'"CFE" = 0, ');
}

//** Codefelder
SelCFZusatztexteDokumente  :=
          ' SELECT '
         +' "B1"= ISNULL((SELECT x.TEXT FROM SCHLUESSEL x WHERE x.ART = ''CL'' AND x.NUMMER = 1000 + ASCII(s.C1)),'''+rs_LV_undefiniert+'''), '
         +' "B2"= ISNULL((SELECT x.TEXT FROM SCHLUESSEL x WHERE x.ART = ''CL'' AND x.NUMMER = 2000 + ASCII(s.C2)),'''+rs_LV_undefiniert+'''), '
         +' "B3"= ISNULL((SELECT x.TEXT FROM SCHLUESSEL x WHERE x.ART = ''CL'' AND x.NUMMER = 3000 + ASCII(s.C3)),'''+rs_LV_undefiniert+'''), '
         +' "B4"= ISNULL((SELECT x.TEXT FROM SCHLUESSEL x WHERE x.ART = ''CL'' AND x.NUMMER = 4000 + ASCII(s.C4)),'''+rs_LV_undefiniert+'''), '
         +' "B5"= ISNULL((SELECT x.TEXT FROM SCHLUESSEL x WHERE x.ART = ''CL'' AND x.NUMMER = 5000 + ASCII(s.C5)),'''+rs_LV_undefiniert+'''), '
         +' "B6"= ISNULL((SELECT x.TEXT FROM SCHLUESSEL x WHERE x.ART = ''CL'' AND x.NUMMER = 6000 + ASCII(s.C6)),'''+rs_LV_undefiniert+'''), '
         +' "B7"= ISNULL((SELECT x.TEXT FROM SCHLUESSEL x WHERE x.ART = ''CL'' AND x.NUMMER = 7000 + ASCII(s.C7)),'''+rs_LV_undefiniert+'''), '
         +' "B8"= ISNULL((SELECT x.TEXT FROM SCHLUESSEL x WHERE x.ART = ''CL'' AND x.NUMMER = 8000 + ASCII(s.C8)),'''+rs_LV_undefiniert+'''), '
         +' "B9"= ISNULL((SELECT x.TEXT FROM SCHLUESSEL x WHERE x.ART = ''CL'' AND x.NUMMER = 9000 + ASCII(s.C9)),'''+rs_LV_undefiniert+'''), '
         +' "B10"= ISNULL((SELECT x.TEXT FROM SCHLUESSEL x WHERE x.ART = ''CL'' AND x.NUMMER = 10000 + ASCII(s.C10)),'''+rs_LV_undefiniert+'''), '
         +'"CZT" = (SELECT count(*) FROM ARTIKEL_ZUSATZTEXT WHERE ARTNR = s.ARTNR), '
         +'"CAF" = (SELECT count(*) FROM ARTIKEL_FILE WHERE ARTNR = s.ARTNR) '
         +' FROM ARTIKEL_STAMM s WHERE s.ARTNR = :ARTNR'; // ''' +Trim(AQY_ArtikelStammARTNR.AsString)+ ''' ';

result := SelCFZusatztexteDokumente;

end; //** procedure BuildGetLampsSelect


(******************************************************************************)
(***                      BuildGetXRefSelect                                ***)
(******************************************************************************)

function TFRM_DobosLV.BuildGetXRefSelect: string;
var
   s : string;

begin

result := '';

s:= ' SELECT "COUNTXREF" = ' +
    ' (SELECT COUNT(*) FROM SL_POSTEN WHERE UNTER_ARTNR = :ARTNR) + '  +
    ' (SELECT COUNT(*) FROM DV_STD_POSTEN WHERE ARTNR = :ARTNR) + ' +
    ' (SELECT COUNT(*) FROM DV_FE_POSTEN WHERE ARTNR = :ARTNR ) + ' +
    ' (SELECT COUNT(*) FROM ARTIKEL_MINISET WHERE UNTER_ARTNR = :ARTNR )';

result := s;

end; //** procedure BuildGetXRefSelect


(******************************************************************************)
(***                      BuildGetBadgesSelect                              ***)
(******************************************************************************)

function TFRM_DobosLV.BuildGetBadgesSelect: string;
var
   ArtStrAU,
   ArtStrAG,
   ArtStrAF,
   ArtStrBE,
   AuTabelleKopf,
   AuTabellePosten,
   BeTabelleKopf,
   BeTabellePosten,
   AuftraegeGesamtStr,
   BestellungenGesamtStr,
   KontraktKopfTabelle,
   KontraktPostenTabelle,
   KontraktPostenPMTabelle,  //** 07.05.2020 SM
   KontraktSQLSelect,
   RepAuftragTabelle,
   RepAuftragSQLSelect,
   AUFakturierBereitStr,
   AULSDruckBereit,
   AUWVDatum,
   BEWVDatum,
   AuftragSQLSelect,
   FEGesamtStr,
   FETerminUberschrittenStr,
   FESQLSelect,
   APGesamtStr,
   APSQLSelect,
   AUBESQLSelect,
   AnfragenGesamtStr,
   AnfragenSQLSelect,
   AngeboteGesamtStr,
   AngeboteSQLSelect: string;
begin

//** Angebote/Aufträge
ArtStrAU := 'A';
ArtStrAG := 'G';
AuTabelleKopf := 'AUFTRAG_KOPF k';
AuTabellePosten := 'AUFTRAG_POSTEN p';

//** Field 0
AuftraegeGesamtStr := 'SELECT '
                     +' "AUCount" = '
                     +' (SELECT count(*) FROM '+AuTabellePosten+' WHERE (p.ART = '''+ArtStrAU+''') AND p.ARTNR = :ARTNR)';

//** Field 1
AUFakturierBereitStr := ' "CAUFakturierbereit" = '
                     +' (SELECT count(*) FROM '+AuTabelleKopf
                     +' JOIN '+AuTabellePosten+' ON k.NUMMER = p.NUMMER '
                     +' WHERE (k.ART = '''+ArtStrAU+''' OR k.ART = '''+ArtStrAG+''') AND p.ARTNR = :ARTNR '
                     +' AND k.NEXT_FA = ''J'') ';
//** Field 2
AULSDruckBereit  := ' "CAUDruckbereit" = '
                     +' (SELECT count(*) FROM '+AuTabelleKopf
                     +' JOIN '+AuTabellePosten+' ON k.NUMMER = p.NUMMER '
                     +' WHERE (k.ART = '''+ArtStrAU+''' OR k.ART = '''+ArtStrAG+''') AND p.ARTNR = :ARTNR '
                     +' AND k.NEXT_LS = ''J'') ';

//** Field 3
AUWVDatum := ' "AUAGWVDatum" = '
            +' (SELECT count(*) FROM '+AuTabelleKopf
            +' JOIN '+AuTabellePosten+' ON k.NUMMER = p.NUMMER '
            +' WHERE (k.ART = '''+ArtStrAU+''' OR k.ART = '''+ArtStrAG+''') AND p.ARTNR = :ARTNR'
            +' AND k.VORLAGE_DATUM < '''+shbDateToStr(GetLinkagePointer^.TagesDatum)+''' )';

//** Anfragen/Bestellungen
ArtStrBE := 'B';
ArtStrAF := 'F';
BeTabelleKopf := 'BESTELL_KOPF k';
BeTabellePosten := 'BESTELL_POSTEN p';

//** Field 4
BestellungenGesamtStr := ' "BEAFCount" = '
                     +' (SELECT count(*) FROM '+BETabellePosten+' WHERE (p.ART = '''+ArtStrBE+''') AND p.ARTNR = :ARTNR)';
//** Field 5
BEWVDatum := ' "BEAFWVDatum" = '
            +' (SELECT count(*) FROM '+BETabelleKopf
            +' JOIN '+BETabellePosten+' ON k.NUMMER = p.NUMMER '
            +' WHERE (k.ART = '''+ArtStrBE+''' OR k.ART = '''+ArtStrAF+''') AND p.ARTNR = :ARTNR'
            +' AND k.VORLAGE_DATUM < '''+shbDateToStr(GetLinkagePointer^.TagesDatum)+''' )';

AUBESQLSelect := AuftraegeGesamtStr+','+
                 AUFakturierBereitStr+','+
                 AULSDruckBereit+','+
                 AUWVDatum+','+
                 BestellungenGesamtStr+','+
                 BEWVDatum;

//** Kontrakte
KontraktKopfTabelle := 'VDA_ABRUF_KOPF k';
KontraktPostenTabelle := 'VDA_ABRUF_POSTEN p';
KontraktPostenPMTabelle := 'VDA_ABRUF_POSTEN_PACKMITTEL p';   //** 07.05.2020 SM
RepAuftragTabelle := 'KUNDENDIENST';

if (GetLinkagePointer^.Module[imVDA]) then
    KontraktSQLSelect :=

   //** Field 6
    ' "CKontrakte" = '
   +' (SELECT count(*) FROM '+KontraktKopfTabelle+' WHERE k.ARTNR = :ARTNR) +'
   //** 07.05.2020 SM - Artikel kann nur in einer der beiden Tabellen enthalten sein
   //** - aber in VDA_ABRUF_POSTEN_PACKMITTEL mehrmals (Posten)
   +' (SELECT count(*) FROM (SELECT p.KUNU, p.NUMMER FROM '+KontraktPostenPMTabelle
   +' WHERE p.ARTNR = :ARTNR GROUP BY p.KUNU, p.NUMMER) AS x), '

   //** Field 7
   +'"CKontrakteLieferbereit"= '
   +' (SELECT count(*) FROM '+KontraktKopfTabelle+' WHERE k.ARTNR = :ARTNR '
   +' AND k.NEXT_FA = ''J'') +'
   //** 07.05.2020 SM - Artikel kann nur in einer der beiden Tabellen enthalten sein
   //** - aber in VDA_ABRUF_POSTEN_PACKMITTEL mehrmals (Posten)
   +' (SELECT count(*) FROM (SELECT p.KUNU, p.NUMMER FROM '+KontraktPostenPMTabelle
   +' WHERE p.ARTNR = :ARTNR AND (EXISTS (SELECT k.KUNU, k.NUMMER FROM '+KontraktKopfTabelle
   +' WHERE p.KUNU = k.KUNU AND p.NUMMER = k.NUMMER AND k.NEXT_FA = ''J'')) GROUP BY p.KUNU, p.NUMMER) AS x), '

   //** Field 8
   +'"CKontrakteLSDruckBereit"= '
   +' (SELECT count(*) FROM '+KontraktKopfTabelle+' WHERE k.ARTNR = :ARTNR '
   +' AND k.NEXT_LS = ''J'') +'
   //** 07.05.2020 SM - Artikel kann nur in einer der beiden Tabellen enthalten sein
   //** - aber in VDA_ABRUF_POSTEN_PACKMITTEL mehrmals (Posten)
   +' (SELECT count(*) FROM (SELECT p.KUNU, p.NUMMER FROM '+KontraktPostenPMTabelle
   +' WHERE p.ARTNR = :ARTNR AND (EXISTS (SELECT k.KUNU, k.NUMMER FROM '+KontraktKopfTabelle
   +' WHERE p.KUNU = k.KUNU AND p.NUMMER = k.NUMMER AND k.NEXT_LS = ''J'')) GROUP BY p.KUNU, p.NUMMER) AS x), '

   //** Field 9
   +'"CKontrakteTerminUeberschritten"= '
   +' (SELECT Count(p.LIEFER_DATUM) FROM '+KontraktPostenTabelle
   +' JOIN '+KontraktKopfTabelle+' ON k.NUMMER = p.NUMMER '
   +' WHERE k.ARTNR = :ARTNR '
   +' AND p.LIEFER_DATUM < '''+shbDateToStr(GetLinkagePointer^.TagesDatum)+''' ) +'
   //** 07.05.2020 SM
   +' (SELECT count(*) FROM (SELECT pp.KUNU, pp.NUMMER FROM '+KontraktPostenPMTabelle+'p'
   +' WHERE pp.ARTNR = :ARTNR '
   +' AND (EXISTS (SELECT p.KUNU, p.NUMMER FROM '+KontraktPostenTabelle
   +' WHERE pp.KUNU = p.KUNU AND pp.NUMMER = p.NUMMER AND p.LIEFER_DATUM < '''
   +  shbDateToStr(GetLinkagePointer^.TagesDatum) +''')) GROUP BY pp.KUNU, pp.NUMMER) AS x) '
else
   KontraktSQLSelect :=
   ' "CKontrakte" = 0, '
   +' "CKontrakteLieferbereit" = 0, '
   +' "CKontrakteLSDruckBereit" = 0, '
   +' "CKontrakteTerminUeberschritten" = 0 ';

//** Reparaturaufträge
if (GetLinkagePointer^.Module[imRA]) then
   RepAuftragSQLSelect :=
   //** Field 10
   '"CRepAuftrag" = (SELECT count(*) FROM '+RepAuftragTabelle+' WHERE AKTIV = ''A'' AND GERAET = :ARTNR), '
   //** Field 11
   +'"CRepAuftragUeberschritten" = '
   +' (SELECT count(*) FROM '+RepAuftragTabelle+' WHERE AKTIV = ''A'' AND GERAET = :ARTNR '
   +' AND PLANUNGS_DATUM < '''+shbDateToStr(GetLinkagePointer^.TagesDatum)+''' )'
else
   RepAuftragSQLSelect :=
   '"CRepAuftrag" = 0,' +
   '"CRepAuftragUeberschritten" = 0 ';

//** Fertigungsaufträge
if (GetLinkagePointer^.Module[imDAVOS]) then
   begin
        //** Field 12
        FEGesamtStr := ' "CFE" = (SELECT count(*) FROM DV_FE_KOPF WHERE ARTNR = :ARTNR) ';
        //** Field 13
        FETerminUberschrittenStr := ' "CFETerminUeberschritten" = (SELECT count(*) FROM DV_FE_KOPF WHERE ARTNR = :ARTNR '
                                    +' AND END_TERMIN < '''+shbDateToStr(GetLinkagePointer^.TagesDatum)+''' ) ';
   end //** if (GetLinkagePointer^.Module[imDAVOS]) then
else
   begin
        FEGesamtStr := ' "CFE" = 0 ';
        FETerminUberschrittenStr := ' "CFETerminUeberschritten" = 0 ';
   end; //** else von Davos

FESQLSelect := FEGesamtStr + ',' + FETerminUberschrittenStr;

//** Arbeitspläne
if (GetLinkagePointer^.Module[imDAVOS]) then
   begin
        //** Field 14
        APGesamtStr := ' "CAP" = (SELECT count(*) FROM DV_STD_KOPF WHERE HAUPT_ARTNR = :ARTNR) ';
   end //** if (GetLinkagePointer^.Module[imDAVOS]) then
else
   begin
        APGesamtStr := ' "CAP" = 0 ';
   end; //** else von Davos

APSQLSelect := APGesamtStr;

//** Angebote
//** Field 15
AngeboteGesamtStr :=  ' "AGCount" = '
                     +' (SELECT count(*) FROM '+AuTabellePosten+' WHERE (p.ART = '''+ArtStrAG+''') AND p.ARTNR = :ARTNR)';

//**Anfragen
//** Field 16
AnfragenGesamtStr := ' "AFCount" = '
                     +' (SELECT count(*) FROM '+BETabellePosten+' WHERE (p.ART = '''+ArtStrAF+''') AND p.ARTNR = :ARTNR)';

result := AUBESQLSelect+','+
          KontraktSQLSelect+','+
          RepAuftragSQLSelect+','+
          FESQLSelect+','+
          APSQLSelect+','+
          AngeboteGesamtStr+','+
          AnfragenGesamtStr;

end; //** function BuildGetBadgesSelect


(******************************************************************************)
(***                  BTN_ArtikelZusatzInfos: OnClick                       ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_ArtikelZusatzInfosClick(Sender: TObject);
begin

inherited;

BTN_ArtikelZusatzInfos.DropDown();

end; //** procedure BTN_ArtikelZusatzInfosClick


(******************************************************************************)
(***                 BTN_Belege: OnClick                                    ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_VorgaengeClick(Sender: TObject);
begin

inherited;

BTN_Vorgaenge.DropDown();

end; //** procedure BTN_BelegeClick


(******************************************************************************)
(***                BTN_Fertigung: OnClick                                  ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_FertigungClick(Sender: TObject);
begin

inherited;

BTN_Fertigung.DropDown();

end; //** procedure BTN_FertigungClick


(******************************************************************************)
(***                BTN_Seriennummern: OnClick                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_SeriennummernClick(Sender: TObject);
begin

inherited;

BTN_Seriennummern.DropDown();

end; //** procedure BTN_SeriennummernClick


(******************************************************************************)
(***                       BTN_Seriennummernkartei: OnClick                 ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_SeriennummernkarteiClick(Sender: TObject);
var
  FSichtenSNKarteiParams : TSichtenSNKarteiParams;
  i : integer;
begin

inherited;

if ModalCallActive then
   Exit;

with FSichtenSNKarteiParams do
     begin
          AFunction := 0;
          ACallingProgramm := cpLV;
          AArtNr := AQY_ArtikelStammARTNR.AsString;
          AKunu := 0;
          ALfNu := 0;
          AKB := AQY_ArtikelStammKB.AsString;
          ASerial := '';
          ASelectedArtNr := '';
          ASelectedSerial := '';
          AAuftragsNr := 0;
          AAuPos := 0;
          ASerialList := nil;
          ASNCount := 0;
          AForm := Self;
     end; //** with FSichtenAKParams do
try
   ModalCallActive := true;
   i := Call (dnDobosCommon, 'sichtensnkartei', @FSichtenSNKarteiParams);
finally
   ModalCallActive := false;
end; //** try..finally


end; //** procedure BTN_SeriennummernkarteiClick


(******************************************************************************)
(***                 BTN_Dispo: OnClick                                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_DispoClick(Sender: TObject);
begin

inherited;

BTN_Dispo.DropDown();

end; //** procedure BTN_DispoClick


(******************************************************************************)
(***               BTN_Statistiken: OnClick                                 ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_StatistikenClick(Sender: TObject);
begin

inherited;

BTN_Statistiken.DropDown();

end; //** procedure BTN_StatistikenClick


(******************************************************************************)
(***              BTN_Stuecklisten: OnClick                                 ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_StuecklistenClick(Sender: TObject);
begin

inherited;

BTN_Stuecklisten.DropDown();

end; //** procedure BTN_StuecklistenClick


(******************************************************************************)
(***                BTN_Dokumente: OnClick                                  ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_DokumenteClick(Sender: TObject);
begin

inherited;

BTN_Dokumente.DropDown();

end; //** procedure BTN_DokumenteClick


(******************************************************************************)
(***                  BTN_Archive: OnClick                                  ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_ArchiveClick(Sender: TObject);
begin

inherited;

BTN_Archive.DropDown();

end; //** procedure BTN_ArchiveClick


(******************************************************************************)
(***                 BTN_LoadPMAllg: OnClick                                ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_LoadPMAllgClick(Sender: TObject);
begin

inherited;

BTN_LoadPMAllg.DropDown();

end; //** procedure BTN_LoadPMAllgClick


(******************************************************************************)
(***                BTN_Drucken: OnClick                                    ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_DruckenClick(Sender: TObject);
begin

inherited;

BTN_Drucken.DropDown();

end; //** procedure BTN_DruckenClick


(******************************************************************************)
(***               BTN_Kundenspezifisch: OnClick                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_KundenspezifischClick(Sender: TObject);
begin

inherited;

BTN_Kundenspezifisch.DropDown();

end; //** procedure BTN_KundenspezifischClick


(******************************************************************************)
(***               BTN_Kalkulation: OnClick                                 ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_KalkulationClick(Sender: TObject);
begin

inherited;

BTN_Kalkulation.DropDown();

end; //** procedure BTN_KalkulationClick


(******************************************************************************)
(***             BTN_Packmittelverwaltung: OnClick                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_PackmittelverwaltungClick(Sender: TObject);
var
   mPMNr  : string;
   LoadSw : char;

begin

inherited;

mPMNr := TrimRight(EDT_Packmittel.Text);
if IsSpace(mPMNr) then
   LoadSW := ' '
else
   LoadSW := 'L';
GetLinkagePointer^.LinkString128 := mPMNr;
LoadDll(dnDobosPV, ctyNormal, LoadSW);

end; //** procedure BTN_PackmittelverwaltungClick


(******************************************************************************)
(***                     SetHintsArtikelInfos                               ***)
(******************************************************************************)

procedure TFRM_DobosLV.SetHintsArtikelInfos;
begin

{
BTN_ArtikelZusatzInfos.Hint := '';

if ((UIA_AdornerLVBadgeInfoblatt.Visible) and (not (UIA_AdornerLVBadgeWichtigeHinweise.Visible))) then
   BTN_ArtikelZusatzInfos.Hint := rs_LV_InfoblattVorhanden;

if ((not UIA_AdornerLVBadgeInfoblatt.Visible) and (UIA_AdornerLVBadgeWichtigeHinweise.Visible)) then
   BTN_ArtikelZusatzInfos.Hint := rs_LV_WichtigeHinweise;

if ((UIA_AdornerLVBadgeInfoblatt.Visible) and (UIA_AdornerLVBadgeWichtigeHinweise.Visible)) then
    BTN_ArtikelZusatzInfos.Hint := rs_LV_InfoblattVorhanden + skreturn + rs_LV_WichtigeHinweise;

if ((not UIA_AdornerLVBadgeInfoblatt.Visible) and (not UIA_AdornerLVBadgeWichtigeHinweise.Visible)) then
    BTN_ArtikelZusatzInfos.Hint := rs_LV_ArtikelinfosStartHint;

BTN_LoadIB.Down := UIA_AdornerLVBadgeInfoblatt.Visible;
BTN_LoadWichtigeHinweise.Down := UIA_AdornerLVBadgeWichtigeHinweise.Visible;

}
end; //** procedure SetHintsArtikelInfos


(******************************************************************************)
(***                    SetInfoButtonGlyphs                                 ***)
(******************************************************************************)

procedure TFRM_DobosLV.SetInfoButtonGlyphs;
begin

if ((BTN_LoadIB.Down) and (not BTN_LoadWichtigeHinweise.Down)) then
   BTN_ArtikelZusatzinfos.LargeGlyph := BTN_InfoDummyNurInfoBlatt.LargeGlyph;

if ((not BTN_LoadIB.Down) and (not BTN_LoadWichtigeHinweise.Down)) then
   BTN_ArtikelZusatzinfos.LargeGlyph := BTN_InfoDummyOhneBadges.LargeGlyph;

if ((not BTN_LoadIB.Down) and (BTN_LoadWichtigeHinweise.Down)) then
   if not ShowWh then
      BTN_ArtikelZusatzinfos.LargeGlyph := BTN_InfoDummyNurWichtigeHinweiseBlau.LargeGlyph
   else
      BTN_ArtikelZusatzinfos.LargeGlyph := BTN_InfoDummyNurWH.LargeGlyph;

if ((BTN_LoadIB.Down) and (BTN_LoadWichtigeHinweise.Down)) then
   if not ShowWH then
      BTN_ArtikelZusatzinfos.LargeGlyph := BTN_InfoDummyBeideWHBlau.LargeGlyph
   else
      BTN_ArtikelZusatzinfos.LargeGlyph := BTN_InfoDummyBeideBadges.LargeGlyph;
end; //** procedure SetInfoButtonGlyphs


(******************************************************************************)
(***                  SetDokumenteButtonGlyphs                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.SetDokumenteButtonGlyphs;
begin

if ((BTN_LoadZusatzTexte.Down) and (not BTN_LoadZusatzDokumente.Down)) then
   BTN_Dokumente.LargeGlyph := BTN_DokumenteDummyNurZusatztexte.LargeGlyph;

if ((not BTN_LoadZusatzTexte.Down) and (not BTN_LoadZusatzDokumente.Down)) then
   BTN_Dokumente.LargeGlyph := BTN_DokumenteDummyOhneBadges.LargeGlyph;

if ((not BTN_LoadZusatzTexte.Down) and (BTN_LoadZusatzDokumente.Down)) then
   BTN_Dokumente.LargeGlyph := BTN_DokumenteDummyNurZusatzdokumente.LargeGlyph;

if ((BTN_LoadZusatzTexte.Down) and (BTN_LoadZusatzDokumente.Down)) then
   BTN_Dokumente.LargeGlyph := BTN_DokumenteDummyBeideBadges.LargeGlyph;

end; //** procedure SetDokumenteButtonGlyphs


(******************************************************************************)
(***                    SetDispositionButtonGlyphs                          ***)
(******************************************************************************)

procedure TFRM_DobosLV.SetDispositionButtonGlyphs(const AAnzAR, AnzFM: integer);
var
   AImage : TdxSmartImage;
   AImageIndex : integer;
begin

try
   //** Beide
   if ((AAnzAR > 0) and (AnzFM > 0)) then
      AImageIndex := 11
   else
      //** Nur AR
      if ((AAnzAR > 0) and (AnzFM = 0)) then
         AImageIndex := 9
      else
         //** Nur FM
         if ((AAnzAR = 0) and (AnzFM > 0)) then
            AImageIndex := 10
         else
            //** keine
            AImageIndex := 8;

   AImage := TdxSmartImage.Create;
   IML_BadgeIconsBar.GetImage(AImageIndex,AImage);
   BTN_Dispo.LargeGlyph.Assign(AImage);
finally
   if Assigned(AImage) then
      FreeAndNil(AImage);
end; //** finally

end; //** procedure SetDispositionButtonGlyphs


(******************************************************************************)
(***               BTN_GetFromClipboardKlein: OnClick                       ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_GetFromClipboardKleinClick(Sender: TObject);
begin

inherited;

KeyList.Clear;
try
   KeyList.LoadFromClipBoard(Integer(dcbLagerClipBoard));
except
   ShowMessage(rs_LV_ErrMSG);
   //ClipBoard.Clear;
   UpdateButtons;
   Exit;
end; //** try..except

if KeyList.Count < 1 then
   begin
        ShowMessage(rs_LV_ErrMsg);
        Exit;
   end; //** if KeyList.Count < 1

ClipBoard.Clear;
BGP_SelNavBarGruppe.Visible := ivAlways;
UpdateNavi;
UpDateButtons;
BTN_NavFirstClick(BTN_NavFirst);

end; //** procedure BTN_GetFromClipboardKleinClick


(******************************************************************************)
(***                   ToggleOpenQuerspruengeAutomatisch                    ***)
(******************************************************************************)

procedure TFRM_DobosLV.ToggleOpenQuerspruengeAutomatisch;
begin

if BTN_ToggleMouseOverDropDown.Down then
   TdxBarControlAccess(TdxBarAccess(BAR_QuerspruengeDllForm).Control).OnMouseMove := DoBarMouseMoveDropDown
else
   TdxBarControlAccess(TdxBarAccess(BAR_QuerspruengeDllForm).Control).OnMouseMove := nil;

end; //** procedure ToggleOpenQuerspruengeAutomatisch


(******************************************************************************)
(***                      ToggleXRefSelect                                  ***)
(******************************************************************************)

procedure TFRM_DobosLV.ToggleXRefSelect;
begin

if BTN_ToggleXRef.Down then
   DoXRefSelect := true
else
   DoXRefSelect := false;

end; //** procedure ToggleXRefSelect


(******************************************************************************)
(***                     DoBarMouseMoveDropDown                             ***)
(******************************************************************************)

procedure TFRM_DobosLV.DoBarMouseMoveDropDown(Sender: TObject; Shift: TShiftState; X, Y: Integer);
var
  APoint: TPoint;
  AItemControl: TdxBarItemControl;
begin

if not BTN_ToggleMouseOverDropDown.Down then
   Exit;

GetCursorPos(APoint);
with TdxBarControlAccess(Sender) do
     begin
          APoint := ScreenToClient(APoint);
          AItemControl := ItemAtPos(APoint);
     end;
if ((AItemControl <> nil) and (AItemControl.Item is TdxBarLargeButton)) then
    if not (ssAlt in Shift) then
       if Application.MainForm.ActiveMDIChild = self then
          TdxBarLargeButton(AItemControl.Item).DropDown();

end; //** procedure DoBarMouseMoveDropDown


(******************************************************************************)
(***             LoadSaveAndSetOpenQuersrpuengeAutomatisch                  ***)
(******************************************************************************)

procedure TFRM_DobosLV.LoadSaveAndSetOpenQuersrpuengeAutomatisch(const ASave: boolean);
var
   ARootKey   : HKEY;
   APath      : string;
   AKey       : string;
   ABool      : boolean;
   ASize      : integer;
begin

if ASave then
   begin
        ARootKey := HKEY_CURRENT_USER;
        APath := Registry_BiosPfad+'\MouseOverDropDown';
        AKey := 'dobosKLLV';
        ABool := BTN_ToggleMouseOverDropDown.Down;
        ASize := SizeOf(ABool);
        ReadWriteRegistry(wrBool, true, ARootKey, APath, AKey, ABool, ASize);
   end //** if ASave
else
   begin
        ARootKey := HKEY_CURRENT_USER;
        APath := Registry_BiosPfad+'\MouseOverDropDown';
        AKey := 'dobosKLLV';
        ABool := false;
        ASize := SizeOf(ABool);
        ReadWriteRegistry(rdBool, true, ARootKey, APath, AKey, ABool, ASize);
        BTN_ToggleMouseOverDropDown.Down := ABool;
        ToggleOpenQuerspruengeAutomatisch;
   end; //** Else-Zweig

end; //** procedure LoadSaveAndSetOpenQuersrpuengeAutomatisch


(******************************************************************************)
(***             LoadSaveAndSetXRefSelect                                   ***)
(******************************************************************************)

procedure TFRM_DobosLV.LoadSaveAndSetXRefSelect(const ASave: boolean);
var
   ARootKey   : HKEY;
   APath      : string;
   AKey       : string;
   ABool      : boolean;
   ASize      : integer;
begin

if ASave then
   begin
        ARootKey := HKEY_CURRENT_USER;
        APath := Registry_BiosPfad+'\XRefSelectLV';
        AKey := 'XRefSelect';
        ABool := BTN_ToggleXRef.Down;
        ASize := SizeOf(ABool);
        ReadWriteRegistry(wrBool, true, ARootKey, APath, AKey, ABool, ASize);
   end //** if ASave
else
   begin
        ARootKey := HKEY_CURRENT_USER;
        APath := Registry_BiosPfad+'\XRefSelectLV';
        AKey := 'XRefSelect';
        ABool := false;
        ASize := SizeOf(ABool);
        ReadWriteRegistry(rdBool, true, ARootKey, APath, AKey, ABool, ASize);
        BTN_ToggleXRef.Down := ABool;
        ToggleXRefSelect;
   end; //** Else-Zweig

end; //** procedure LoadSaveAndSetXRefSelect


(******************************************************************************)
(***                   BTN_ToggleTabname: OnClick                           ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_ToggleTabnameClick(Sender: TObject);
begin

inherited;
LoadAndSaveTabname(true);
UpdateButtons;

end; //** procedure BTN_ToggleTabnameClick


(******************************************************************************)
(***                     BTN_ToggleXRef: OnClick                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_ToggleXRefClick(Sender: TObject);
begin

inherited;

DoXRefSelect := BTN_ToggleXRef.Down;
LoadSaveAndSetXRefSelect(true);

end; //** procedure BTN_ToggleXRefClick


(******************************************************************************)
(***                   LoadAndSaveTabname                                   ***)
(******************************************************************************)

procedure TFRM_dobosLV.LoadAndSaveTabname(const ASave: boolean);
var
   ARootKey   : HKEY;
   APath      : string;
   AKey       : string;
   ABool      : boolean;
   ASize      : integer;
begin

if ASave then
   begin
        ARootKey := HKEY_CURRENT_USER;
        APath := Registry_BiosPfad+'\Tabname';
        AKey := 'dobosLV';
        ABool := BTN_ToggleTabname.Down;
        ASize := SizeOf(ABool);
        ReadWriteRegistry(wrBool, true, ARootKey, APath, AKey, ABool, ASize);
   end //** if ASave
else
   begin
        ARootKey := HKEY_CURRENT_USER;
        APath := Registry_BiosPfad+'\Tabname';
        AKey := 'dobosLV';
        ABool := false;
        ASize := SizeOf(ABool);
        ReadWriteRegistry(rdBool, true, ARootKey, APath, AKey, ABool, ASize);
        BTN_ToggleTabname.Down := ABool;
   end; //** Else-Zweig

end; //** procedure LoadAndSaveTabname


(******************************************************************************)
(***               BTN_ToggleMouseOverDropDown: OnClick                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_ToggleMouseOverDropDownClick(Sender: TObject);
begin

inherited;
ToggleOpenQuerspruengeAutomatisch;
LoadSaveAndSetOpenQuersrpuengeAutomatisch(true);

end; //** procedure BTN_ToggleMouseOverDropDownClick


(******************************************************************************)
(***                  SetVorgaengeButtonGlyphs                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.SetVorgaengeButtonGlyphs(const AAnzAUAG,AAnzBEAF : integer);
var
   AImage : TdxSmartImage;
   AImageIndex : integer;
begin

try
   //** Beide
   if ((AAnzAUAG > 0) and (AAnzBEAF > 0)) then
      AImageIndex := 3
   else
      //** Nur AUAG
      if ((AAnzAUAG > 0) and (AAnzBEAF = 0)) then
         AImageIndex := 1
      else
         //** Nur BEAF
         if ((AAnzAUAG = 0) and (AAnzBEAF > 0)) then
            AImageIndex := 2
         else
            //** keine
            AImageIndex := 0;

   AImage := TdxSmartImage.Create;
   IML_BadgeIconsBar.GetImage(AImageIndex,AImage);
   BTN_Vorgaenge.LargeGlyph.Assign(AImage);
finally
   if Assigned(AImage) then
      FreeAndNil(AImage);
end; //** finally

end; //** procedure SetVorgaengeButtonGlyphs


(******************************************************************************)
(***                    SetFertigungButtonGlyphs                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.SetFertigungButtonGlyphs(const AAnzFE, AnzAP: integer);
var
   AImage : TdxSmartImage;
   AImageIndex : integer;
begin

try
   //** Beide
   if ((AAnzFE > 0) and (AnzAP > 0)) then
      AImageIndex := 7
   else
      //** Nur FE
      if ((AAnzFE > 0) and (AnzAP = 0)) then
         AImageIndex := 6
      else
         //** Nur AP
         if ((AAnzFE = 0) and (AnzAP > 0)) then
            AImageIndex := 5
         else
            //** keine
            AImageIndex := 4;

   AImage := TdxSmartImage.Create;
   IML_BadgeIconsBar.GetImage(AImageIndex,AImage);
   BTN_Fertigung.LargeGlyph.Assign(AImage);
finally
   if Assigned(AImage) then
      FreeAndNil(AImage);
end; //** finally

end; //** procedure SetFertigungButtonGlyphs


(******************************************************************************)
(***                    SetStuecklistenButtonGylphs                         ***)
(******************************************************************************)

procedure TFRM_DobosLV.SetStuecklistenButtonGylphs(const AHatSL: boolean);
var
   AImage : TdxSmartImage;
   AImageIndex : integer;
begin

try
   //** Hat SL
   if AHatSL then
      AImageIndex := 13
   else
      //** keine
      AImageIndex := 12;

   AImage := TdxSmartImage.Create;
   IML_BadgeIconsBar.GetImage(AImageIndex,AImage);
   BTN_Stuecklisten.LargeGlyph.Assign(AImage);
finally
   if Assigned(AImage) then
      FreeAndNil(AImage);
end; //** finally


end; //** procedure SetStuecklistenButtonGylphs


(******************************************************************************)
(***                  EDT_ZNRev: OnEnter                                    ***)
(******************************************************************************)

procedure TFRM_DobosLV.EDT_ZNRevEnter(Sender: TObject);
begin

inherited;
if ((AQY_ArtikelStamm.Active) and (AQY_ArtikelStamm.State in [dsInsert,dsEdit])) then
   EDT_ZNRev.SelectAll;

end; //** procedure TFRM_DobosLV.EDT_ZNRevEnter


(******************************************************************************)
(***                       CheckAndSetTabCaption                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.CheckAndSetTabCaption;
begin

if (GetLinkagePointer^.IsTabbedAnsichtActive) and (BTN_ToggleTabname.Down) then
   begin
        if IsSpace(CurrArtnr) then
           Self.Caption := MNI_Programm.Caption
        else
           Self.Caption := CurrArtnr + ' / ' + EDT_KB.Text;
   end //** if (GetLinkagePointer^.IsTabbedAnsichtActive) and
else
   Self.Caption := MNI_Programm.Caption;

end; //** procedure CheckAndSetTabCaption


(******************************************************************************)
(***                     CheckBeforePEChange                                ***)
(******************************************************************************)

function TFRM_DobosLV.CheckBeforePEChange: boolean;
begin

result := true;

try
   with AQY_Divers do
        begin
             if Active then
                Close;
             Connection := GetDobosADB;
             SQL.Clear;
             SQL.Add('SELECT count(*) FROM ARTIKEL_PREISE WHERE ARTNR = '''+SQLTextString(CurrArtnr)+'''');
             Open;

             if Fields[0].AsInteger > 0 then
                result := false;

             if Active then
                Close;

             if result = false then
                Exit;

             SQL.Clear;
             SQL.Add('SELECT count(*) FROM ARTIKEL_LAGER WHERE INV_EK <> 0 AND ARTNR = '''+SQLTextString(CurrArtnr)+'''');
             Open;

             if Fields[0].AsInteger > 0 then
                result := false;

             if Active then
                Close;

             if result = false then
                Exit;

             if ((AQY_ArtikelStammEK.AsCurrency <> 0) or (AQY_ArtikelStammDURCH_EK.AsCurrency <> 0)) then
                result := false;

             if Active then
                Close;
        end;

except
  result := false;
end;


end; //** function CheckBeforePEChange


(******************************************************************************)
(***           GRD_LagerDBViewBESTAND: OnGetDisplayText                     ***)
(******************************************************************************)

procedure TFRM_DobosLV.GRD_LagerDBViewBESTANDGetDisplayText(Sender: TcxCustomGridTableItem;
                                                            ARecord: TcxCustomGridRecord;
                                                            var AText: string);
begin
inherited;

//** Es würde auch OnGetDataText gehen, dann geht auch Gruppierung etc.
//** Allerdings wird dann das Displayformat ignoriert *OB
(*ACur := StrToFloat(AText);
  AText := Format('%.2f', [ACur]);*)
if not AQY_ArtikelStamm.Active then
   Exit;
if AQY_ArtikelStammHIDE_BESTAND.AsString = 'J' then
   //AText := #8734;
   AText := '';

end; //** procedure GRD_LagerDBViewBESTANDGetDisplayText

(******************************************************************************)
(***                   GRD_LagerDBViewBESTAND: OnGetCellHint                ***)
(******************************************************************************)

procedure TFRM_DobosLV.GRD_LagerDBViewBESTANDGetCellHint(Sender: TcxCustomGridTableItem;ARecord: TcxCustomGridRecord;
                                                         ACellViewInfo: TcxGridTableDataCellViewInfo;
                                                         const AMousePos: TPoint; var AHintText: TCaption;
                                                         var AIsHintMultiLine: Boolean; var AHintTextRect: TRect);
var
   AMeter : Currency;
begin

inherited;
AHintText := '';
AMeter := 0.0000;

if(GetLinkagePointer^.Module[imDavos]) then
   begin
        if AQY_ArtikelStamm.Active then
           if ((AQY_ArtikelStammB_BASIS.AsInteger = 1) and (AQY_ArtikelStammGEWICHT.AsCurrency <> 0.00)
           and (AQY_ArtikelStammSPEZ_GEWICHT.AsCurrency <> 0.00)
           and (((AQY_ArtikelStammDURCHMESSER.AsCurrency <> 0.00)
           and (AQY_ArtikelStammLAENGE.AsCurrency <> 0.00))
           or ((AQY_ArtikelStammBREITE.AsCurrency <> 0.00)
           and (AQY_ArtikelStammLAENGE.AsCurrency <> 0.00)
           and (AQY_ArtikelStammHOEHE.AsCurrency <> 0.00)))) then
               begin
                   AMeter := ARecord.Values[GRD_LagerDBViewBESTAND.Index] / AQY_ArtikelStammGEWICHT.AsCurrency;
                   AHintText := FloatToStrF(AMeter, ffNumber, 12, 4) + ' ' + rs_LV_Meter;
               end; //** if ((AQY_ArtikelStammB_BASIS.AsInteger = 1) AND ...
      end; //** if(GetLinkagePointer^.Module[imDavos])

end; //** procedure GRD_LagerDBViewBESTANDGetCellHint


(******************************************************************************)
(***                    SetAllHideBestandEdits                              ***)
(******************************************************************************)

procedure TFRM_DobosLV.SetAllHideBestandEdits;
var
   AHideBest : boolean;
begin

AHideBest := AQY_ArtikelStammHIDE_BESTAND.AsString = 'J';

SetHideBestand(EDT_SumBestand,AHideBest);
SetHideBestand(EDT_SumReserviert,AHideBest);
SetHideBestand(EDT_SumBestellt,AHideBest);
SetHideBestand(EDT_SumRueckstand,AHideBest);
SetHideBestand(EDT_SumMiBest,AHideBest);
SetHideBestand(EDT_SumSollBest,AHideBest);
SetHideBestand(EDT_SumBBK,AHideBest);
SetHideBestand(EDT_SumDavosBestellt,AHideBest);
SetHideBestand(EDT_SumDavosRueckstand,AHideBest);
SetHideBestand(EDT_Dispo,AHideBest);

end; //** procedure SetAllHideBestandEdits

(******************************************************************************)
(***      BTN_RKMViewer: OnClick                                            ***)
(******************************************************************************)

procedure TFRM_DobosLV.BTN_RKMViewerClick(Sender: TObject);
var
   fKunu : integer;

begin

inherited;
fKunu := 0;
if AQY_LieferantKUNU.AsInteger >= FirstKreditor then
   fKunu := AQY_LieferantKUNU.AsInteger;

CallRKMViewer(2, fKunu, CurrArtNr);

end; //** procedure BTN_RKMViewerClick


(******************************************************************************)
(***     CheckDemo                                                          ***)
(******************************************************************************)

function TFRM_DobosLV.CheckDemo: boolean;
var
   AValues : array [0..0] of Variant;

begin

result := false;
if ReadAnyFields (GetDobosADB,
                  'ARTIKEL_STAMM',
                  'WHERE ARTNR >= ''''',
                  ['count(*)'],
                   AValues) then
try
   if AValues[0] > 49 then
      result := true;

except
   result := false;
end; //** try..except

end; //** function CheckDemo



end. //** Programm

(******************************************************************************)
(***    P R O G R A M M E N D E                                             ***)
(******************************************************************************)


